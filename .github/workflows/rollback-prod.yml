name: Rollback Prod

on:
  release:
    types: [deleted]

env:
  NPM_TOKEN: ${{secrets.NPM_TOKEN}}
  GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
  SENTRY_AUTH_TOKEN: ${{secrets.SENTRY_AUTH_TOKEN}}
  RELEASE_SLACK_WEB_HOOK_URL: ${{secrets.RELEASE_SLACK_WEB_HOOK_URL}}
  AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY_ID_PROD}}
  AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY_PROD}}
  AWS_REGION: ${{secrets.AWS_REGION}}
  CI: true
  IS_RELEASE: true

jobs:
  rollback-prod:
    runs-on: ubuntu-latest
    steps:
      - name: Get Tag
        uses: olegtarasov/get-tag@v2.1
        id: tagName
        with:
          tagRegex: '(?<package>.*)_(?<version>.*)'

      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - uses: actions/github-script@v5
        with:
          script: |
            const child_process = require('child_process')
            const packageInfo = require(`packages/${context.steps.tagName.outputs.package}/package.json`)
            const creator = context.payload.sender.login
            const tags = github.rest.repos.listTags({
              ...context.issue,
            }).sort((a,b) => a.name - b.name)
            console.log('values', `${context.steps.tagName.outputs.package}`, `${context.steps.tagName.outputs.version }`)
            const PREVIOUS_VERSION = tags[tags.findIndex(tag => tag.name === `${context.steps.tagName.outputs.version}`) - 1]
            console.log('previous version', PREVIOUS_VERSION)
            if (!PREVIOUS_VERSION) {
              process.exit(127)
            }
            const IS_PACKAGE = packageInfo.name.includes("@reapit/", 0)
            console.log('is package', IS_PACKAGE)
            const child = async (command) => {
              await new Promise((resolve) => child_process.exec(command, (err) => {
                if (err) {
                  process.exit(1)
                }
                resolve()
              }))
            }
            const actions = async () => {
              await child(`yarn workspace ${context.steps.tagName.outputs.package} run conf --name production`)
              await child(`yarn workspace ${context.steps.tagName.outputs.package} run build`)
              await child(`yarn workspace ${context.steps.tagName.outputs.package} run release --stage prod`)
              if (IS_PACKAGE) {
                await child(
                  `yarn npm dist-tag rm ${context.steps.tagName.outputs.package} latest &&
                  yarn npm dist-tag add ${context.steps.tagName.outputs.package}@${PREVIOUS_VERSION} latest &&
                  yarn npm dist-tag ls`
                )
              }
            }
            actions()
