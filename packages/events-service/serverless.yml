service: cloud-events-service
plugins:
  - serverless-webpack
  - serverless-dynamodb-local
  - serverless-offline
  - serverless-deployment-bucket
  - serverless-plugin-log-retention

custom:
  s3CloudFormBucket: cloud-deployment-cloudform-templates-${opt:stage, 'dev'}
  env: ${file(./config.json)}
  webpack:
    webpackConfig: 'webpack.config.js'
    includeModules: true
    packager: 'yarn'
    packagerOptions:
      noFrozenLockFile: false
    excludeFiles: src/**/*.test.ts
    keepOutputDirectory: true
  logRetentionInDays: 30
  dynamodb:
    # Configuration on how to run DynamoDB in the local environment only
    # run the yarn command `install-db` first to ensure DynamoDB Local is installed on your machine
    stages:
      - local
    start:
      port: 8000
      inMemory: true
      heapInitial: 200m
      heapMax: 1g
      migrate: true
      seed: true
      convertEmptyValues: true
    seed:
      localSeed:
        sources:
          - table: 'Cloud_Event_Statuses'
            sources: [./seed/event-status.json]
          - table: 'Cloud_Automations'
            sources: [./seed/automations.json]
          - table: 'Cloud_Conversations'
            sources: [./seed/conversations.json]

provider:
  name: aws
  runtime: ${opt:runtime, 'nodejs14.x' }
  stage: ${opt:stage, 'dev'}
  region: eu-west-2
  deploymentBucket:
    name: ${self:custom.s3CloudFormBucket}
    blockPublicAccess: false
  environment:
    NODE_ENV: ${self:custom.env.NODE_ENV}
    DYNAMO_DB_REGION: ${self:custom.env.DYNAMO_DB_REGION}
    DYNAMO_DB_ENDPOINT: ${self:custom.env.DYNAMO_DB_ENDPOINT}
    TWILIO_ACC_ID: ${self:custom.env.TWILIO_ACC_ID}
    TWILIO_AUTH_TOKEN: ${self:custom.env.TWILIO_AUTH_TOKEN}
    PLATFORM_API_BASE_URL: ${self:custom.env.PLATFORM_API_BASE_URL}
    ALLOWED_WEBHOOK_SIGNATURES: ${self:custom.env.ALLOWED_WEBHOOK_SIGNATURES}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: 'arn:aws:dynamodb:${self:provider.region}:*:table/Cloud_*'

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,reapit-customer,api-version,if-match'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
    GatewayResponseDefault5XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,reapit-customer,api-version,if-match'"
        ResponseType: DEFAULT_5XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
    eventStatusesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: 'Cloud_Event_Statuses'
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
        AttributeDefinitions:
          - AttributeName: eventId
            AttributeType: S
          - AttributeName: clientCode
            AttributeType: S
          - AttributeName: eventCreatedAt
            AttributeType: S
        KeySchema:
          - AttributeName: eventId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: EventStatusesByClientCodeAndEventCreatedDate
            KeySchema:
              - AttributeName: clientCode
                KeyType: HASH
              - AttributeName: eventCreatedAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
    automationsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: 'Cloud_Automations'
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: clientCode
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: AutomationsByClientCode
            KeySchema:
              - AttributeName: clientCode
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
    conversationsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: 'Cloud_Conversations'
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
        AttributeDefinitions:
          - AttributeName: eventId
            AttributeType: S
        KeySchema:
          - AttributeName: eventId
            KeyType: HASH

package:
  individually: true
  patterns:
    - 'dist/**'
    - '!package.json'
    - '!node_modules/**'
    - '!error.log'
    - '!info.log'
    - '!jest.config.js'
    - '!serverless.yml'
    - '!src/**'
    - '!tsconfig.json'
    - '!yml-helpers.js'
    - '!public/**'

functions:
  expressServer:
    handler: src/index.app
    events:
      - http:
          method: get
          path: /ok
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - reapit-customer
              - api-version
              - if-match
      - http:
          method: any
          path: /event-status/{eventId}
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - reapit-customer
              - api-version
              - if-match
          authorizer:
            arn: arn:aws:cognito-idp:${self:provider.region}:${self:custom.env.AWS_ACCOUNT_ID}:userpool/${self:custom.env.COGNITO_USERPOOL_ID}
      - http:
          method: any
          path: /event-status
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - reapit-customer
              - api-version
              - if-match
          authorizer:
            arn: arn:aws:cognito-idp:${self:provider.region}:${self:custom.env.AWS_ACCOUNT_ID}:userpool/${self:custom.env.COGNITO_USERPOOL_ID}
      - http:
          method: any
          path: /automation/{eventId}
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - reapit-customer
              - api-version
              - if-match
          authorizer:
            arn: arn:aws:cognito-idp:${self:provider.region}:${self:custom.env.AWS_ACCOUNT_ID}:userpool/${self:custom.env.COGNITO_USERPOOL_ID}
      - http:
          method: any
          path: /automation
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - reapit-customer
              - api-version
              - if-match
          authorizer:
            arn: arn:aws:cognito-idp:${self:provider.region}:${self:custom.env.AWS_ACCOUNT_ID}:userpool/${self:custom.env.COGNITO_USERPOOL_ID}
      - http:
          method: any
          path: /event
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - x-access-token
              - reapit-webhook-signature
              - reapit-customer
              - api-version
              - if-match
          authorizer:
            arn: arn:aws:cognito-idp:${self:provider.region}:${self:custom.env.AWS_ACCOUNT_ID}:userpool/${self:custom.env.COGNITO_USERPOOL_ID}
