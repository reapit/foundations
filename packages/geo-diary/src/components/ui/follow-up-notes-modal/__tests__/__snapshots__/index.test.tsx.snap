// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`FollowUpNotesModal should match snapshot 1`] = `
{
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <mock-styled.div />
       
      <div
        class="mock-css.
  margin-bottom: 1.5rem;
"
      >
        <mock-styled.p
          classname=""
        >
          Record follow up notes on your appointment here, along with an optional follow up date.
        </mock-styled.p>
      </div>
      <form>
        <mock-styled.div
          classname="mock-css.
  margin-bottom: 1.5rem;
"
        >
          <mock-styled.input
            classname=""
            id="test-static-id"
            name="due"
            type="date"
          />
          <mock-styled.span
            classname=""
          >
            <svg />
          </mock-styled.span>
          <mock-styled.label
            htmlfor="test-static-id"
          >
            Due date
          </mock-styled.label>
        </mock-styled.div>
        <mock-styled.div
          classname="mock-css.
  margin-bottom: 1.5rem;
"
        >
          <mock-styled.textarea
            classname=""
            name="notes"
          />
          <mock-styled.label>
            Follow up notes
          </mock-styled.label>
        </mock-styled.div>
        <mock-styled.div>
          <mock-styled.div
            classname="mock-css."
          >
            <mock-styled.button
              classname="mock-css."
              disabled="false"
              type="button"
            >
              <mock-styled.div />
              Cancel
            </mock-styled.button>
            <mock-styled.button
              classname="mock-css."
              type="submit"
            >
              <mock-styled.div />
              Submit
            </mock-styled.button>
          </mock-styled.div>
        </mock-styled.div>
      </form>
    </div>
  </body>,
  "container": <div>
    <mock-styled.div />
     
    <div
      class="mock-css.
  margin-bottom: 1.5rem;
"
    >
      <mock-styled.p
        classname=""
      >
        Record follow up notes on your appointment here, along with an optional follow up date.
      </mock-styled.p>
    </div>
    <form>
      <mock-styled.div
        classname="mock-css.
  margin-bottom: 1.5rem;
"
      >
        <mock-styled.input
          classname=""
          id="test-static-id"
          name="due"
          type="date"
        />
        <mock-styled.span
          classname=""
        >
          <svg />
        </mock-styled.span>
        <mock-styled.label
          htmlfor="test-static-id"
        >
          Due date
        </mock-styled.label>
      </mock-styled.div>
      <mock-styled.div
        classname="mock-css.
  margin-bottom: 1.5rem;
"
      >
        <mock-styled.textarea
          classname=""
          name="notes"
        />
        <mock-styled.label>
          Follow up notes
        </mock-styled.label>
      </mock-styled.div>
      <mock-styled.div>
        <mock-styled.div
          classname="mock-css."
        >
          <mock-styled.button
            classname="mock-css."
            disabled="false"
            type="button"
          >
            <mock-styled.div />
            Cancel
          </mock-styled.button>
          <mock-styled.button
            classname="mock-css."
            type="submit"
          >
            <mock-styled.div />
            Submit
          </mock-styled.button>
        </mock-styled.div>
      </mock-styled.div>
    </form>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;
