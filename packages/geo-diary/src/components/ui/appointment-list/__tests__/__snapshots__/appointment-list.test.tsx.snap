// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`AppointmentList should match snapshot with appointments 1`] = `
{
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <mock-styled.div />
       
      <div>
        <mock-styled.div
          classname="mock-css.
  * {
    color: #646464;
  }
 mock-css.
  margin-bottom: 1rem;
"
        >
          <mock-styled.div
            classname="mock-css."
          >
            <mock-styled.h5>
              05:30 PM - 06:00 PM - Cancelled 
            </mock-styled.h5>
            <mock-styled.h6>
              Viewing
            </mock-styled.h6>
          </mock-styled.div>
          <mock-styled.div
            classname="mock-css.
  height: 2.5rem;
  margin-bottom: 0.5rem;

  &:last-of-type {
    margin-bottom: 0;
  }
"
          >
            <mock-styled.div>
              <mock-styled.span
                classname=""
              >
                <svg />
              </mock-styled.span>
            </mock-styled.div>
            <mock-styled.div>
              <mock-styled.div>
                Property
              </mock-styled.div>
              <mock-styled.div>
                56 High Street
              </mock-styled.div>
            </mock-styled.div>
          </mock-styled.div>
          <mock-styled.div
            classname="mock-css.
  height: 2.5rem;
  margin-bottom: 0.5rem;

  &:last-of-type {
    margin-bottom: 0;
  }
"
          >
            <mock-styled.div>
              <mock-styled.span
                classname=""
              >
                <svg />
              </mock-styled.span>
            </mock-styled.div>
            <mock-styled.div>
              <mock-styled.div>
                Attendee
              </mock-styled.div>
              <mock-styled.div />
            </mock-styled.div>
          </mock-styled.div>
          <mock-styled.div
            classname="mock-css.
  height: 2.5rem;
  margin-bottom: 0.5rem;

  &:last-of-type {
    margin-bottom: 0;
  }
"
          >
            <mock-styled.div>
              <mock-styled.span
                classname="mock-css."
              >
                <svg />
              </mock-styled.span>
            </mock-styled.div>
            <mock-styled.div>
              <mock-styled.div>
                Notes
              </mock-styled.div>
              <mock-styled.div>
                Add Follow Up Notes
              </mock-styled.div>
            </mock-styled.div>
          </mock-styled.div>
        </mock-styled.div>
      </div>
    </div>
  </body>,
  "container": <div>
    <mock-styled.div />
     
    <div>
      <mock-styled.div
        classname="mock-css.
  * {
    color: #646464;
  }
 mock-css.
  margin-bottom: 1rem;
"
      >
        <mock-styled.div
          classname="mock-css."
        >
          <mock-styled.h5>
            05:30 PM - 06:00 PM - Cancelled 
          </mock-styled.h5>
          <mock-styled.h6>
            Viewing
          </mock-styled.h6>
        </mock-styled.div>
        <mock-styled.div
          classname="mock-css.
  height: 2.5rem;
  margin-bottom: 0.5rem;

  &:last-of-type {
    margin-bottom: 0;
  }
"
        >
          <mock-styled.div>
            <mock-styled.span
              classname=""
            >
              <svg />
            </mock-styled.span>
          </mock-styled.div>
          <mock-styled.div>
            <mock-styled.div>
              Property
            </mock-styled.div>
            <mock-styled.div>
              56 High Street
            </mock-styled.div>
          </mock-styled.div>
        </mock-styled.div>
        <mock-styled.div
          classname="mock-css.
  height: 2.5rem;
  margin-bottom: 0.5rem;

  &:last-of-type {
    margin-bottom: 0;
  }
"
        >
          <mock-styled.div>
            <mock-styled.span
              classname=""
            >
              <svg />
            </mock-styled.span>
          </mock-styled.div>
          <mock-styled.div>
            <mock-styled.div>
              Attendee
            </mock-styled.div>
            <mock-styled.div />
          </mock-styled.div>
        </mock-styled.div>
        <mock-styled.div
          classname="mock-css.
  height: 2.5rem;
  margin-bottom: 0.5rem;

  &:last-of-type {
    margin-bottom: 0;
  }
"
        >
          <mock-styled.div>
            <mock-styled.span
              classname="mock-css."
            >
              <svg />
            </mock-styled.span>
          </mock-styled.div>
          <mock-styled.div>
            <mock-styled.div>
              Notes
            </mock-styled.div>
            <mock-styled.div>
              Add Follow Up Notes
            </mock-styled.div>
          </mock-styled.div>
        </mock-styled.div>
      </mock-styled.div>
    </div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`AppointmentList should match snapshot with no appointments 1`] = `
{
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <mock-styled.div />
       
      <mock-styled.div
        classname="mock-css. mock-css. mock-css. mock-css."
      >
        <div
          class="mock-css.
  padding: 0 1rem;
  display: flex;
  align-items: center;
  border-radius: var(--default-border-radius) 0 0 var(--default-border-radius);
  cursor: pointer;

  , {
    color: var(--color-white);
  }
"
          data-testid="close-icon"
        >
          <mock-styled.span
            classname=""
          >
            <svg />
          </mock-styled.span>
        </div>
        <div
          class="mock-css.
  padding: 1rem;
  opacity: 0;
  transition: 0.5s;
  width: 100%;
"
        >
          No appointments
        </div>
      </mock-styled.div>
    </div>
  </body>,
  "container": <div>
    <mock-styled.div />
     
    <mock-styled.div
      classname="mock-css. mock-css. mock-css. mock-css."
    >
      <div
        class="mock-css.
  padding: 0 1rem;
  display: flex;
  align-items: center;
  border-radius: var(--default-border-radius) 0 0 var(--default-border-radius);
  cursor: pointer;

  , {
    color: var(--color-white);
  }
"
        data-testid="close-icon"
      >
        <mock-styled.span
          classname=""
        >
          <svg />
        </mock-styled.span>
      </div>
      <div
        class="mock-css.
  padding: 1rem;
  opacity: 0;
  transition: 0.5s;
  width: 100%;
"
      >
        No appointments
      </div>
    </mock-styled.div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;
