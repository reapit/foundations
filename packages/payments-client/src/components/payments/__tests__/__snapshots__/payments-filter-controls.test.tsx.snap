// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`PaymentsFilterControls should match a snapshot 1`] = `
{
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <mock-styled.div />
      <div
        class="mock-css.
  border-radius: 0.25rem;
 mock-css.
  overflow: hidden;
 mock-css.
  margin-bottom: 0.75rem;
"
      >
        <form>
          <mock-styled.div>
            <mock-styled.div
              classname="mock-css.
  input {
    width: 100%;
  }
"
            >
              <mock-styled.input
                classname=""
                id="test-static-id"
                max="2019-10-10"
                min="2017-10-10"
                name="createdFrom"
                type="date"
              />
              <mock-styled.label
                htmlfor="test-static-id"
              >
                Created From
              </mock-styled.label>
            </mock-styled.div>
          </mock-styled.div>
          <mock-styled.div>
            <mock-styled.div
              classname="mock-css.
  input {
    width: 100%;
  }
"
            >
              <mock-styled.input
                classname=""
                id="test-static-id"
                max="2019-10-11"
                min="2019-10-10"
                name="createdTo"
                type="date"
              />
              <mock-styled.label
                htmlfor="test-static-id"
              >
                Created To
              </mock-styled.label>
            </mock-styled.div>
          </mock-styled.div>
          <mock-styled.div>
            <mock-styled.div>
              <mock-styled.select
                classname="mock-css.
  width: 100%;
"
                name="status"
              >
                <option
                  value=""
                >
                  None selected
                </option>
                <option
                  value="awaitingAuthorisation"
                >
                  Not Requested
                </option>
                <option
                  value="awaitingPosting"
                >
                  Awaiting Payment
                </option>
                <option
                  value="posted"
                >
                  Paid
                </option>
                <option
                  value="rejected"
                >
                  Failed
                </option>
              </mock-styled.select>
              <mock-styled.label>
                Status
              </mock-styled.label>
            </mock-styled.div>
          </mock-styled.div>
          <mock-styled.div>
            <mock-styled.div
              classname="mock-css.
  input {
    width: 100%;
  }
"
            >
              <mock-styled.input
                classname=""
                id="test-static-id"
                name="description"
                type="text"
              />
              <mock-styled.label
                htmlfor="test-static-id"
              >
                Description
              </mock-styled.label>
            </mock-styled.div>
          </mock-styled.div>
        </form>
      </div>
    </div>
  </body>,
  "container": <div>
    <mock-styled.div />
    <div
      class="mock-css.
  border-radius: 0.25rem;
 mock-css.
  overflow: hidden;
 mock-css.
  margin-bottom: 0.75rem;
"
    >
      <form>
        <mock-styled.div>
          <mock-styled.div
            classname="mock-css.
  input {
    width: 100%;
  }
"
          >
            <mock-styled.input
              classname=""
              id="test-static-id"
              max="2019-10-10"
              min="2017-10-10"
              name="createdFrom"
              type="date"
            />
            <mock-styled.label
              htmlfor="test-static-id"
            >
              Created From
            </mock-styled.label>
          </mock-styled.div>
        </mock-styled.div>
        <mock-styled.div>
          <mock-styled.div
            classname="mock-css.
  input {
    width: 100%;
  }
"
          >
            <mock-styled.input
              classname=""
              id="test-static-id"
              max="2019-10-11"
              min="2019-10-10"
              name="createdTo"
              type="date"
            />
            <mock-styled.label
              htmlfor="test-static-id"
            >
              Created To
            </mock-styled.label>
          </mock-styled.div>
        </mock-styled.div>
        <mock-styled.div>
          <mock-styled.div>
            <mock-styled.select
              classname="mock-css.
  width: 100%;
"
              name="status"
            >
              <option
                value=""
              >
                None selected
              </option>
              <option
                value="awaitingAuthorisation"
              >
                Not Requested
              </option>
              <option
                value="awaitingPosting"
              >
                Awaiting Payment
              </option>
              <option
                value="posted"
              >
                Paid
              </option>
              <option
                value="rejected"
              >
                Failed
              </option>
            </mock-styled.select>
            <mock-styled.label>
              Status
            </mock-styled.label>
          </mock-styled.div>
        </mock-styled.div>
        <mock-styled.div>
          <mock-styled.div
            classname="mock-css.
  input {
    width: 100%;
  }
"
          >
            <mock-styled.input
              classname=""
              id="test-static-id"
              name="description"
              type="text"
            />
            <mock-styled.label
              htmlfor="test-static-id"
            >
              Description
            </mock-styled.label>
          </mock-styled.div>
        </mock-styled.div>
      </form>
    </div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;
