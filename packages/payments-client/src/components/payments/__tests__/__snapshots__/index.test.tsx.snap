// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`PaymentsPage  should match a snapshot where fetched but no payments 1`] = `
{
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <mock-styled.div />
      <mock-styled.div
        classname="mock-css.
  flex: 1 1 auto;
"
      >
        <mock-styled.aside
          classname=""
        >
          <mock-styled.span
            classname="mock-css.
  margin-bottom: 0.75rem;
 mock-css.
  font-size: 5rem;
"
          >
            <svg />
          </mock-styled.span>
          <mock-styled.p
            classname="mock-css."
          >
            From this dashboard you can use the below filters to locate payments held by Reapit.
          </mock-styled.p>
          <mock-styled.p
            classname="mock-css."
          >
            When you have located your desired payment, you can either send an email request for payment to the customer, or take a payment in person using our payment form.
          </mock-styled.p>
          <mock-styled.p
            classname="mock-css."
          >
            Both options are available from the slide down on each payment item in the table.
          </mock-styled.p>
          <div
            class="mock-css.
  border-radius: 0.25rem;
 mock-css.
  overflow: hidden;
 mock-css.
  margin-bottom: 0.75rem;
"
          >
            <form>
              <mock-styled.div>
                <mock-styled.div
                  classname="mock-css.
  input {
    width: 100%;
  }
"
                >
                  <mock-styled.input
                    classname=""
                    id="test-static-id"
                    max="2019-10-11"
                    min="2017-10-10"
                    name="createdFrom"
                    type="date"
                  />
                  <mock-styled.label
                    htmlfor="test-static-id"
                  >
                    Created From
                  </mock-styled.label>
                </mock-styled.div>
              </mock-styled.div>
              <mock-styled.div>
                <mock-styled.div
                  classname="mock-css.
  input {
    width: 100%;
  }
"
                >
                  <mock-styled.input
                    classname=""
                    id="test-static-id"
                    max="2019-10-11"
                    min="2019-09-10"
                    name="createdTo"
                    type="date"
                  />
                  <mock-styled.label
                    htmlfor="test-static-id"
                  >
                    Created To
                  </mock-styled.label>
                </mock-styled.div>
              </mock-styled.div>
              <mock-styled.div>
                <mock-styled.div>
                  <mock-styled.select
                    classname="mock-css.
  width: 100%;
"
                    name="status"
                  >
                    <option
                      value=""
                    >
                      None selected
                    </option>
                    <option
                      value="awaitingAuthorisation"
                    >
                      Not Requested
                    </option>
                    <option
                      value="awaitingPosting"
                    >
                      Awaiting Payment
                    </option>
                    <option
                      value="posted"
                    >
                      Paid
                    </option>
                    <option
                      value="rejected"
                    >
                      Failed
                    </option>
                  </mock-styled.select>
                  <mock-styled.label>
                    Status
                  </mock-styled.label>
                </mock-styled.div>
              </mock-styled.div>
              <mock-styled.div>
                <mock-styled.div
                  classname="mock-css.
  input {
    width: 100%;
  }
"
                >
                  <mock-styled.input
                    classname=""
                    id="test-static-id"
                    name="description"
                    type="text"
                  />
                  <mock-styled.label
                    htmlfor="test-static-id"
                  >
                    Description
                  </mock-styled.label>
                </mock-styled.div>
              </mock-styled.div>
            </form>
          </div>
          <mock-styled.button
            classname="mock-css."
          >
            <mock-styled.div />
            View Docs
          </mock-styled.button>
        </mock-styled.aside>
        <mock-styled.section
          classname=""
        >
          <mock-styled.h1
            classname=""
          >
            Payments Dashboard
          </mock-styled.h1>
          <mock-styled.div
            classname="mock-css.
  @keyframes fade-in {
    from {
      opacity: 0;
    }

    to {
      opacity: 1;
    }
  }
  animation-duration: 0.5s;
  animation-fill-mode: both;
  animation-delay: 0.1s;
  animation-name: fade-in;
 mock-css. mock-css. mock-css. mock-css."
          >
            <div
              class="mock-css.
  padding: 0 1rem;
  display: flex;
  align-items: center;
  border-radius: var(--default-border-radius) 0 0 var(--default-border-radius);
  cursor: pointer;

  , {
    color: var(--color-white);
  }
"
              data-testid="close-icon"
            >
              <mock-styled.span
                classname=""
              >
                <svg />
              </mock-styled.span>
            </div>
            <div
              class="mock-css.
  padding: 1rem;
  opacity: 0;
  transition: 0.5s;
  width: 100%;
"
            >
              No payments match your search criteria
            </div>
          </mock-styled.div>
        </mock-styled.section>
      </mock-styled.div>
    </div>
  </body>,
  "container": <div>
    <mock-styled.div />
    <mock-styled.div
      classname="mock-css.
  flex: 1 1 auto;
"
    >
      <mock-styled.aside
        classname=""
      >
        <mock-styled.span
          classname="mock-css.
  margin-bottom: 0.75rem;
 mock-css.
  font-size: 5rem;
"
        >
          <svg />
        </mock-styled.span>
        <mock-styled.p
          classname="mock-css."
        >
          From this dashboard you can use the below filters to locate payments held by Reapit.
        </mock-styled.p>
        <mock-styled.p
          classname="mock-css."
        >
          When you have located your desired payment, you can either send an email request for payment to the customer, or take a payment in person using our payment form.
        </mock-styled.p>
        <mock-styled.p
          classname="mock-css."
        >
          Both options are available from the slide down on each payment item in the table.
        </mock-styled.p>
        <div
          class="mock-css.
  border-radius: 0.25rem;
 mock-css.
  overflow: hidden;
 mock-css.
  margin-bottom: 0.75rem;
"
        >
          <form>
            <mock-styled.div>
              <mock-styled.div
                classname="mock-css.
  input {
    width: 100%;
  }
"
              >
                <mock-styled.input
                  classname=""
                  id="test-static-id"
                  max="2019-10-11"
                  min="2017-10-10"
                  name="createdFrom"
                  type="date"
                />
                <mock-styled.label
                  htmlfor="test-static-id"
                >
                  Created From
                </mock-styled.label>
              </mock-styled.div>
            </mock-styled.div>
            <mock-styled.div>
              <mock-styled.div
                classname="mock-css.
  input {
    width: 100%;
  }
"
              >
                <mock-styled.input
                  classname=""
                  id="test-static-id"
                  max="2019-10-11"
                  min="2019-09-10"
                  name="createdTo"
                  type="date"
                />
                <mock-styled.label
                  htmlfor="test-static-id"
                >
                  Created To
                </mock-styled.label>
              </mock-styled.div>
            </mock-styled.div>
            <mock-styled.div>
              <mock-styled.div>
                <mock-styled.select
                  classname="mock-css.
  width: 100%;
"
                  name="status"
                >
                  <option
                    value=""
                  >
                    None selected
                  </option>
                  <option
                    value="awaitingAuthorisation"
                  >
                    Not Requested
                  </option>
                  <option
                    value="awaitingPosting"
                  >
                    Awaiting Payment
                  </option>
                  <option
                    value="posted"
                  >
                    Paid
                  </option>
                  <option
                    value="rejected"
                  >
                    Failed
                  </option>
                </mock-styled.select>
                <mock-styled.label>
                  Status
                </mock-styled.label>
              </mock-styled.div>
            </mock-styled.div>
            <mock-styled.div>
              <mock-styled.div
                classname="mock-css.
  input {
    width: 100%;
  }
"
              >
                <mock-styled.input
                  classname=""
                  id="test-static-id"
                  name="description"
                  type="text"
                />
                <mock-styled.label
                  htmlfor="test-static-id"
                >
                  Description
                </mock-styled.label>
              </mock-styled.div>
            </mock-styled.div>
          </form>
        </div>
        <mock-styled.button
          classname="mock-css."
        >
          <mock-styled.div />
          View Docs
        </mock-styled.button>
      </mock-styled.aside>
      <mock-styled.section
        classname=""
      >
        <mock-styled.h1
          classname=""
        >
          Payments Dashboard
        </mock-styled.h1>
        <mock-styled.div
          classname="mock-css.
  @keyframes fade-in {
    from {
      opacity: 0;
    }

    to {
      opacity: 1;
    }
  }
  animation-duration: 0.5s;
  animation-fill-mode: both;
  animation-delay: 0.1s;
  animation-name: fade-in;
 mock-css. mock-css. mock-css. mock-css."
        >
          <div
            class="mock-css.
  padding: 0 1rem;
  display: flex;
  align-items: center;
  border-radius: var(--default-border-radius) 0 0 var(--default-border-radius);
  cursor: pointer;

  , {
    color: var(--color-white);
  }
"
            data-testid="close-icon"
          >
            <mock-styled.span
              classname=""
            >
              <svg />
            </mock-styled.span>
          </div>
          <div
            class="mock-css.
  padding: 1rem;
  opacity: 0;
  transition: 0.5s;
  width: 100%;
"
          >
            No payments match your search criteria
          </div>
        </mock-styled.div>
      </mock-styled.section>
    </mock-styled.div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`PaymentsPage  should match a snapshot where has payments list 1`] = `
{
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <mock-styled.div />
      <mock-styled.div
        classname="mock-css.
  flex: 1 1 auto;
"
      >
        <mock-styled.aside
          classname=""
        >
          <mock-styled.span
            classname="mock-css.
  margin-bottom: 0.75rem;
 mock-css.
  font-size: 5rem;
"
          >
            <svg />
          </mock-styled.span>
          <mock-styled.p
            classname="mock-css."
          >
            From this dashboard you can use the below filters to locate payments held by Reapit.
          </mock-styled.p>
          <mock-styled.p
            classname="mock-css."
          >
            When you have located your desired payment, you can either send an email request for payment to the customer, or take a payment in person using our payment form.
          </mock-styled.p>
          <mock-styled.p
            classname="mock-css."
          >
            Both options are available from the slide down on each payment item in the table.
          </mock-styled.p>
          <div
            class="mock-css.
  border-radius: 0.25rem;
 mock-css.
  overflow: hidden;
 mock-css.
  margin-bottom: 0.75rem;
"
          >
            <form>
              <mock-styled.div>
                <mock-styled.div
                  classname="mock-css.
  input {
    width: 100%;
  }
"
                >
                  <mock-styled.input
                    classname=""
                    id="test-static-id"
                    max="2019-10-11"
                    min="2017-10-10"
                    name="createdFrom"
                    type="date"
                  />
                  <mock-styled.label
                    htmlfor="test-static-id"
                  >
                    Created From
                  </mock-styled.label>
                </mock-styled.div>
              </mock-styled.div>
              <mock-styled.div>
                <mock-styled.div
                  classname="mock-css.
  input {
    width: 100%;
  }
"
                >
                  <mock-styled.input
                    classname=""
                    id="test-static-id"
                    max="2019-10-11"
                    min="2019-09-10"
                    name="createdTo"
                    type="date"
                  />
                  <mock-styled.label
                    htmlfor="test-static-id"
                  >
                    Created To
                  </mock-styled.label>
                </mock-styled.div>
              </mock-styled.div>
              <mock-styled.div>
                <mock-styled.div>
                  <mock-styled.select
                    classname="mock-css.
  width: 100%;
"
                    name="status"
                  >
                    <option
                      value=""
                    >
                      None selected
                    </option>
                    <option
                      value="awaitingAuthorisation"
                    >
                      Not Requested
                    </option>
                    <option
                      value="awaitingPosting"
                    >
                      Awaiting Payment
                    </option>
                    <option
                      value="posted"
                    >
                      Paid
                    </option>
                    <option
                      value="rejected"
                    >
                      Failed
                    </option>
                  </mock-styled.select>
                  <mock-styled.label>
                    Status
                  </mock-styled.label>
                </mock-styled.div>
              </mock-styled.div>
              <mock-styled.div>
                <mock-styled.div
                  classname="mock-css.
  input {
    width: 100%;
  }
"
                >
                  <mock-styled.input
                    classname=""
                    id="test-static-id"
                    name="description"
                    type="text"
                  />
                  <mock-styled.label
                    htmlfor="test-static-id"
                  >
                    Description
                  </mock-styled.label>
                </mock-styled.div>
              </mock-styled.div>
            </form>
          </div>
          <mock-styled.button
            classname="mock-css."
          >
            <mock-styled.div />
            View Docs
          </mock-styled.button>
        </mock-styled.aside>
        <mock-styled.section
          classname=""
        >
          <mock-styled.h1
            classname=""
          >
            Payments Dashboard
          </mock-styled.h1>
          <mock-styled.div
            classname="mock-css.
  margin-bottom: 2.5rem;
 mock-css.
  @keyframes fade-in {
    from {
      opacity: 0;
    }

    to {
      opacity: 1;
    }
  }
  animation-duration: 0.5s;
  animation-fill-mode: both;
  animation-delay: 0.1s;
  animation-name: fade-in;
"
            data-has-call-to-action="false"
            data-has-expandable-action="true"
            data-num-columns-excl-action-col="7"
          >
            <mock-styled.div>
              <mock-styled.div>
                Property
              </mock-styled.div>
              <mock-styled.div>
                Amount
              </mock-styled.div>
              <mock-styled.div>
                Customer
              </mock-styled.div>
              <mock-styled.div>
                Description
              </mock-styled.div>
              <mock-styled.div>
                Client A/C
              </mock-styled.div>
              <mock-styled.div>
                Status
              </mock-styled.div>
              <mock-styled.div>
                Request Date
              </mock-styled.div>
              <mock-styled.div>
                <mock-styled.span
                  classname="mock-css."
                  style="font-size: 1.2rem;"
                >
                  <svg
                    style="font-size: 1.2rem;"
                  />
                </mock-styled.span>
              </mock-styled.div>
            </mock-styled.div>
            <mock-styled.div
              classname=""
            >
              <mock-styled.div>
                <mock-styled.div
                  classname="mock-css."
                >
                  <mock-styled.span
                    classname="mock-css."
                  >
                    <svg />
                  </mock-styled.span>
                  <mock-styled.div
                    data-narrow-label="Property"
                  >
                    <div
                      class="mock-css.
  @keyframes fade-in {
    from {
      opacity: 0;
    }

    to {
      opacity: 1;
    }
  }
  animation-duration: 0.5s;
  animation-fill-mode: both;
  animation-delay: 0.1s;
  animation-name: fade-in;
"
                    >
                      15 Example street Solihull West Midlands B91 2XX
                    </div>
                  </mock-styled.div>
                </mock-styled.div>
                <mock-styled.div
                  classname="mock-css."
                >
                  <mock-styled.span
                    classname="mock-css."
                  >
                    <svg />
                  </mock-styled.span>
                  <mock-styled.div
                    data-narrow-label="Amount"
                  >
                    £100.00
                  </mock-styled.div>
                </mock-styled.div>
                <mock-styled.div
                  classname="mock-css."
                >
                  <mock-styled.span
                    classname="mock-css."
                  >
                    <svg />
                  </mock-styled.span>
                  <mock-styled.div
                    data-narrow-label="Customer"
                  >
                    Mr John Smith
                  </mock-styled.div>
                </mock-styled.div>
                <mock-styled.div
                  classname=""
                >
                  <mock-styled.div
                    data-narrow-label="Description"
                  >
                    Tenancy Check Fee
                  </mock-styled.div>
                </mock-styled.div>
                <mock-styled.div
                  classname=""
                >
                  <mock-styled.div
                    data-narrow-label="Client A/C"
                  >
                    Primary
                  </mock-styled.div>
                </mock-styled.div>
                <mock-styled.div
                  classname=""
                >
                  <mock-styled.div
                    data-narrow-label="Status"
                  >
                    <mock-styled.span
                      classname="mock-css."
                    />
                     
                    Awaiting Payment
                  </mock-styled.div>
                </mock-styled.div>
                <mock-styled.div
                  classname=""
                >
                  <mock-styled.div
                    data-narrow-label="Request Date"
                  >
                    12 Dec 2018
                  </mock-styled.div>
                </mock-styled.div>
                <mock-styled.div
                  classname=""
                >
                  <mock-styled.span
                    classname="mock-css."
                  >
                    <svg />
                  </mock-styled.span>
                </mock-styled.div>
              </mock-styled.div>
              <mock-styled.div
                classname=""
              >
                <mock-styled.div>
                  <mock-styled.div>
                    <mock-styled.div
                      classname="mock-css."
                    >
                      <mock-styled.button
                        classname="mock-css."
                        disabled="false"
                      >
                        <mock-styled.div />
                        Email Request
                      </mock-styled.button>
                      <mock-styled.button
                        classname="mock-css."
                        disabled="false"
                      >
                        <mock-styled.div />
                        Take Payment
                      </mock-styled.button>
                    </mock-styled.div>
                  </mock-styled.div>
                </mock-styled.div>
              </mock-styled.div>
            </mock-styled.div>
          </mock-styled.div>
          <mock-styled.div>
            <mock-styled.div>
              <mock-styled.input
                value="1"
              />
               of 
              1
            </mock-styled.div>
            <mock-styled.button
              data-testid="back-button"
              type="button"
            >
              <mock-styled.span
                classname=""
              >
                <svg />
              </mock-styled.span>
            </mock-styled.button>
            <mock-styled.button
              data-testid="forward-button"
              type="button"
            >
              <mock-styled.span
                classname=""
              >
                <svg />
              </mock-styled.span>
            </mock-styled.button>
          </mock-styled.div>
        </mock-styled.section>
      </mock-styled.div>
    </div>
  </body>,
  "container": <div>
    <mock-styled.div />
    <mock-styled.div
      classname="mock-css.
  flex: 1 1 auto;
"
    >
      <mock-styled.aside
        classname=""
      >
        <mock-styled.span
          classname="mock-css.
  margin-bottom: 0.75rem;
 mock-css.
  font-size: 5rem;
"
        >
          <svg />
        </mock-styled.span>
        <mock-styled.p
          classname="mock-css."
        >
          From this dashboard you can use the below filters to locate payments held by Reapit.
        </mock-styled.p>
        <mock-styled.p
          classname="mock-css."
        >
          When you have located your desired payment, you can either send an email request for payment to the customer, or take a payment in person using our payment form.
        </mock-styled.p>
        <mock-styled.p
          classname="mock-css."
        >
          Both options are available from the slide down on each payment item in the table.
        </mock-styled.p>
        <div
          class="mock-css.
  border-radius: 0.25rem;
 mock-css.
  overflow: hidden;
 mock-css.
  margin-bottom: 0.75rem;
"
        >
          <form>
            <mock-styled.div>
              <mock-styled.div
                classname="mock-css.
  input {
    width: 100%;
  }
"
              >
                <mock-styled.input
                  classname=""
                  id="test-static-id"
                  max="2019-10-11"
                  min="2017-10-10"
                  name="createdFrom"
                  type="date"
                />
                <mock-styled.label
                  htmlfor="test-static-id"
                >
                  Created From
                </mock-styled.label>
              </mock-styled.div>
            </mock-styled.div>
            <mock-styled.div>
              <mock-styled.div
                classname="mock-css.
  input {
    width: 100%;
  }
"
              >
                <mock-styled.input
                  classname=""
                  id="test-static-id"
                  max="2019-10-11"
                  min="2019-09-10"
                  name="createdTo"
                  type="date"
                />
                <mock-styled.label
                  htmlfor="test-static-id"
                >
                  Created To
                </mock-styled.label>
              </mock-styled.div>
            </mock-styled.div>
            <mock-styled.div>
              <mock-styled.div>
                <mock-styled.select
                  classname="mock-css.
  width: 100%;
"
                  name="status"
                >
                  <option
                    value=""
                  >
                    None selected
                  </option>
                  <option
                    value="awaitingAuthorisation"
                  >
                    Not Requested
                  </option>
                  <option
                    value="awaitingPosting"
                  >
                    Awaiting Payment
                  </option>
                  <option
                    value="posted"
                  >
                    Paid
                  </option>
                  <option
                    value="rejected"
                  >
                    Failed
                  </option>
                </mock-styled.select>
                <mock-styled.label>
                  Status
                </mock-styled.label>
              </mock-styled.div>
            </mock-styled.div>
            <mock-styled.div>
              <mock-styled.div
                classname="mock-css.
  input {
    width: 100%;
  }
"
              >
                <mock-styled.input
                  classname=""
                  id="test-static-id"
                  name="description"
                  type="text"
                />
                <mock-styled.label
                  htmlfor="test-static-id"
                >
                  Description
                </mock-styled.label>
              </mock-styled.div>
            </mock-styled.div>
          </form>
        </div>
        <mock-styled.button
          classname="mock-css."
        >
          <mock-styled.div />
          View Docs
        </mock-styled.button>
      </mock-styled.aside>
      <mock-styled.section
        classname=""
      >
        <mock-styled.h1
          classname=""
        >
          Payments Dashboard
        </mock-styled.h1>
        <mock-styled.div
          classname="mock-css.
  margin-bottom: 2.5rem;
 mock-css.
  @keyframes fade-in {
    from {
      opacity: 0;
    }

    to {
      opacity: 1;
    }
  }
  animation-duration: 0.5s;
  animation-fill-mode: both;
  animation-delay: 0.1s;
  animation-name: fade-in;
"
          data-has-call-to-action="false"
          data-has-expandable-action="true"
          data-num-columns-excl-action-col="7"
        >
          <mock-styled.div>
            <mock-styled.div>
              Property
            </mock-styled.div>
            <mock-styled.div>
              Amount
            </mock-styled.div>
            <mock-styled.div>
              Customer
            </mock-styled.div>
            <mock-styled.div>
              Description
            </mock-styled.div>
            <mock-styled.div>
              Client A/C
            </mock-styled.div>
            <mock-styled.div>
              Status
            </mock-styled.div>
            <mock-styled.div>
              Request Date
            </mock-styled.div>
            <mock-styled.div>
              <mock-styled.span
                classname="mock-css."
                style="font-size: 1.2rem;"
              >
                <svg
                  style="font-size: 1.2rem;"
                />
              </mock-styled.span>
            </mock-styled.div>
          </mock-styled.div>
          <mock-styled.div
            classname=""
          >
            <mock-styled.div>
              <mock-styled.div
                classname="mock-css."
              >
                <mock-styled.span
                  classname="mock-css."
                >
                  <svg />
                </mock-styled.span>
                <mock-styled.div
                  data-narrow-label="Property"
                >
                  <div
                    class="mock-css.
  @keyframes fade-in {
    from {
      opacity: 0;
    }

    to {
      opacity: 1;
    }
  }
  animation-duration: 0.5s;
  animation-fill-mode: both;
  animation-delay: 0.1s;
  animation-name: fade-in;
"
                  >
                    15 Example street Solihull West Midlands B91 2XX
                  </div>
                </mock-styled.div>
              </mock-styled.div>
              <mock-styled.div
                classname="mock-css."
              >
                <mock-styled.span
                  classname="mock-css."
                >
                  <svg />
                </mock-styled.span>
                <mock-styled.div
                  data-narrow-label="Amount"
                >
                  £100.00
                </mock-styled.div>
              </mock-styled.div>
              <mock-styled.div
                classname="mock-css."
              >
                <mock-styled.span
                  classname="mock-css."
                >
                  <svg />
                </mock-styled.span>
                <mock-styled.div
                  data-narrow-label="Customer"
                >
                  Mr John Smith
                </mock-styled.div>
              </mock-styled.div>
              <mock-styled.div
                classname=""
              >
                <mock-styled.div
                  data-narrow-label="Description"
                >
                  Tenancy Check Fee
                </mock-styled.div>
              </mock-styled.div>
              <mock-styled.div
                classname=""
              >
                <mock-styled.div
                  data-narrow-label="Client A/C"
                >
                  Primary
                </mock-styled.div>
              </mock-styled.div>
              <mock-styled.div
                classname=""
              >
                <mock-styled.div
                  data-narrow-label="Status"
                >
                  <mock-styled.span
                    classname="mock-css."
                  />
                   
                  Awaiting Payment
                </mock-styled.div>
              </mock-styled.div>
              <mock-styled.div
                classname=""
              >
                <mock-styled.div
                  data-narrow-label="Request Date"
                >
                  12 Dec 2018
                </mock-styled.div>
              </mock-styled.div>
              <mock-styled.div
                classname=""
              >
                <mock-styled.span
                  classname="mock-css."
                >
                  <svg />
                </mock-styled.span>
              </mock-styled.div>
            </mock-styled.div>
            <mock-styled.div
              classname=""
            >
              <mock-styled.div>
                <mock-styled.div>
                  <mock-styled.div
                    classname="mock-css."
                  >
                    <mock-styled.button
                      classname="mock-css."
                      disabled="false"
                    >
                      <mock-styled.div />
                      Email Request
                    </mock-styled.button>
                    <mock-styled.button
                      classname="mock-css."
                      disabled="false"
                    >
                      <mock-styled.div />
                      Take Payment
                    </mock-styled.button>
                  </mock-styled.div>
                </mock-styled.div>
              </mock-styled.div>
            </mock-styled.div>
          </mock-styled.div>
        </mock-styled.div>
        <mock-styled.div>
          <mock-styled.div>
            <mock-styled.input
              value="1"
            />
             of 
            1
          </mock-styled.div>
          <mock-styled.button
            data-testid="back-button"
            type="button"
          >
            <mock-styled.span
              classname=""
            >
              <svg />
            </mock-styled.span>
          </mock-styled.button>
          <mock-styled.button
            data-testid="forward-button"
            type="button"
          >
            <mock-styled.span
              classname=""
            >
              <svg />
            </mock-styled.span>
          </mock-styled.button>
        </mock-styled.div>
      </mock-styled.section>
    </mock-styled.div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`PaymentsPage  should match a snapshot where loading 1`] = `
{
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <mock-styled.div />
      <mock-styled.div
        classname="mock-css.
  flex: 1 1 auto;
"
      >
        <mock-styled.aside
          classname=""
        >
          <mock-styled.span
            classname="mock-css.
  margin-bottom: 0.75rem;
 mock-css.
  font-size: 5rem;
"
          >
            <svg />
          </mock-styled.span>
          <mock-styled.p
            classname="mock-css."
          >
            From this dashboard you can use the below filters to locate payments held by Reapit.
          </mock-styled.p>
          <mock-styled.p
            classname="mock-css."
          >
            When you have located your desired payment, you can either send an email request for payment to the customer, or take a payment in person using our payment form.
          </mock-styled.p>
          <mock-styled.p
            classname="mock-css."
          >
            Both options are available from the slide down on each payment item in the table.
          </mock-styled.p>
          <div
            class="mock-css.
  border-radius: 0.25rem;
 mock-css.
  overflow: hidden;
 mock-css.
  margin-bottom: 0.75rem;
"
          >
            <form>
              <mock-styled.div>
                <mock-styled.div
                  classname="mock-css.
  input {
    width: 100%;
  }
"
                >
                  <mock-styled.input
                    classname=""
                    id="test-static-id"
                    max="2019-10-11"
                    min="2017-10-10"
                    name="createdFrom"
                    type="date"
                  />
                  <mock-styled.label
                    htmlfor="test-static-id"
                  >
                    Created From
                  </mock-styled.label>
                </mock-styled.div>
              </mock-styled.div>
              <mock-styled.div>
                <mock-styled.div
                  classname="mock-css.
  input {
    width: 100%;
  }
"
                >
                  <mock-styled.input
                    classname=""
                    id="test-static-id"
                    max="2019-10-11"
                    min="2019-09-10"
                    name="createdTo"
                    type="date"
                  />
                  <mock-styled.label
                    htmlfor="test-static-id"
                  >
                    Created To
                  </mock-styled.label>
                </mock-styled.div>
              </mock-styled.div>
              <mock-styled.div>
                <mock-styled.div>
                  <mock-styled.select
                    classname="mock-css.
  width: 100%;
"
                    name="status"
                  >
                    <option
                      value=""
                    >
                      None selected
                    </option>
                    <option
                      value="awaitingAuthorisation"
                    >
                      Not Requested
                    </option>
                    <option
                      value="awaitingPosting"
                    >
                      Awaiting Payment
                    </option>
                    <option
                      value="posted"
                    >
                      Paid
                    </option>
                    <option
                      value="rejected"
                    >
                      Failed
                    </option>
                  </mock-styled.select>
                  <mock-styled.label>
                    Status
                  </mock-styled.label>
                </mock-styled.div>
              </mock-styled.div>
              <mock-styled.div>
                <mock-styled.div
                  classname="mock-css.
  input {
    width: 100%;
  }
"
                >
                  <mock-styled.input
                    classname=""
                    id="test-static-id"
                    name="description"
                    type="text"
                  />
                  <mock-styled.label
                    htmlfor="test-static-id"
                  >
                    Description
                  </mock-styled.label>
                </mock-styled.div>
              </mock-styled.div>
            </form>
          </div>
          <mock-styled.button
            classname="mock-css."
          >
            <mock-styled.div />
            View Docs
          </mock-styled.button>
        </mock-styled.aside>
        <mock-styled.section
          classname=""
        >
          <mock-styled.h1
            classname=""
          >
            Payments Dashboard
          </mock-styled.h1>
          <mock-styled.div
            classname=""
          >
            <mock-styled.div>
              <mock-styled.div />
            </mock-styled.div>
          </mock-styled.div>
        </mock-styled.section>
      </mock-styled.div>
    </div>
  </body>,
  "container": <div>
    <mock-styled.div />
    <mock-styled.div
      classname="mock-css.
  flex: 1 1 auto;
"
    >
      <mock-styled.aside
        classname=""
      >
        <mock-styled.span
          classname="mock-css.
  margin-bottom: 0.75rem;
 mock-css.
  font-size: 5rem;
"
        >
          <svg />
        </mock-styled.span>
        <mock-styled.p
          classname="mock-css."
        >
          From this dashboard you can use the below filters to locate payments held by Reapit.
        </mock-styled.p>
        <mock-styled.p
          classname="mock-css."
        >
          When you have located your desired payment, you can either send an email request for payment to the customer, or take a payment in person using our payment form.
        </mock-styled.p>
        <mock-styled.p
          classname="mock-css."
        >
          Both options are available from the slide down on each payment item in the table.
        </mock-styled.p>
        <div
          class="mock-css.
  border-radius: 0.25rem;
 mock-css.
  overflow: hidden;
 mock-css.
  margin-bottom: 0.75rem;
"
        >
          <form>
            <mock-styled.div>
              <mock-styled.div
                classname="mock-css.
  input {
    width: 100%;
  }
"
              >
                <mock-styled.input
                  classname=""
                  id="test-static-id"
                  max="2019-10-11"
                  min="2017-10-10"
                  name="createdFrom"
                  type="date"
                />
                <mock-styled.label
                  htmlfor="test-static-id"
                >
                  Created From
                </mock-styled.label>
              </mock-styled.div>
            </mock-styled.div>
            <mock-styled.div>
              <mock-styled.div
                classname="mock-css.
  input {
    width: 100%;
  }
"
              >
                <mock-styled.input
                  classname=""
                  id="test-static-id"
                  max="2019-10-11"
                  min="2019-09-10"
                  name="createdTo"
                  type="date"
                />
                <mock-styled.label
                  htmlfor="test-static-id"
                >
                  Created To
                </mock-styled.label>
              </mock-styled.div>
            </mock-styled.div>
            <mock-styled.div>
              <mock-styled.div>
                <mock-styled.select
                  classname="mock-css.
  width: 100%;
"
                  name="status"
                >
                  <option
                    value=""
                  >
                    None selected
                  </option>
                  <option
                    value="awaitingAuthorisation"
                  >
                    Not Requested
                  </option>
                  <option
                    value="awaitingPosting"
                  >
                    Awaiting Payment
                  </option>
                  <option
                    value="posted"
                  >
                    Paid
                  </option>
                  <option
                    value="rejected"
                  >
                    Failed
                  </option>
                </mock-styled.select>
                <mock-styled.label>
                  Status
                </mock-styled.label>
              </mock-styled.div>
            </mock-styled.div>
            <mock-styled.div>
              <mock-styled.div
                classname="mock-css.
  input {
    width: 100%;
  }
"
              >
                <mock-styled.input
                  classname=""
                  id="test-static-id"
                  name="description"
                  type="text"
                />
                <mock-styled.label
                  htmlfor="test-static-id"
                >
                  Description
                </mock-styled.label>
              </mock-styled.div>
            </mock-styled.div>
          </form>
        </div>
        <mock-styled.button
          classname="mock-css."
        >
          <mock-styled.div />
          View Docs
        </mock-styled.button>
      </mock-styled.aside>
      <mock-styled.section
        classname=""
      >
        <mock-styled.h1
          classname=""
        >
          Payments Dashboard
        </mock-styled.h1>
        <mock-styled.div
          classname=""
        >
          <mock-styled.div>
            <mock-styled.div />
          </mock-styled.div>
        </mock-styled.div>
      </mock-styled.section>
    </mock-styled.div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`PropertyCell should match a snapshot for default status 1`] = `
{
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <mock-styled.div />
      <div
        class="mock-css.
  @keyframes fade-in {
    from {
      opacity: 0;
    }

    to {
      opacity: 1;
    }
  }
  animation-duration: 0.5s;
  animation-fill-mode: both;
  animation-delay: 0.1s;
  animation-name: fade-in;
"
      >
        15 Example street Solihull West Midlands B91 2XX
      </div>
    </div>
  </body>,
  "container": <div>
    <mock-styled.div />
    <div
      class="mock-css.
  @keyframes fade-in {
    from {
      opacity: 0;
    }

    to {
      opacity: 1;
    }
  }
  animation-duration: 0.5s;
  animation-fill-mode: both;
  animation-delay: 0.1s;
  animation-name: fade-in;
"
    >
      15 Example street Solihull West Midlands B91 2XX
    </div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`StatusCell should match a snapshot 1`] = `
{
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <mock-styled.div />
      <mock-styled.span
        classname="mock-css."
      />
       
      Paid
    </div>
  </body>,
  "container": <div>
    <mock-styled.div />
    <mock-styled.span
      classname="mock-css."
    />
     
    Paid
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`StatusCell should match a snapshot for default status 1`] = `
{
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <mock-styled.div />
    </div>
  </body>,
  "container": <div>
    <mock-styled.div />
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;
