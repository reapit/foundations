// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`AdminPage should match a snapshot when loading 1`] = `
{
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <mock-styled.div />
      <mock-styled.div
        classname=""
      >
        <mock-styled.aside
          classname=""
        >
          <mock-styled.span
            classname="mock-css.
  margin-bottom: 0.75rem;
 mock-css.
  font-size: 5rem;
"
          >
            <svg />
          </mock-styled.span>
          <mock-styled.p
            classname="mock-css."
          >
            This form is required to get started with Reapit Payments.
          </mock-styled.p>
          <mock-styled.p
            classname="mock-css."
          >
            Please take the time to read the documentation at the below link before proceeding as this details the setup intructions you need to perform in your Opayo account to complete this configuration.
          </mock-styled.p>
          <mock-styled.button
            classname="mock-css.
  margin-bottom: 0.5rem;
 mock-css."
          >
            <mock-styled.div />
            View Docs
          </mock-styled.button>
          <mock-styled.button
            classname="mock-css.
  margin-bottom: 0.5rem;
 mock-css."
            disabled="false"
          >
            <mock-styled.div />
            Save Config
          </mock-styled.button>
          <mock-styled.button
            classname="mock-css.
  margin-bottom: 0.5rem;
 mock-css."
            disabled="false"
          >
            <mock-styled.div />
            Delete Config
          </mock-styled.button>
        </mock-styled.aside>
        <mock-styled.section
          classname=""
        >
          <mock-styled.h1
            classname=""
          >
            Reapit Payments App Configuration
          </mock-styled.h1>
          <mock-styled.div
            classname="mock-css.
  @keyframes fade-in {
    from {
      opacity: 0;
    }

    to {
      opacity: 1;
    }
  }
  animation-duration: 0.5s;
  animation-fill-mode: both;
  animation-delay: 0.1s;
  animation-name: fade-in;
 mock-css.
  margin-bottom: 1.25rem;
 mock-css. mock-css. mock-css. mock-css."
          >
            <div
              class="mock-css.
  padding: 0 1rem;
  display: flex;
  align-items: center;
  border-radius: var(--default-border-radius) 0 0 var(--default-border-radius);
  cursor: pointer;

  , {
    color: var(--color-white);
  }
"
              data-testid="close-icon"
            >
              <mock-styled.span
                classname=""
              >
                <svg />
              </mock-styled.span>
            </div>
            <div
              class="mock-css.
  padding: 1rem;
  opacity: 0;
  transition: 0.5s;
  width: 100%;
"
            >
              Your app is currently configured to use Reapit Payments. You can update your details however, you will be editing production configuration so please ensure the fields are valid as failure to do so can lead to the app failing for all users.
            </div>
          </mock-styled.div>
          <form>
            <mock-styled.h2
              classname=""
            >
              Company Details
            </mock-styled.h2>
            <mock-styled.p
              classname="mock-css."
            >
              These details are required to personalise emails sent to your customers, both receipts and requests for payment.
            </mock-styled.p>
            <mock-styled.div
              classname="mock-css."
            >
              <mock-styled.div>
                <mock-styled.div>
                  <mock-styled.input
                    classname=""
                    id="test-static-id"
                    name="companyName"
                    type="email"
                  />
                  <mock-styled.label
                    htmlfor="test-static-id"
                  >
                    Company Name
                  </mock-styled.label>
                </mock-styled.div>
              </mock-styled.div>
              <mock-styled.div>
                <mock-styled.div>
                  <mock-styled.label>
                    Email Logo Url
                  </mock-styled.label>
                  <mock-styled.div
                    classname="mock-css.
  align-items: center;
"
                  >
                    <mock-styled.button
                      classname="mock-css.
  margin-right: 0.625rem;
 mock-css."
                      type="button"
                    >
                      <mock-styled.div />
                      Upload
                    </mock-styled.button>
                    <mock-styled.input
                      data-testid="el-file-input"
                      type="file"
                    />
                    <mock-styled.input
                      id="test-static-id"
                      name="logoUri"
                    />
                    <mock-styled.p
                      classname="mock-css. mock-css."
                    >
                      Upload File
                    </mock-styled.p>
                  </mock-styled.div>
                </mock-styled.div>
              </mock-styled.div>
            </mock-styled.div>
            <mock-styled.h2
              classname=""
            >
              Opayo Credientials
            </mock-styled.h2>
            <mock-styled.p
              classname="mock-css."
            >
              These details are required by Opayo to make payments in a live or test environment. You can update your credentials at any time by entering new keys in the form below.
            </mock-styled.p>
            <mock-styled.p
              classname="mock-css. mock-css."
            >
              Please note: for security reasons. after they have been saved, your Opayo Keys are stored in an encryped format and never surfaced again in the app.
            </mock-styled.p>
            <mock-styled.div
              classname="mock-css."
            >
              <mock-styled.div>
                <mock-styled.div>
                  <mock-styled.input
                    classname=""
                    id="test-static-id"
                    name="vendorName"
                    type="email"
                  />
                  <mock-styled.label
                    htmlfor="test-static-id"
                  >
                    Opayo Vendor Name
                  </mock-styled.label>
                </mock-styled.div>
              </mock-styled.div>
              <mock-styled.div>
                <mock-styled.div>
                  <mock-styled.label>
                    Live Opayo Environment or Test
                  </mock-styled.label>
                  <mock-styled.input
                    id="is-live-env"
                    name="isLive"
                    type="checkbox"
                  />
                  <mock-styled.label
                    classname="mock-css."
                    htmlfor="is-live-env"
                  >
                    <mock-styled.span>
                      Live
                    </mock-styled.span>
                    <mock-styled.span>
                      Test
                    </mock-styled.span>
                  </mock-styled.label>
                </mock-styled.div>
              </mock-styled.div>
              <mock-styled.div>
                <mock-styled.div>
                  <mock-styled.input
                    classname=""
                    id="test-static-id"
                    name="integrationKey"
                    type="email"
                  />
                  <mock-styled.label
                    htmlfor="test-static-id"
                  >
                    Opayo Integration Key
                  </mock-styled.label>
                </mock-styled.div>
              </mock-styled.div>
              <mock-styled.div>
                <mock-styled.div>
                  <mock-styled.input
                    classname=""
                    id="test-static-id"
                    name="passKey"
                    type="email"
                  />
                  <mock-styled.label
                    htmlfor="test-static-id"
                  >
                    Opayo Pass Key
                  </mock-styled.label>
                </mock-styled.div>
              </mock-styled.div>
              <mock-styled.div>
                <mock-styled.input
                  classname=""
                  id="test-static-id"
                  name="configId"
                  type="hidden"
                />
              </mock-styled.div>
            </mock-styled.div>
          </form>
        </mock-styled.section>
      </mock-styled.div>
    </div>
  </body>,
  "container": <div>
    <mock-styled.div />
    <mock-styled.div
      classname=""
    >
      <mock-styled.aside
        classname=""
      >
        <mock-styled.span
          classname="mock-css.
  margin-bottom: 0.75rem;
 mock-css.
  font-size: 5rem;
"
        >
          <svg />
        </mock-styled.span>
        <mock-styled.p
          classname="mock-css."
        >
          This form is required to get started with Reapit Payments.
        </mock-styled.p>
        <mock-styled.p
          classname="mock-css."
        >
          Please take the time to read the documentation at the below link before proceeding as this details the setup intructions you need to perform in your Opayo account to complete this configuration.
        </mock-styled.p>
        <mock-styled.button
          classname="mock-css.
  margin-bottom: 0.5rem;
 mock-css."
        >
          <mock-styled.div />
          View Docs
        </mock-styled.button>
        <mock-styled.button
          classname="mock-css.
  margin-bottom: 0.5rem;
 mock-css."
          disabled="false"
        >
          <mock-styled.div />
          Save Config
        </mock-styled.button>
        <mock-styled.button
          classname="mock-css.
  margin-bottom: 0.5rem;
 mock-css."
          disabled="false"
        >
          <mock-styled.div />
          Delete Config
        </mock-styled.button>
      </mock-styled.aside>
      <mock-styled.section
        classname=""
      >
        <mock-styled.h1
          classname=""
        >
          Reapit Payments App Configuration
        </mock-styled.h1>
        <mock-styled.div
          classname="mock-css.
  @keyframes fade-in {
    from {
      opacity: 0;
    }

    to {
      opacity: 1;
    }
  }
  animation-duration: 0.5s;
  animation-fill-mode: both;
  animation-delay: 0.1s;
  animation-name: fade-in;
 mock-css.
  margin-bottom: 1.25rem;
 mock-css. mock-css. mock-css. mock-css."
        >
          <div
            class="mock-css.
  padding: 0 1rem;
  display: flex;
  align-items: center;
  border-radius: var(--default-border-radius) 0 0 var(--default-border-radius);
  cursor: pointer;

  , {
    color: var(--color-white);
  }
"
            data-testid="close-icon"
          >
            <mock-styled.span
              classname=""
            >
              <svg />
            </mock-styled.span>
          </div>
          <div
            class="mock-css.
  padding: 1rem;
  opacity: 0;
  transition: 0.5s;
  width: 100%;
"
          >
            Your app is currently configured to use Reapit Payments. You can update your details however, you will be editing production configuration so please ensure the fields are valid as failure to do so can lead to the app failing for all users.
          </div>
        </mock-styled.div>
        <form>
          <mock-styled.h2
            classname=""
          >
            Company Details
          </mock-styled.h2>
          <mock-styled.p
            classname="mock-css."
          >
            These details are required to personalise emails sent to your customers, both receipts and requests for payment.
          </mock-styled.p>
          <mock-styled.div
            classname="mock-css."
          >
            <mock-styled.div>
              <mock-styled.div>
                <mock-styled.input
                  classname=""
                  id="test-static-id"
                  name="companyName"
                  type="email"
                />
                <mock-styled.label
                  htmlfor="test-static-id"
                >
                  Company Name
                </mock-styled.label>
              </mock-styled.div>
            </mock-styled.div>
            <mock-styled.div>
              <mock-styled.div>
                <mock-styled.label>
                  Email Logo Url
                </mock-styled.label>
                <mock-styled.div
                  classname="mock-css.
  align-items: center;
"
                >
                  <mock-styled.button
                    classname="mock-css.
  margin-right: 0.625rem;
 mock-css."
                    type="button"
                  >
                    <mock-styled.div />
                    Upload
                  </mock-styled.button>
                  <mock-styled.input
                    data-testid="el-file-input"
                    type="file"
                  />
                  <mock-styled.input
                    id="test-static-id"
                    name="logoUri"
                  />
                  <mock-styled.p
                    classname="mock-css. mock-css."
                  >
                    Upload File
                  </mock-styled.p>
                </mock-styled.div>
              </mock-styled.div>
            </mock-styled.div>
          </mock-styled.div>
          <mock-styled.h2
            classname=""
          >
            Opayo Credientials
          </mock-styled.h2>
          <mock-styled.p
            classname="mock-css."
          >
            These details are required by Opayo to make payments in a live or test environment. You can update your credentials at any time by entering new keys in the form below.
          </mock-styled.p>
          <mock-styled.p
            classname="mock-css. mock-css."
          >
            Please note: for security reasons. after they have been saved, your Opayo Keys are stored in an encryped format and never surfaced again in the app.
          </mock-styled.p>
          <mock-styled.div
            classname="mock-css."
          >
            <mock-styled.div>
              <mock-styled.div>
                <mock-styled.input
                  classname=""
                  id="test-static-id"
                  name="vendorName"
                  type="email"
                />
                <mock-styled.label
                  htmlfor="test-static-id"
                >
                  Opayo Vendor Name
                </mock-styled.label>
              </mock-styled.div>
            </mock-styled.div>
            <mock-styled.div>
              <mock-styled.div>
                <mock-styled.label>
                  Live Opayo Environment or Test
                </mock-styled.label>
                <mock-styled.input
                  id="is-live-env"
                  name="isLive"
                  type="checkbox"
                />
                <mock-styled.label
                  classname="mock-css."
                  htmlfor="is-live-env"
                >
                  <mock-styled.span>
                    Live
                  </mock-styled.span>
                  <mock-styled.span>
                    Test
                  </mock-styled.span>
                </mock-styled.label>
              </mock-styled.div>
            </mock-styled.div>
            <mock-styled.div>
              <mock-styled.div>
                <mock-styled.input
                  classname=""
                  id="test-static-id"
                  name="integrationKey"
                  type="email"
                />
                <mock-styled.label
                  htmlfor="test-static-id"
                >
                  Opayo Integration Key
                </mock-styled.label>
              </mock-styled.div>
            </mock-styled.div>
            <mock-styled.div>
              <mock-styled.div>
                <mock-styled.input
                  classname=""
                  id="test-static-id"
                  name="passKey"
                  type="email"
                />
                <mock-styled.label
                  htmlfor="test-static-id"
                >
                  Opayo Pass Key
                </mock-styled.label>
              </mock-styled.div>
            </mock-styled.div>
            <mock-styled.div>
              <mock-styled.input
                classname=""
                id="test-static-id"
                name="configId"
                type="hidden"
              />
            </mock-styled.div>
          </mock-styled.div>
        </form>
      </mock-styled.section>
    </mock-styled.div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`AdminPage should match a snapshot with config data 1`] = `
{
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <mock-styled.div />
      <mock-styled.div
        classname=""
      >
        <mock-styled.aside
          classname=""
        >
          <mock-styled.span
            classname="mock-css.
  margin-bottom: 0.75rem;
 mock-css.
  font-size: 5rem;
"
          >
            <svg />
          </mock-styled.span>
          <mock-styled.p
            classname="mock-css."
          >
            This form is required to get started with Reapit Payments.
          </mock-styled.p>
          <mock-styled.p
            classname="mock-css."
          >
            Please take the time to read the documentation at the below link before proceeding as this details the setup intructions you need to perform in your Opayo account to complete this configuration.
          </mock-styled.p>
          <mock-styled.button
            classname="mock-css.
  margin-bottom: 0.5rem;
 mock-css."
          >
            <mock-styled.div />
            View Docs
          </mock-styled.button>
          <mock-styled.button
            classname="mock-css.
  margin-bottom: 0.5rem;
 mock-css."
            disabled="false"
          >
            <mock-styled.div />
            Save Config
          </mock-styled.button>
          <mock-styled.button
            classname="mock-css.
  margin-bottom: 0.5rem;
 mock-css."
            disabled="false"
          >
            <mock-styled.div />
            Delete Config
          </mock-styled.button>
        </mock-styled.aside>
        <mock-styled.section
          classname=""
        >
          <mock-styled.h1
            classname=""
          >
            Reapit Payments App Configuration
          </mock-styled.h1>
          <mock-styled.div
            classname="mock-css.
  @keyframes fade-in {
    from {
      opacity: 0;
    }

    to {
      opacity: 1;
    }
  }
  animation-duration: 0.5s;
  animation-fill-mode: both;
  animation-delay: 0.1s;
  animation-name: fade-in;
 mock-css.
  margin-bottom: 1.25rem;
 mock-css. mock-css. mock-css. mock-css."
          >
            <div
              class="mock-css.
  padding: 0 1rem;
  display: flex;
  align-items: center;
  border-radius: var(--default-border-radius) 0 0 var(--default-border-radius);
  cursor: pointer;

  , {
    color: var(--color-white);
  }
"
              data-testid="close-icon"
            >
              <mock-styled.span
                classname=""
              >
                <svg />
              </mock-styled.span>
            </div>
            <div
              class="mock-css.
  padding: 1rem;
  opacity: 0;
  transition: 0.5s;
  width: 100%;
"
            >
              Your app is currently configured to use Reapit Payments. You can update your details however, you will be editing production configuration so please ensure the fields are valid as failure to do so can lead to the app failing for all users.
            </div>
          </mock-styled.div>
          <form>
            <mock-styled.h2
              classname=""
            >
              Company Details
            </mock-styled.h2>
            <mock-styled.p
              classname="mock-css."
            >
              These details are required to personalise emails sent to your customers, both receipts and requests for payment.
            </mock-styled.p>
            <mock-styled.div
              classname="mock-css."
            >
              <mock-styled.div>
                <mock-styled.div>
                  <mock-styled.input
                    classname=""
                    id="test-static-id"
                    name="companyName"
                    type="email"
                  />
                  <mock-styled.label
                    htmlfor="test-static-id"
                  >
                    Company Name
                  </mock-styled.label>
                </mock-styled.div>
              </mock-styled.div>
              <mock-styled.div>
                <mock-styled.div>
                  <mock-styled.label>
                    Email Logo Url
                  </mock-styled.label>
                  <mock-styled.div
                    classname="mock-css.
  align-items: center;
"
                  >
                    <mock-styled.button
                      classname="mock-css.
  margin-right: 0.625rem;
 mock-css."
                      type="button"
                    >
                      <mock-styled.div />
                      Upload
                    </mock-styled.button>
                    <mock-styled.input
                      data-testid="el-file-input"
                      type="file"
                    />
                    <mock-styled.input
                      id="test-static-id"
                      name="logoUri"
                    />
                    <mock-styled.p
                      classname="mock-css. mock-css."
                    >
                      Upload File
                    </mock-styled.p>
                  </mock-styled.div>
                </mock-styled.div>
              </mock-styled.div>
            </mock-styled.div>
            <mock-styled.h2
              classname=""
            >
              Opayo Credientials
            </mock-styled.h2>
            <mock-styled.p
              classname="mock-css."
            >
              These details are required by Opayo to make payments in a live or test environment. You can update your credentials at any time by entering new keys in the form below.
            </mock-styled.p>
            <mock-styled.p
              classname="mock-css. mock-css."
            >
              Please note: for security reasons. after they have been saved, your Opayo Keys are stored in an encryped format and never surfaced again in the app.
            </mock-styled.p>
            <mock-styled.div
              classname="mock-css."
            >
              <mock-styled.div>
                <mock-styled.div>
                  <mock-styled.input
                    classname=""
                    id="test-static-id"
                    name="vendorName"
                    type="email"
                  />
                  <mock-styled.label
                    htmlfor="test-static-id"
                  >
                    Opayo Vendor Name
                  </mock-styled.label>
                </mock-styled.div>
              </mock-styled.div>
              <mock-styled.div>
                <mock-styled.div>
                  <mock-styled.label>
                    Live Opayo Environment or Test
                  </mock-styled.label>
                  <mock-styled.input
                    id="is-live-env"
                    name="isLive"
                    type="checkbox"
                  />
                  <mock-styled.label
                    classname="mock-css."
                    htmlfor="is-live-env"
                  >
                    <mock-styled.span>
                      Live
                    </mock-styled.span>
                    <mock-styled.span>
                      Test
                    </mock-styled.span>
                  </mock-styled.label>
                </mock-styled.div>
              </mock-styled.div>
              <mock-styled.div>
                <mock-styled.div>
                  <mock-styled.input
                    classname=""
                    id="test-static-id"
                    name="integrationKey"
                    type="email"
                  />
                  <mock-styled.label
                    htmlfor="test-static-id"
                  >
                    Opayo Integration Key
                  </mock-styled.label>
                </mock-styled.div>
              </mock-styled.div>
              <mock-styled.div>
                <mock-styled.div>
                  <mock-styled.input
                    classname=""
                    id="test-static-id"
                    name="passKey"
                    type="email"
                  />
                  <mock-styled.label
                    htmlfor="test-static-id"
                  >
                    Opayo Pass Key
                  </mock-styled.label>
                </mock-styled.div>
              </mock-styled.div>
              <mock-styled.div>
                <mock-styled.input
                  classname=""
                  id="test-static-id"
                  name="configId"
                  type="hidden"
                />
              </mock-styled.div>
            </mock-styled.div>
          </form>
        </mock-styled.section>
      </mock-styled.div>
    </div>
  </body>,
  "container": <div>
    <mock-styled.div />
    <mock-styled.div
      classname=""
    >
      <mock-styled.aside
        classname=""
      >
        <mock-styled.span
          classname="mock-css.
  margin-bottom: 0.75rem;
 mock-css.
  font-size: 5rem;
"
        >
          <svg />
        </mock-styled.span>
        <mock-styled.p
          classname="mock-css."
        >
          This form is required to get started with Reapit Payments.
        </mock-styled.p>
        <mock-styled.p
          classname="mock-css."
        >
          Please take the time to read the documentation at the below link before proceeding as this details the setup intructions you need to perform in your Opayo account to complete this configuration.
        </mock-styled.p>
        <mock-styled.button
          classname="mock-css.
  margin-bottom: 0.5rem;
 mock-css."
        >
          <mock-styled.div />
          View Docs
        </mock-styled.button>
        <mock-styled.button
          classname="mock-css.
  margin-bottom: 0.5rem;
 mock-css."
          disabled="false"
        >
          <mock-styled.div />
          Save Config
        </mock-styled.button>
        <mock-styled.button
          classname="mock-css.
  margin-bottom: 0.5rem;
 mock-css."
          disabled="false"
        >
          <mock-styled.div />
          Delete Config
        </mock-styled.button>
      </mock-styled.aside>
      <mock-styled.section
        classname=""
      >
        <mock-styled.h1
          classname=""
        >
          Reapit Payments App Configuration
        </mock-styled.h1>
        <mock-styled.div
          classname="mock-css.
  @keyframes fade-in {
    from {
      opacity: 0;
    }

    to {
      opacity: 1;
    }
  }
  animation-duration: 0.5s;
  animation-fill-mode: both;
  animation-delay: 0.1s;
  animation-name: fade-in;
 mock-css.
  margin-bottom: 1.25rem;
 mock-css. mock-css. mock-css. mock-css."
        >
          <div
            class="mock-css.
  padding: 0 1rem;
  display: flex;
  align-items: center;
  border-radius: var(--default-border-radius) 0 0 var(--default-border-radius);
  cursor: pointer;

  , {
    color: var(--color-white);
  }
"
            data-testid="close-icon"
          >
            <mock-styled.span
              classname=""
            >
              <svg />
            </mock-styled.span>
          </div>
          <div
            class="mock-css.
  padding: 1rem;
  opacity: 0;
  transition: 0.5s;
  width: 100%;
"
          >
            Your app is currently configured to use Reapit Payments. You can update your details however, you will be editing production configuration so please ensure the fields are valid as failure to do so can lead to the app failing for all users.
          </div>
        </mock-styled.div>
        <form>
          <mock-styled.h2
            classname=""
          >
            Company Details
          </mock-styled.h2>
          <mock-styled.p
            classname="mock-css."
          >
            These details are required to personalise emails sent to your customers, both receipts and requests for payment.
          </mock-styled.p>
          <mock-styled.div
            classname="mock-css."
          >
            <mock-styled.div>
              <mock-styled.div>
                <mock-styled.input
                  classname=""
                  id="test-static-id"
                  name="companyName"
                  type="email"
                />
                <mock-styled.label
                  htmlfor="test-static-id"
                >
                  Company Name
                </mock-styled.label>
              </mock-styled.div>
            </mock-styled.div>
            <mock-styled.div>
              <mock-styled.div>
                <mock-styled.label>
                  Email Logo Url
                </mock-styled.label>
                <mock-styled.div
                  classname="mock-css.
  align-items: center;
"
                >
                  <mock-styled.button
                    classname="mock-css.
  margin-right: 0.625rem;
 mock-css."
                    type="button"
                  >
                    <mock-styled.div />
                    Upload
                  </mock-styled.button>
                  <mock-styled.input
                    data-testid="el-file-input"
                    type="file"
                  />
                  <mock-styled.input
                    id="test-static-id"
                    name="logoUri"
                  />
                  <mock-styled.p
                    classname="mock-css. mock-css."
                  >
                    Upload File
                  </mock-styled.p>
                </mock-styled.div>
              </mock-styled.div>
            </mock-styled.div>
          </mock-styled.div>
          <mock-styled.h2
            classname=""
          >
            Opayo Credientials
          </mock-styled.h2>
          <mock-styled.p
            classname="mock-css."
          >
            These details are required by Opayo to make payments in a live or test environment. You can update your credentials at any time by entering new keys in the form below.
          </mock-styled.p>
          <mock-styled.p
            classname="mock-css. mock-css."
          >
            Please note: for security reasons. after they have been saved, your Opayo Keys are stored in an encryped format and never surfaced again in the app.
          </mock-styled.p>
          <mock-styled.div
            classname="mock-css."
          >
            <mock-styled.div>
              <mock-styled.div>
                <mock-styled.input
                  classname=""
                  id="test-static-id"
                  name="vendorName"
                  type="email"
                />
                <mock-styled.label
                  htmlfor="test-static-id"
                >
                  Opayo Vendor Name
                </mock-styled.label>
              </mock-styled.div>
            </mock-styled.div>
            <mock-styled.div>
              <mock-styled.div>
                <mock-styled.label>
                  Live Opayo Environment or Test
                </mock-styled.label>
                <mock-styled.input
                  id="is-live-env"
                  name="isLive"
                  type="checkbox"
                />
                <mock-styled.label
                  classname="mock-css."
                  htmlfor="is-live-env"
                >
                  <mock-styled.span>
                    Live
                  </mock-styled.span>
                  <mock-styled.span>
                    Test
                  </mock-styled.span>
                </mock-styled.label>
              </mock-styled.div>
            </mock-styled.div>
            <mock-styled.div>
              <mock-styled.div>
                <mock-styled.input
                  classname=""
                  id="test-static-id"
                  name="integrationKey"
                  type="email"
                />
                <mock-styled.label
                  htmlfor="test-static-id"
                >
                  Opayo Integration Key
                </mock-styled.label>
              </mock-styled.div>
            </mock-styled.div>
            <mock-styled.div>
              <mock-styled.div>
                <mock-styled.input
                  classname=""
                  id="test-static-id"
                  name="passKey"
                  type="email"
                />
                <mock-styled.label
                  htmlfor="test-static-id"
                >
                  Opayo Pass Key
                </mock-styled.label>
              </mock-styled.div>
            </mock-styled.div>
            <mock-styled.div>
              <mock-styled.input
                classname=""
                id="test-static-id"
                name="configId"
                type="hidden"
              />
            </mock-styled.div>
          </mock-styled.div>
        </form>
      </mock-styled.section>
    </mock-styled.div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`AdminPage should match a snapshot with no data 1`] = `
{
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <mock-styled.div />
      <mock-styled.div
        classname=""
      >
        <mock-styled.aside
          classname=""
        >
          <mock-styled.span
            classname="mock-css.
  margin-bottom: 0.75rem;
 mock-css.
  font-size: 5rem;
"
          >
            <svg />
          </mock-styled.span>
          <mock-styled.p
            classname="mock-css."
          >
            This form is required to get started with Reapit Payments.
          </mock-styled.p>
          <mock-styled.p
            classname="mock-css."
          >
            Please take the time to read the documentation at the below link before proceeding as this details the setup intructions you need to perform in your Opayo account to complete this configuration.
          </mock-styled.p>
          <mock-styled.button
            classname="mock-css.
  margin-bottom: 0.5rem;
 mock-css."
          >
            <mock-styled.div />
            View Docs
          </mock-styled.button>
          <mock-styled.button
            classname="mock-css.
  margin-bottom: 0.5rem;
 mock-css."
            disabled="false"
          >
            <mock-styled.div />
            Save Config
          </mock-styled.button>
          <mock-styled.button
            classname="mock-css.
  margin-bottom: 0.5rem;
 mock-css."
            disabled="false"
          >
            <mock-styled.div />
            Delete Config
          </mock-styled.button>
        </mock-styled.aside>
        <mock-styled.section
          classname=""
        >
          <mock-styled.h1
            classname=""
          >
            Reapit Payments App Configuration
          </mock-styled.h1>
          <mock-styled.div
            classname="mock-css.
  @keyframes fade-in {
    from {
      opacity: 0;
    }

    to {
      opacity: 1;
    }
  }
  animation-duration: 0.5s;
  animation-fill-mode: both;
  animation-delay: 0.1s;
  animation-name: fade-in;
 mock-css.
  margin-bottom: 1.25rem;
 mock-css. mock-css. mock-css. mock-css."
          >
            <div
              class="mock-css.
  padding: 0 1rem;
  display: flex;
  align-items: center;
  border-radius: var(--default-border-radius) 0 0 var(--default-border-radius);
  cursor: pointer;

  , {
    color: var(--color-white);
  }
"
              data-testid="close-icon"
            >
              <mock-styled.span
                classname=""
              >
                <svg />
              </mock-styled.span>
            </div>
            <div
              class="mock-css.
  padding: 1rem;
  opacity: 0;
  transition: 0.5s;
  width: 100%;
"
            >
              Your app is currently configured to use Reapit Payments. You can update your details however, you will be editing production configuration so please ensure the fields are valid as failure to do so can lead to the app failing for all users.
            </div>
          </mock-styled.div>
          <form>
            <mock-styled.h2
              classname=""
            >
              Company Details
            </mock-styled.h2>
            <mock-styled.p
              classname="mock-css."
            >
              These details are required to personalise emails sent to your customers, both receipts and requests for payment.
            </mock-styled.p>
            <mock-styled.div
              classname="mock-css."
            >
              <mock-styled.div>
                <mock-styled.div>
                  <mock-styled.input
                    classname=""
                    id="test-static-id"
                    name="companyName"
                    type="email"
                  />
                  <mock-styled.label
                    htmlfor="test-static-id"
                  >
                    Company Name
                  </mock-styled.label>
                </mock-styled.div>
              </mock-styled.div>
              <mock-styled.div>
                <mock-styled.div>
                  <mock-styled.label>
                    Email Logo Url
                  </mock-styled.label>
                  <mock-styled.div
                    classname="mock-css.
  align-items: center;
"
                  >
                    <mock-styled.button
                      classname="mock-css.
  margin-right: 0.625rem;
 mock-css."
                      type="button"
                    >
                      <mock-styled.div />
                      Upload
                    </mock-styled.button>
                    <mock-styled.input
                      data-testid="el-file-input"
                      type="file"
                    />
                    <mock-styled.input
                      id="test-static-id"
                      name="logoUri"
                    />
                    <mock-styled.p
                      classname="mock-css. mock-css."
                    >
                      Upload File
                    </mock-styled.p>
                  </mock-styled.div>
                </mock-styled.div>
              </mock-styled.div>
            </mock-styled.div>
            <mock-styled.h2
              classname=""
            >
              Opayo Credientials
            </mock-styled.h2>
            <mock-styled.p
              classname="mock-css."
            >
              These details are required by Opayo to make payments in a live or test environment. You can update your credentials at any time by entering new keys in the form below.
            </mock-styled.p>
            <mock-styled.p
              classname="mock-css. mock-css."
            >
              Please note: for security reasons. after they have been saved, your Opayo Keys are stored in an encryped format and never surfaced again in the app.
            </mock-styled.p>
            <mock-styled.div
              classname="mock-css."
            >
              <mock-styled.div>
                <mock-styled.div>
                  <mock-styled.input
                    classname=""
                    id="test-static-id"
                    name="vendorName"
                    type="email"
                  />
                  <mock-styled.label
                    htmlfor="test-static-id"
                  >
                    Opayo Vendor Name
                  </mock-styled.label>
                </mock-styled.div>
              </mock-styled.div>
              <mock-styled.div>
                <mock-styled.div>
                  <mock-styled.label>
                    Live Opayo Environment or Test
                  </mock-styled.label>
                  <mock-styled.input
                    id="is-live-env"
                    name="isLive"
                    type="checkbox"
                  />
                  <mock-styled.label
                    classname="mock-css."
                    htmlfor="is-live-env"
                  >
                    <mock-styled.span>
                      Live
                    </mock-styled.span>
                    <mock-styled.span>
                      Test
                    </mock-styled.span>
                  </mock-styled.label>
                </mock-styled.div>
              </mock-styled.div>
              <mock-styled.div>
                <mock-styled.div>
                  <mock-styled.input
                    classname=""
                    id="test-static-id"
                    name="integrationKey"
                    type="email"
                  />
                  <mock-styled.label
                    htmlfor="test-static-id"
                  >
                    Opayo Integration Key
                  </mock-styled.label>
                </mock-styled.div>
              </mock-styled.div>
              <mock-styled.div>
                <mock-styled.div>
                  <mock-styled.input
                    classname=""
                    id="test-static-id"
                    name="passKey"
                    type="email"
                  />
                  <mock-styled.label
                    htmlfor="test-static-id"
                  >
                    Opayo Pass Key
                  </mock-styled.label>
                </mock-styled.div>
              </mock-styled.div>
              <mock-styled.div>
                <mock-styled.input
                  classname=""
                  id="test-static-id"
                  name="configId"
                  type="hidden"
                />
              </mock-styled.div>
            </mock-styled.div>
          </form>
        </mock-styled.section>
      </mock-styled.div>
    </div>
  </body>,
  "container": <div>
    <mock-styled.div />
    <mock-styled.div
      classname=""
    >
      <mock-styled.aside
        classname=""
      >
        <mock-styled.span
          classname="mock-css.
  margin-bottom: 0.75rem;
 mock-css.
  font-size: 5rem;
"
        >
          <svg />
        </mock-styled.span>
        <mock-styled.p
          classname="mock-css."
        >
          This form is required to get started with Reapit Payments.
        </mock-styled.p>
        <mock-styled.p
          classname="mock-css."
        >
          Please take the time to read the documentation at the below link before proceeding as this details the setup intructions you need to perform in your Opayo account to complete this configuration.
        </mock-styled.p>
        <mock-styled.button
          classname="mock-css.
  margin-bottom: 0.5rem;
 mock-css."
        >
          <mock-styled.div />
          View Docs
        </mock-styled.button>
        <mock-styled.button
          classname="mock-css.
  margin-bottom: 0.5rem;
 mock-css."
          disabled="false"
        >
          <mock-styled.div />
          Save Config
        </mock-styled.button>
        <mock-styled.button
          classname="mock-css.
  margin-bottom: 0.5rem;
 mock-css."
          disabled="false"
        >
          <mock-styled.div />
          Delete Config
        </mock-styled.button>
      </mock-styled.aside>
      <mock-styled.section
        classname=""
      >
        <mock-styled.h1
          classname=""
        >
          Reapit Payments App Configuration
        </mock-styled.h1>
        <mock-styled.div
          classname="mock-css.
  @keyframes fade-in {
    from {
      opacity: 0;
    }

    to {
      opacity: 1;
    }
  }
  animation-duration: 0.5s;
  animation-fill-mode: both;
  animation-delay: 0.1s;
  animation-name: fade-in;
 mock-css.
  margin-bottom: 1.25rem;
 mock-css. mock-css. mock-css. mock-css."
        >
          <div
            class="mock-css.
  padding: 0 1rem;
  display: flex;
  align-items: center;
  border-radius: var(--default-border-radius) 0 0 var(--default-border-radius);
  cursor: pointer;

  , {
    color: var(--color-white);
  }
"
            data-testid="close-icon"
          >
            <mock-styled.span
              classname=""
            >
              <svg />
            </mock-styled.span>
          </div>
          <div
            class="mock-css.
  padding: 1rem;
  opacity: 0;
  transition: 0.5s;
  width: 100%;
"
          >
            Your app is currently configured to use Reapit Payments. You can update your details however, you will be editing production configuration so please ensure the fields are valid as failure to do so can lead to the app failing for all users.
          </div>
        </mock-styled.div>
        <form>
          <mock-styled.h2
            classname=""
          >
            Company Details
          </mock-styled.h2>
          <mock-styled.p
            classname="mock-css."
          >
            These details are required to personalise emails sent to your customers, both receipts and requests for payment.
          </mock-styled.p>
          <mock-styled.div
            classname="mock-css."
          >
            <mock-styled.div>
              <mock-styled.div>
                <mock-styled.input
                  classname=""
                  id="test-static-id"
                  name="companyName"
                  type="email"
                />
                <mock-styled.label
                  htmlfor="test-static-id"
                >
                  Company Name
                </mock-styled.label>
              </mock-styled.div>
            </mock-styled.div>
            <mock-styled.div>
              <mock-styled.div>
                <mock-styled.label>
                  Email Logo Url
                </mock-styled.label>
                <mock-styled.div
                  classname="mock-css.
  align-items: center;
"
                >
                  <mock-styled.button
                    classname="mock-css.
  margin-right: 0.625rem;
 mock-css."
                    type="button"
                  >
                    <mock-styled.div />
                    Upload
                  </mock-styled.button>
                  <mock-styled.input
                    data-testid="el-file-input"
                    type="file"
                  />
                  <mock-styled.input
                    id="test-static-id"
                    name="logoUri"
                  />
                  <mock-styled.p
                    classname="mock-css. mock-css."
                  >
                    Upload File
                  </mock-styled.p>
                </mock-styled.div>
              </mock-styled.div>
            </mock-styled.div>
          </mock-styled.div>
          <mock-styled.h2
            classname=""
          >
            Opayo Credientials
          </mock-styled.h2>
          <mock-styled.p
            classname="mock-css."
          >
            These details are required by Opayo to make payments in a live or test environment. You can update your credentials at any time by entering new keys in the form below.
          </mock-styled.p>
          <mock-styled.p
            classname="mock-css. mock-css."
          >
            Please note: for security reasons. after they have been saved, your Opayo Keys are stored in an encryped format and never surfaced again in the app.
          </mock-styled.p>
          <mock-styled.div
            classname="mock-css."
          >
            <mock-styled.div>
              <mock-styled.div>
                <mock-styled.input
                  classname=""
                  id="test-static-id"
                  name="vendorName"
                  type="email"
                />
                <mock-styled.label
                  htmlfor="test-static-id"
                >
                  Opayo Vendor Name
                </mock-styled.label>
              </mock-styled.div>
            </mock-styled.div>
            <mock-styled.div>
              <mock-styled.div>
                <mock-styled.label>
                  Live Opayo Environment or Test
                </mock-styled.label>
                <mock-styled.input
                  id="is-live-env"
                  name="isLive"
                  type="checkbox"
                />
                <mock-styled.label
                  classname="mock-css."
                  htmlfor="is-live-env"
                >
                  <mock-styled.span>
                    Live
                  </mock-styled.span>
                  <mock-styled.span>
                    Test
                  </mock-styled.span>
                </mock-styled.label>
              </mock-styled.div>
            </mock-styled.div>
            <mock-styled.div>
              <mock-styled.div>
                <mock-styled.input
                  classname=""
                  id="test-static-id"
                  name="integrationKey"
                  type="email"
                />
                <mock-styled.label
                  htmlfor="test-static-id"
                >
                  Opayo Integration Key
                </mock-styled.label>
              </mock-styled.div>
            </mock-styled.div>
            <mock-styled.div>
              <mock-styled.div>
                <mock-styled.input
                  classname=""
                  id="test-static-id"
                  name="passKey"
                  type="email"
                />
                <mock-styled.label
                  htmlfor="test-static-id"
                >
                  Opayo Pass Key
                </mock-styled.label>
              </mock-styled.div>
            </mock-styled.div>
            <mock-styled.div>
              <mock-styled.input
                classname=""
                id="test-static-id"
                name="configId"
                type="hidden"
              />
            </mock-styled.div>
          </mock-styled.div>
        </form>
      </mock-styled.section>
    </mock-styled.div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;
