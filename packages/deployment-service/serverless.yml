service: cloud-deployment-service

plugins:
  - serverless-webpack
  - serverless-offline
  - serverless-deployment-bucket
  - serverless-offline-sqs

custom:
  s3CloudFormBucket: cloud-deployment-cloudform-templates-${opt:stage, 'dev'}
  env: ${file(./config.json)}
  webpack:
    webpackConfig: 'webpack.config.js'
    includeModules: true
    packager: 'yarn'
    packagerOptions:
      noFrozenLockFile: false
    excludeFiles: src/**/*.test.ts
    keepOutputDirectory: true
  serverless-offline-sqs:
    autoCreate: true
    region: eu-west-2
    endpoint: http://0.0.0.0:9324
    skipCacheInvalidation: false

provider:
  name: aws
  runtime: ${opt:runtime, 'nodejs14.x'}
  stage: ${opt:stage, 'dev'}
  endpointType: REGIONAL
  region: eu-west-2
  deploymentBucket:
    name: ${self:custom.s3CloudFormBucket}
    blockPublicAccess: false
  s3:
    deploymentReleaseBucket:
      name: ${self:custom.env.DEPLOYMENT_BUCKET_NAME}
    deploymentVersionBucket:
      name: ${self:custom.env.DEPLOYMENT_VERSION_BUCKET_NAME}
    deploymentLiveBucket:
      name: ${self:custom.env.DEPLOYMENT_LIVE_BUCKET_NAME}
  vpc:
    subnetIds:
      - ${self:custom.env.SUB_NET}
    securityGroupIds:
      - ${self:custom.env.SECURITY_GROUP}
  
  environment:
    NODE_ENV: 'production'
    CONNECT_USER_POOL: ${self:custom.env.CONNECT_USER_POOL}
    SENTRY_DSN: ${self:custom.env.SENTRY_DSN}
    AURORA_RESOURCE_ARN: ${self:custom.env.AURORA_RESOURCE_ARN}
    AURORA_SECRET_ARN: ${self:custom.env.AURORA_SECRET_ARN}
    AURORA_DATABASE: ${self:custom.env.AURORA_DATABASE}
    EFS_ARN: ${self:custom.env.EFS_ARN}
    MYSQL_HOST: ${self:custom.env.MYSQL_HOST}
    MYSQL_DATABASE: ${self:custom.env.MYSQL_DATABASE}
    MYSQL_USERNAME: ${self:custom.env.MYSQL_USERNAME}
    MYSQL_PASSWORD: ${self:custom.env.MYSQL_PASSWORD}
    SQS_ENDPOINT: ${self:custom.env.SQS_ENDPOINT}
    DEPLOYMENT_VERSION_BUCKET_NAME: ${self:custom.env.DEPLOYMENT_VERSION_BUCKET_NAME}
    DEPLOYMENT_LIVE_BUCKET_NAME: ${self:custom.env.DEPLOYMENT_LIVE_BUCKET_NAME}
    DEPLOYMENT_BUCKET_NAME: ${self:custom.env.DEPLOYMENT_BUCKET_NAME}
    REGION: ${self:provider.region}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:GetObject
        - s3:ListBucket
        - s3:PutObjectAcl
        - s3:GetBucketAcl
        - s3:GetObjectAcl
        - s3:GetBucketLocation
        - s3:GetObjectRetention
        - s3:GetObjectVerison
        - s3:GetObjectVersionAcl
        - s3:DeleteObject
        - s3:DeleteObjectVersion
      Resource: 'arn:aws:s3:::${self:custom.env.DEPLOYMENT_BUCKET_NAME}/*'
    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:GetObject
        - s3:ListBucket
        - s3:PutObjectAcl
        - s3:GetBucketAcl
        - s3:GetObjectAcl
        - s3:GetBucketLocation
        - s3:GetObjectRetention
        - s3:GetObjectVerison
        - s3:GetObjectVersionAcl
        - s3:DeleteObject
        - s3:DeleteObjectVersion
      Resource: 'arn:aws:s3:::${self:custom.env.DEPLOYMENT_VERSION_BUCKET_NAME}/*'
    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:GetObject
        - s3:ListBucket
        - s3:PutObjectAcl
        - s3:GetBucketAcl
        - s3:GetObjectAcl
        - s3:GetBucketLocation
        - s3:GetObjectRetention
        - s3:GetObjectVerison
        - s3:GetObjectVersionAcl
        - s3:DeleteObject
        - s3:DeleteObjectVersion
      Resource: 'arn:aws:s3:::${self:custom.env.DEPLOYMENT_LIVE_BUCKET_NAME}/*'
    - Effect: Allow
      Action:
        - rds-data:BeginTransaction
        - rds-data:CommitTransaction
        - rds-data:ExecuteStatement
      Resource: 'arn:aws:rds:${self:provider.region}:${self:custom.env.AWS_ACCOUNT_ID}:cluster:cloud-deployment-dev'
    - Effect: Allow
      Action:
        - secretsmanager:GetSecretValue
      Resource: ${self:custom.env.AURORA_SECRET_ARN}
    - Effect: Allow
      Action:
        - sqs:GetQueueAttributes
        - sqs:SendMessage
        - sqs:DeleteMessage
      Resource:
        Fn::GetAtt:
          - CodebuildExecutor
          - Arn
    - Effect: Allow
      Action:
        - sqs:GetQueueAttributes
        - sqs:SendMessage
        - sqs:DeleteMessage
      Resource:
        Fn::GetAtt:
          - CodebuildDeploy
          - Arn
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
      Resource: arn:aws:lambda:${self:provider.region}:${self:custom.env.AWS_ACCOUNT_ID}:function:cloud-api-key-service-dev-getApiKeyViaInvoke
    - Effect: Allow
      Action:
        - route53:GetHostedZone
        - route53:ChangeResourceRecordSets
        - route53:GetChange
        - route53:ListResourceRecordSets
      Resource: arn:aws:route53:::hostedzone/Z02367201ZA0CZPSM3N2H
    - Effect: Allow
      Action:
        - codebuild:StartBuild
      Resource: arn:aws:codebuild:eu-west-2:028446965111:project/test

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,api-version'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
    GatewayResponseDefault5XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,api-version'"
        ResponseType: DEFAULT_5XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
    DeploymentBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.env.DEPLOYMENT_BUCKET_NAME}
        AccessControl: Private
    DeploymentVersionBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.env.DEPLOYMENT_VERSION_BUCKET_NAME}
        AccessControl: Private
    DeploymentLiveBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.env.DEPLOYMENT_LIVE_BUCKET_NAME}
        AccessControl: PublicRead
    CodebuildExecutor:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: CodebuildExecutor
    CodebuildDeploy:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: CodebuildDeploy

package:
  individually: true
  patterns:
    - 'dist/**'
    - '!package.json'
    - '!node_modules/**'
    - '!error.log'
    - '!info.log'
    - '!jest.config.js'
    - '!serverless.yml'
    - '!src/**'
    - '!tsconfig.json'
    - '!yml-helpers.js'
    - '!public/**'

functions:
  pipelineCreate:
    handler: src/index.pipelineCreate
    events:
      - http:
          path: /pipeline
          method: post
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - api-version
          authorizer:
            arn: arn:aws:cognito-idp:${self:provider.region}:${self:custom.env.AWS_ACCOUNT_ID}:userpool/${self:custom.env.CONNECT_USER_POOL}
  apiPipelineCreate:
    handler: src/index.pipelineCreate
    events:
      - http:
          path: /api/pipeline
          method: post
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - X-Api-Key
              - api-version
  pipelineUpdate:
    handler: src/index.pipelineUpdate
    events:
      - http:
          path: /pipeline/{pipelineId}
          method: put
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - api-version
          authorizer:
            arn: arn:aws:cognito-idp:${self:provider.region}:${self:custom.env.AWS_ACCOUNT_ID}:userpool/${self:custom.env.CONNECT_USER_POOL}
  apiPipelineUpdate:
    handler: src/index.pipelineUpdate
    events:
      - http:
          path: /api/pipeline/{pipelineId}
          method: put
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - X-Api-Key
              - api-version
  pipelineGet:
    handler: src/index.pipelineGet
    events:
      - http:
          path: /pipeline/{pipelineId}
          method: get
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - api-version
          authorizer:
            arn: arn:aws:cognito-idp:${self:provider.region}:${self:custom.env.AWS_ACCOUNT_ID}:userpool/${self:custom.env.CONNECT_USER_POOL}
  apiPipelineGet:
    handler: src/index.pipelineGet
    events:
      - http:
          path: /api/pipeline/{pipelineId}
          method: get
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - X-Api-Key
              - api-version
  pipelineDelete:
    handler: src/index.deletePipeline
    events:
      - http:
          path: /pipeline/{pipelineId}
          method: delete
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - api-version
          authorizer:
            arn: arn:aws:cognito-idp:${self:provider.region}:${self:custom.env.AWS_ACCOUNT_ID}:userpool/${self:custom.env.CONNECT_USER_POOL}
  apiPipelineDelete:
    handler: src/index.deletePipeline
    events:
      - http:
          path: /api/pipeline/{pipelineId}
          method: delete
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - X-Api-Key
              - api-version
  pipelinePaginate:
    handler: src/index.pipelinePaginate
    events:
      - http:
          path: /pipeline
          method: get
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - api-version
          authorizer:
            arn: arn:aws:cognito-idp:${self:provider.region}:${self:custom.env.AWS_ACCOUNT_ID}:userpool/${self:custom.env.CONNECT_USER_POOL}
  apiPipelinePaginate:
    handler: src/index.pipelinePaginate
    events:
      - http:
          path: /api/pipeline
          method: get
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - X-Api-Key
              - api-version
  pipelineRunnerCreate:
    handler: src/index.pipelineRunnerCreate
    events:
      - http:
          path: /pipeline/{pipelineId}/pipeline-runner
          method: post
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - api-version
  apiPipelineRunnerCreate:
    handler: src/index.pipelineRunnerCreate
    events:
      - http:
          path: /api/pipeline/{pipelineId}/pipeline-runner
          method: post
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - X-Api-Key
              - api-version
  pipelineRunnerUpdate:
    handler: src/index.pipelineRunnerUpdate
    events:
      - http:
          path: /pipeline/{pipelineId}/pipeline-runner
          method: put
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - api-version
  apiPipelineRunnerUpdate:
    handler: src/index.pipelineRunnerUpdate
    events:
      - http:
          path: /api/pipeline/{pipelineId}/pipeline-runner
          method: put
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - X-Api-Key
              - api-version
  pipelineRunnerPaginate:
    handler: src/index.pipelineRunnerPaginate
    events:
      - http:
          path: /pipeline/{pipelineId}/pipeline-runner
          method: get
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - api-version
  apiPipelineRunnerPaginate:
    handler: src/index.pipelineRunnerPaginate
    events:
      - http:
          path: /api/pipeline/{pipelineId}/pipeline-runner
          method: get
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - X-Api-Key
              - api-version
  deployRelease:
    handler: src/index.deployRelease
    events:
      - http:
          path: /deploy/release/{project}/{version}
          method: post
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - api-version
          authorizer:
            arn: arn:aws:cognito-idp:${self:provider.region}:${self:custom.env.AWS_ACCOUNT_ID}:userpool/${self:custom.env.CONNECT_USER_POOL}
  apiDeployRelease:
    handler: src/index.deployRelease
    events:
      - http:
          path: /api/deploy/release/{project}/{version}
          method: post
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - X-Api-Key
              - api-version
  releasePaginate:
    handler: src/index.releasePaginate
    events:
      - http:
          path: /deploy/release/{project}
          method: get
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - api-version
          authorizer:
            arn: arn:aws:cognito-idp:${self:provider.region}:${self:custom.env.AWS_ACCOUNT_ID}:userpool/${self:custom.env.CONNECT_USER_POOL}
  apiReleasePaginate:
    handler: src/index.releasePaginate
    events:
      - http:
          path: /api/deploy/release/{project}
          method: get
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - X-Api-Key
              - api-version
  deployVersion:
    handler: src/index.deployVersion
    events:
      - http:
          path: /deploy/version/{projectName}/{version}
          method: post
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - api-version
          authorizer:
            arn: arn:aws:cognito-idp:${self:provider.region}:${self:custom.env.AWS_ACCOUNT_ID}:userpool/${self:custom.env.CONNECT_USER_POOL}
  apiDeployVersion:
    handler: src/index.deployVersion
    events:
      - http:
          path: /api/deploy/version/{projectName}/{version}
          method: post
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - X-Api-Key
              - api-version
  releaseProjectPagination:
    handler: src/index.projectPaginate
    events:
      - http:
          path: /deploy/project
          method: get
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - api-version
          authorizer:
            arn: arn:aws:cognito-idp:${self:provider.region}:${self:custom.env.AWS_ACCOUNT_ID}:userpool/${self:custom.env.CONNECT_USER_POOL}
  apiReleaseProjectPagination:
    handler: src/index.projectPaginate
    events:
      - http:
          path: /api/deploy/project
          method: get
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - X-Api-Key
              - api-version
  codebuildExecutor:
    handler: src/index.codebuildExecutor
    events:
      - sqs:
          queueName: CodebuildExecutor
          arn:
            Fn::GetAtt:
              - CodebuildExecutor
              - Arn
  codebuildUpdate:
    handler: src/index.codebuildPipelineUpdater
    events:
      - sns: arn:aws:sns:eu-west-2:028446965111:codebuild
    timeout: 300
  codebuildDeploy:
    handler: src/index.versionDeploy
    events:
      - sqs:
          queueName: CodebuildDeploy
          arn:
            Fn::GetAtt:
              - CodebuildDeploy
              - Arn
    timeout: 300