service: cloud-deployment-service

plugins:
  - serverless-webpack
  - serverless-offline
  - serverless-dynamodb-local
  - serverless-deployment-bucket

custom:
  s3CloudFormBucket: cloud-deployment-cloudform-templates-${opt:stage, 'dev'}
  env: ${file(./config.json)}
  webpack:
    webpackConfig: 'webpack.config.js'
    includeModules: true
    packager: 'yarn'
    packagerOptions:
      noFrozenLockFile: false
    excludeFiles: src/**/*.test.ts
    keepOutputDirectory: true
  dynamodb:
    stages:
      - local
    start:
      port: 8000
      inMemory: true
      heapInitial: 200m
      heapMax: 1g
      migrate: true
      convertEmptyValues: true
  dynamodbStream:
    host: localhost
    port: 8000
    pollForever: true
    streams:
      - table: '${self:custom.env.DYNAMO_DB_TASK_TABLE_NAME}'
        functions:
          - taskPopulate


provider:
  name: aws
  runtime: ${opt:runtime, 'nodejs14.x'}
  stage: ${opt:stage, 'dev'}
  endpointType: REGIONAL
  region: eu-west-2
  deploymentBucket:
    name: ${self:custom.s3CloudFormBucket}
    blockPublicAccess: false
  
  environment:
    NODE_ENV: 'production'
    COGNITO_USERPOOL_ID: ${self:custom.env.COGNITO_USERPOOL_ID}
    SENTRY_DSN: ${self:custom.env.SENTRY_DSN}
    DYNAMO_DB_REGION: ${self:custom.env.DYNAMO_DB_REGION}
    DYNAMO_DB_ENDPOINT: ${self:custom.env.DYNAMO_DB_ENDPOINT}
    DYNAMO_DB_TABLE_NAME: ${self:custom.env.DYNAMO_DB_TABLE_NAME}
    DYNAMO_DB_PIPELINE_TABLE_NAME: ${self:custom.env.DYNAMO_DB_PIPELINE_TABLE_NAME}
    DYNAMO_DB_TASK_TABLE_NAME: ${self:custom.env.DYNAMO_DB_TASK_TABLE_NAME}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: 'arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.env.DYNAMO_DB_TABLE_NAME}'
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: 'arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.env.DYNAMO_DB_PIPELINE_TABLE_NAME}'
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: 'arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.env.DYNAMO_DB_TASK_TABLE_NAME}'

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,reapit-customer,reapit-connect-token,api-version,if-match'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
    GatewayResponseDefault5XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,reapit-customer,reapit-connect-token,api-version,if-match'"
        ResponseType: DEFAULT_5XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
    DeploymentTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.env.DYNAMO_DB_TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
    PipelineTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.env.DYNAMO_DB_PIPELINE_TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
    TaskTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.env.DYNAMO_DB_TASK_TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true

package:
  individually: true
  include:
    - dist/**
  exclude:
    - package.json
    - node_modules/**
    - error.log
    - info.log
    - jest.config.js
    - nodemon.json
    - serverless.yml
    - src/**
    - tsconfig.json
    - yml-helpers.js

functions:
  createDeployment:
    handler: src/index.createDeployment
    events:
      - http:
          path: /deployment
          method: post
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - reapit-customer
              - reapit-connect-token
              - api-version
              - if-match
          authorizer:
            arn: arn:aws:cognito-idp:${self:provider.region}:${self:custom.env.AWS_ACCOUNT_ID}:userpool/${self:custom.env.COGNITO_USERPOOL_ID}
  updateDeployment:
    handler: src/index.updateDeployment
    events:
      - http:
          path: /deployment/{id}
          method: put
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - reapit-customer
              - reapit-connect-token
              - api-version
              - if-match
          authorizer:
            arn: arn:aws:cognito-idp:${self:provider.region}:${self:custom.env.AWS_ACCOUNT_ID}:userpool/${self:custom.env.COGNITO_USERPOOL_ID}
  getDeployment:
    handler: src/index.getDeployment
    events:
      - http:
          path: /deployment/{id}
          method: get
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - reapit-customer
              - reapit-connect-token
              - api-version
              - if-match
          authorizer:
            arn: arn:aws:cognito-idp:${self:provider.region}:${self:custom.env.AWS_ACCOUNT_ID}:userpool/${self:custom.env.COGNITO_USERPOOL_ID}
  deleteDeployment:
    handler: src/index.deleteDeployment
    events:
      - http:
          path: /deployment/{id}
          method: delete
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - reapit-customer
              - reapit-connect-token
              - api-version
              - if-match
          authorizer:
            arn: arn:aws:cognito-idp:${self:provider.region}:${self:custom.env.AWS_ACCOUNT_ID}:userpool/${self:custom.env.COGNITO_USERPOOL_ID}
  paginateDeployments:
    handler: src/index.paginateDeployments
    events:
      - http:
          path: /deployment
          method: get
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - reapit-customer
              - reapit-connect-token
              - api-version
              - if-match
          authorizer:
            arn: arn:aws:cognito-idp:${self:provider.region}:${self:custom.env.AWS_ACCOUNT_ID}:userpool/${self:custom.env.COGNITO_USERPOOL_ID}
  createPipeline:
    handler: src/index.createPipeline
    events:
      - http:
          path: /deployment/{deploymentId}/pipeline
          method: post
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - reapit-customer
              - reapit-connect-token
              - api-version
              - if-match
          authorizer:
            arn: arn:aws:cognito-idp:${self:provider.region}:${self:custom.env.AWS_ACCOUNT_ID}:userpool/${self:custom.env.COGNITO_USERPOOL_ID}
  updatePipeline:
    handler: src/index.updatePipeline
    events:
      - http:
          path: /deployment/pipeline/{id}
          method: put
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - reapit-customer
              - reapit-connect-token
              - api-version
              - if-match
          authorizer:
            arn: arn:aws:cognito-idp:${self:provider.region}:${self:custom.env.AWS_ACCOUNT_ID}:userpool/${self:custom.env.COGNITO_USERPOOL_ID}
  getPipeline:
    handler: src/index.getPipeline
    events:
      - http:
          path: /deployment/pipeline/{id}
          method: get
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - reapit-customer
              - reapit-connect-token
              - api-version
              - if-match
          authorizer:
            arn: arn:aws:cognito-idp:${self:provider.region}:${self:custom.env.AWS_ACCOUNT_ID}:userpool/${self:custom.env.COGNITO_USERPOOL_ID}
  taskPopulate:
    handler: src/index.taskPopulate
    events:
      - stream:
        type: dynamodb
        arn: 
          Fn::GetAtt: [self:custom.env.DYNAMO_DB_PIPELINE_TABLE_NAME, StreamArn]
