// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`OfficeGroupsContent should match a snapshot 1`] = `
<Fragment>
  <Component>
    <mock-styled.div>
      <Component
        columns={
          Array [
            Object {
              "Header": "Group Name",
              "accessor": "name",
            },
            Object {
              "Header": "Office List",
              "accessor": "officeIds",
            },
            Object {
              "Header": "Last Updated",
              "accessor": "description",
            },
            Object {
              "Header": "Edit",
            },
          ]
        }
        data={
          Array [
            Object {
              "created": "2019-08-14T12:30:02.0000000Z",
              "id": "string",
              "modified": "2019-08-14T12:30:02.0000000Z",
              "name": "string",
              "officeIds": "string",
              "organisationId": "string",
              "status": "string",
              "tag": "string",
            },
          ]
        }
        expandable={true}
        scrollable={true}
      />
    </mock-styled.div>
  </Component>
  <Component
    onChange={[MockFunction]}
    pageNumber={0}
    pageSize={0}
    totalCount={0}
  />
</Fragment>
`;

exports[`OfficesGroupsTab should match a snapshot 1`] = `
<ErrorBoundary>
  <Component>
    <div
      className="flex justify-between items-center mb-4"
    >
      <Component
        className="mb-0"
      >
        Office groups
      </Component>
      <Component
        onClick={[Function]}
      >
        Create office group
      </Component>
    </div>
    <i>
      The list below will show you any ‘Office Groups’ that have been created for your Organisation. To create a new office group, please click on ‘Create New Office Group’. To add or edit an existing office group, please use ‘Edit’ on the associated group.
    </i>
  </Component>
  <Component
    columns={
      Array [
        Object {
          "Header": "Group Name",
          "accessor": "name",
        },
        Object {
          "Cell": [Function],
          "Header": "Office List",
          "accessor": "officeIds",
        },
        Object {
          "Cell": [Function],
          "Header": "Last Updated",
        },
        Object {
          "Cell": [Function],
          "Header": "Edit",
        },
      ]
    }
    data={
      Object {
        "_embedded": Array [
          Object {
            "created": "2019-08-14T12:30:02.0000000Z",
            "id": "string",
            "modified": "2019-08-14T12:30:02.0000000Z",
            "name": "string",
            "officeIds": "string",
            "organisationId": "string",
            "status": "string",
            "tag": "string",
          },
        ],
        "_links": Object {
          "additionalProp1": Object {
            "href": "string",
          },
          "additionalProp2": Object {
            "href": "string",
          },
          "additionalProp3": Object {
            "href": "string",
          },
        },
        "pageCount": 0,
        "pageNumber": 0,
        "pageSize": 0,
        "totalCount": 0,
        "totalPageCount": 0,
      }
    }
    onPageChange={[Function]}
  />
</ErrorBoundary>
`;

exports[`renderResult should match snapshot when has result data 1`] = `
<mock-styled.div>
  <Unknown
    columns={
      Array [
        Object {
          "Header": "Group Name",
          "accessor": "name",
        },
        Object {
          "Header": "Office List",
          "accessor": "officeIds",
        },
        Object {
          "Header": "Last Updated",
        },
        Object {
          "Header": "Edit",
        },
      ]
    }
    data={
      Array [
        Object {
          "created": "2019-08-14T12:30:02.0000000Z",
          "id": "string",
          "modified": "2019-08-14T12:30:02.0000000Z",
          "name": "string",
          "officeIds": "string",
          "organisationId": "string",
          "status": "string",
          "tag": "string",
        },
      ]
    }
    expandable={true}
    scrollable={true}
  />
</mock-styled.div>
`;

exports[`renderResult should match snapshot when no result 1`] = `
<mock-styled.div>
  <Unknown
    variant="info"
  >
    No Results
  </Unknown>
</mock-styled.div>
`;
