scalar JSON

input AddressInput {
  buildingName: String
  buildingNumber: String
  line1: String
  line2: String
  line3: String
  line4: String
  postcode: String
  countryId: String
  geolocation: AddressInputGeolocationInput
}

input AddressInputGeolocationInput {
  latitude: Float
  longitude: Float
}

input EpcInput {
  exempt: Boolean
  eer: Int
  eerPotential: Int
  eir: Int
  eirPotential: Int
}

input ExternalAreaInput {
  type: String
  min: Float
  max: Float
}

input InternalAreaInput {
  type: String
  min: Float
  max: Float
}

input lettingInput {
  instructed: String
  availableFrom: String
  availableTo: String
  rent: Float
  rentFrequency: String
  furnishing: [String!]
  agentRole: String
  term: String
  status: String
}

input SellingInput {
  instructed: String
  price: Int
  qualifier: String
  status: String
  completed: String
  exchanged: String
  tenure: SellingInputTenureInput
}

input SellingInputTenureInput {
  type: String
  expiry: String
}

input CreatePropertyRoomModelInput {
  name: String
  dimensions: String
  description: String
}

type Mutation {
  CreateProperty(
    marketingMode: String
    departmentId: String
    strapline: String
    description: String
    summary: String
    address: AddressInput
    bedrooms: Int
    receptions: Int
    bathrooms: Int
    councilTax: String
    internetAdvertising: Boolean
    viewingArrangements: String
    videoUrl: String
    videoCaption: String
    epc: EpcInput
    externalArea: ExternalAreaInput
    internalArea: InternalAreaInput
    selling: SellingInput
    letting: lettingInput
    type: [String!]
    style: [String!]
    situation: [String!]
    parking: [String!]
    age: [String!]
    locality: [String!]
    rooms: [CreatePropertyRoomModelInput!]
    negotiatorId: String
    officeIds: [String!]
    areaId: String
    metadata: JSON
  ): PropertyModel!

  UpdateProperty(
    id: String!
    _eTag: String!
    strapline: String
    description: String
    summary: String
    address: AddressInput
    bedrooms: Int
    receptions: Int
    bathrooms: Int
    councilTax: String
    internetAdvertising: Boolean
    viewingArrangements: String
    videoUrl: String
    videoCaption: String
    epc: EpcInput
    externalArea: ExternalAreaInput
    internalArea: InternalAreaInput
    selling: SellingInput
    letting: lettingInput
    type: [String!]
    style: [String!]
    situation: [String!]
    parking: [String!]
    age: [String!]
    locality: [String!]
    negotiatorId: String
    officeIds: [String!]
    areaId: String
    metadata: JSON
  ): PropertyModel!
}

type PagedResultPropertyModel {
  _embedded: [PropertyModel!]
  pageNumber: Int
  pageSize: Int
  pageCount: Int
  totalCount: Int
  _links: JSON
}

type PropertyModel {
  id: String
  created: String
  modified: String
  marketingMode: String
  currency: String
  address: PropertyModelAddress
  areaId: String
  strapline: String
  description: String
  summary: String
  departmentId: String
  negotiatorId: String
  bedrooms: Int
  receptions: Int
  bathrooms: Int
  councilTax: String
  internetAdvertising: Boolean
  viewingArrangements: String
  videoUrl: String
  videoCaption: String
  externalArea: PropertyModelExternalArea
  internalArea: PropertyModelInternalArea
  epc: PropertyModelEpc
  selling: PropertyModelSelling
  letting: PropertyModeLetting
  type: [String!]
  style: [String!]
  situation: [String!]
  parking: [String!]
  age: [String!]
  locality: [String!]
  rooms: [PropertyRoomModel!]
  officeIds: [String!]
  metadata: JSON
  _eTag: String
  _links: JSON
  _embedded: JSON
}

type PropertyModelAddress {
  buildingName: String
  buildingNumber: String
  line1: String
  line2: String
  line3: String
  line4: String
  postcode: String
  countryId: String
  geolocation: PropertyModelAddressGeolocation
}

type PropertyModelAddressGeolocation {
  latitude: Float

  longitude: Float
}

type PropertyModelEpc {
  exempt: Boolean
  eer: Int
  eerPotential: Int
  eir: Int
  eirPotential: Int
}

type PropertyModelExternalArea {
  type: String
  min: Float
  max: Float
}

type PropertyModelInternalArea {
  type: String
  min: Float
  max: Float
}

type PropertyModeLetting {
  instructed: String
  availableFrom: String
  availableTo: String
  rent: Float
  rentFrequency: String
  furnishing: [String!]
  term: String
  status: String
  agentRole: String
  landlordId: String
}

type PropertyModelSelling {
  instructed: String
  price: Float
  qualifier: String
  status: String
  completed: String
  exchanged: String
  tenure: PropertyModelSellingTenure
  vendorId: String
}

type PropertyModelSellingTenure {
  type: String
  expiry: String
}

type PropertyRoomModel {
  name: String
  dimensions: String
  description: String
}

type Query {
  GetProperties(
    pageSize: Int
    pageNumber: Int
    sortBy: String
    embed: [String!]
    id: [String!]
    age: [String!]
    agentRole: [String!]
    landlordId: [String!]
    lettingStatus: [String!]
    locality: [String!]
    parking: [String!]
    sellingStatus: [String!]
    situation: [String!]
    style: [String!]
    type: [String!]
    address: String
    departmentId: String
    marketingMode: [String!]
    bedroomsFrom: Int
    bedroomsTo: Int
    priceFrom: Int
    priceTo: Int
    rentFrom: Float
    rentTo: Float
    rentFrequency: [String!]
    internetAdvertising: Boolean
  ): PagedResultPropertyModel!

  GetPropertyById(id: String!, embed: [String!]): PropertyModel!
}
