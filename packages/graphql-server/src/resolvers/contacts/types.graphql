type ContactModel {
  id: String
  created: String
  modified: String
  title: String
  forename: String
  surname: String
  dateOfBirth: String
  active: Boolean
  marketingConsent: String
  identityCheck: String
  source: ContactModelSource
  homePhone: String
  workPhone: String
  mobilePhone: String
  email: String
  primaryAddress: ContactModelAddress
  secondaryAddress: ContactModelAddress
  workAddress: ContactModelAddress
  officeIds: [String!]
  negotiatorIds: [String!]
  metadata: JSON
  _eTag: String
  _links: JSON
  _embedded: EmbeddedContactModel
}

type EmbeddedContactModel {
  documents: JSON
  identityChecks: [IdentityCheckModel]
  negotiators: [NegotiatorModel]
  offices: [OfficeModel]
  source: SourceModel
}

type ContactModelAddress {
  type: String
  buildingName: String
  buildingNumber: String
  line1: String
  line2: String
  line3: String
  line4: String
  postcode: String
  countryId: String
}

type ContactModelSource {
  id: String
  type: String
}

input ContactModelAddressInput {
  type: String
  buildingName: String
  buildingNumber: String
  line1: String
  line2: String
  line3: String
  line4: String
  postcode: String
  countryId: String
}

input ContactModelSourceInput {
  id: String
  type: String
}

scalar JSON

type PagedResultContactModel {
  _embedded: [ContactModel!]
  pageNumber: Int
  pageSize: Int
  pageCount: Int
  totalCount: Int
  _links: JSON
}

input ContactModelAddressInput {
  type: String
  buildingName: String
  buildingNumber: String
  line1: String
  line2: String
  line3: String
  line4: String
  postcode: String
  countryId: String
}

enum ContactQueryEmbed {
  documents
  identityChecks
  negotiators
  offices
  source
}

type Query {
  GetContacts(
    pageSize: Int
    pageNumber: Int
    sortBy: String
    id: [String!]
    negotiatorId: [String!]
    officeId: [String!]
    address: String
    identityCheck: String
    name: String
    marketingConsent: String
    active: Boolean
    createdFrom: String
    createdTo: String
    embed: [ContactQueryEmbed]
  ): PagedResultContactModel!

  GetContactById(id: String!, embed: [ContactQueryEmbed]): ContactModel!
}

type Mutation {
  CreateContact(
    title: String
    forename: String
    surname: String
    dateOfBirth: String
    active: Boolean
    marketingConsent: String
    source: ContactModelSourceInput
    homePhone: String
    workPhone: String
    mobilePhone: String
    email: String
    officeIds: [String!]
    negotiatorIds: [String!]
    primaryAddress: ContactModelAddressInput
    secondaryAddress: ContactModelAddressInput
    workAddress: ContactModelAddressInput
    metadata: JSON
  ): JSON!

  UpdateContact(
    id: String!
    _eTag: String!
    title: String
    forename: String
    surname: String
    dateOfBirth: String
    active: Boolean
    marketingConsent: String
    source: ContactModelSourceInput
    homePhone: String
    workPhone: String
    mobilePhone: String
    email: String
    officeIds: [String!]
    negotiatorIds: [String!]
    primaryAddress: ContactModelAddressInput
    secondaryAddress: ContactModelAddressInput
    workAddress: ContactModelAddressInput
    metadata: JSON
  ): ContactModel!
}
