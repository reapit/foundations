type Query {
  GetTenancies(
    pageSize: Int
    pageNumber: Int
    sortBy: String
    embed: [TenancyQueryEmbed]
    id: [String!]
    negotiatorId: [String!]
    applicantId: [String!]
    propertyId: [String!]
    status: [String!]
    createdFrom: String
    createdTo: String
    modifiedFrom: String
    modifiedTo: String
    metadata: [String!]
  ): PagedResultTenancies!
  GetTenancyById(id: String!, embed: [TenancyQueryEmbed]): TenancyModel!
  GetTenancyRelationships(id: String!, pageSize: Int, pageNumber: Int): PagedResultTenancyRelationships!
  GetTenancyChecks(id: String!, pageSize: Int, pageNumber: Int): PagedResultTenancyChecks!
  GetTenancyCheckById(id: String!, checkId: String!): TenancyCheckModel!
}

type Mutation {
  CreateTenancy(
    startDate: String
    endDate: String
    agentRole: String
    rent: Int
    rentFrequency: String
    isPeriodic: Boolean
    typeId: String
    negotiatorId: String
    propertyId: String
    applicantId: String
    source: CreateTenancyRequestModelSource
  ): TenancyModel!
  CreateTenancyCheck(id: String!, description: String, type: String, status: String): TenancyCheckModel!
  DeleteTenancyCheck(id: String!, checkId: String!): Boolean!
  UpdateTenancyCheck(id: String!, checkId: String!, status: String, _eTag: String!): TenancyCheckModel!
}

enum TenancyQueryEmbed {
  appointments
  applicant
  documents
  negotiator
  property
  source
  tasks
  type
}

type PagedResultTenancies {
  _embedded: [TenancyModel!]
  pageNumber: Int
  pageSize: Int
  pageCount: Int
  totalPageCount: Int
  totalCount: Int
  _links: JSON
}

type TenancyModel {
  id: String
  created: String
  modified: String
  startDate: String
  endDate: String
  status: String
  agentRole: String
  rent: Int
  rentFrequency: String
  endDateConfirmed: Boolean
  isPeriodic: Boolean
  typeId: String
  negotiatorId: String
  propertyId: String
  applicantId: String
  source: TenancySourceModel
  related: [TenancyRelatedModel!]
  _eTag: String
  _links: JSON
  _embedded: EmbeddedTenancyModel
}

type EmbeddedTenancyModel {
  appointments: [AppointmentModel]
  applicant: ApplicantModel
  documents: [JSON]
  negotiator: NegotiatorModel
  property: PropertyModel
  source: SourceModel
  tasks: [TaskModel]
  type: ListItemModel
}

type TenancySourceModel {
  id: String
  type: String
}

type PagedResultTenancyRelationships {
  _embedded: [PagedResultTenancyRelationshipsEmbedded!]
  pageNumber: Int
  pageSize: Int
  pageCount: Int
  totalPageCount: Int
  totalCount: Int
  _links: JSON
}

type TenancyRelatedModel {
  id: String
  name: String
  title: String
  forename: String
  surname: String
  type: String
  homePhone: String
  workPhone: String
  mobilePhone: String
  email: String
  primaryAddress: TenancyPrimaryAddressModel
}

type TenancyPrimaryAddressModel {
  buildingName: String
  buildingNumber: String
  line1: String
  line2: String
  line3: String
  line4: String
  postcode: String
  countryId: String
}

type PagedResultTenancyRelationshipsEmbedded {
  id: String
  created: String
  modified: String
  tenancyId: String
  associatedType: String
  associatedId: String
  isMain: Boolean
  _links: JSON
  _embedded: JSON
}

type PagedResultTenancyChecks {
  _embedded: [TenancyCheckModel!]
  pageNumber: Int
  pageSize: Int
  pageCount: Int
  totalPageCount: Int
  totalCount: Int
  _links: JSON
}

type TenancyCheckModel {
  id: String
  created: String
  modified: String
  description: String
  status: String
  type: String
  tenancyId: String
  _eTag: String
  _links: JSON
  _embedded: JSON
}

input CreateTenancyRequestModelSource {
  id: String
  type: String
}
