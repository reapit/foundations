scalar JSON

type ApplicantAddress {
  buildingName: String
  buildingNumber: String
  line1: String
  line2: String
  line3: String
  line4: String
  postcode: String
  countryId: String
}

type ApplicantRelate {
  id: String
  name: String
  type: String
  homePhone: String
  workPhone: String
  mobilePhone: String
  email: String
  primaryAddress: ApplicantAddress
}

type ApplicantBuying {
  priceFrom: Int
  priceTo: Int
}

type ApplicantRenting {
  moveDate: String
  term: String
  rentFrom: Int
  rentTo: Int
  rentFrequency: String
  furnishing: [String]
}

type ApplicantExternalArea {
  type: String
  amountFrom: Int
  amountTo: Int
}

type ApplicantInternalArea {
  type: String
  amount: Int
}

type ApplicantSource {
  id: String
  type: String
}

type ApplicantModel {
  id: String
  created: String
  modified: String
  marketingMode: String
  currency: String
  active: Boolean
  notes: String
  lastCall: String
  nextCall: String
  departmentId: String
  solicitorId: String
  type: [String]
  style: [String]
  situation: [String]
  parking: [String]
  age: [String]
  locality: [String]
  bedroomsMin: Int
  bedroomsMax: Int
  receptionsMin: Int
  receptionsMax: Int
  bathroomsMin: Int
  bathroomsMax: Int
  locationType: String
  locationOptions: [String]
  buying: ApplicantBuying
  renting: ApplicantRenting
  externalArea: ApplicantExternalArea
  internalArea: ApplicantInternalArea
  source: ApplicantSource
  officeIds: [String]
  negotiatorIds: [String]
  related: [ApplicantRelate]
  metadata: JSON
  _eTag: String
  _links: JSON
  _embedded: JSON
}

type PagedResultApplicantModel {
  _embedded: [ApplicantModel!]
  pageNumber: Int
  pageSize: Int
  pageCount: Int
  totalCount: Int
  _links: JSON
}

type ApplicantContactRelationshipModel {
  id: String
  created: String
  modified: String
  applicantId: String
  associatedType: String
  associatedId: String
  isMain: Boolean
  _links: JSON
  _embedded: JSON
}

type PagedResultApplicantContactRelationshipModel {
  _embedded: [ApplicantContactRelationshipModel]
  pageNumber: Int
  pageSize: Int
  pageCount: Int
  totalCount: Int
  _links: JSON
}

type Query {
  GetApplicants(
    pageSize: Int
    pageNumber: Int
    sortBy: String
    embed: [String]
    id: [String]
    age: [String]
    furnishing: [String]
    locality: [String]
    negotiatorId: [String]
    officeId: [String]
    parking: [String]
    situation: [String]
    style: [String]
    type: [String]
    address: String
    departmentId: String
    marketingMode: [String]
    name: String
    priceFrom: String
    priceTo: String
    rentFrom: String
    rentTo: String
    rentFrequency: [String]
    bedroomsFrom: Int
    bedroomsTo: Int
    createdFrom: String
    createdTo: String
    lastCallFrom: String
    lastCallTo: String
    nextCallFrom: String
    nextCallTo: String
    metadata: [String]
  ): PagedResultApplicantModel!

  GetApplicantById(id: String!, embed: [String]): ApplicantModel!
  GetApplicantRelationshipById(id: String!, relationshipId: String!): ApplicantContactRelationshipModel!
  GetApplicantRelationships(id: String!, pageSize: Int,pageNumber: Int): PagedResultApplicantContactRelationshipModel!
}


input ApplicantAddressInput {
  buildingName: String
  buildingNumber: String
  line1: String
  line2: String
  line3: String
  line4: String
  postcode: String
  countryId: String
}

input ApplicantBuyingInput {
  priceFrom: Int
  priceTo: Int
}

input ApplicantRentingInput {
  moveDate: String
  term: String
  rentFrom: Int
  rentTo: Int
  rentFrequency: String
  furnishing: [String]
}

input ApplicantExternalAreaInput {
  type: String
  amountFrom: Int
  amountTo: Int
}

input ApplicantInternalAreaInput {
  type: String
  amount: Int
}

input ApplicantSourceInput {
  id: String
  type: String
}

input ApplicantRelateInput {
  associatedId: String
  associatedType: String
}

type Mutation {
  CreateApplicant(
    marketingMode: String
    active: Boolean
    notes: String
    lastCall: String
    nextCall: String
    departmentId: String
    solicitorId: String
    type: [String]
    style: [String]
    situation: [String]
    parking: [String]
    age: [String]
    locality: [String]
    bedroomsMin: Int
    bedroomsMax: Int
    receptionsMin: Int
    receptionsMax: Int
    bathroomsMin: Int
    bathroomsMax: Int
    locationType: String
    locationOptions: [String]
    buying: ApplicantBuyingInput
    renting:ApplicantRentingInput
    externalArea: ApplicantExternalAreaInput
    internalArea: ApplicantInternalAreaInput
    source: ApplicantSourceInput
    officeIds: [String]
    negotiatorIds: [String]
    related: [ApplicantRelateInput]
    metadata: JSON
  ): ApplicantModel!

  UpdateApplicant(
    marketingMode: String
    active: Boolean
    notes: String
    lastCall: String
    nextCall: String
    departmentId: String
    solicitorId: String
    type: [String]
    style: [String]
    situation: [String]
    parking: [String]
    age: [String]
    locality: [String]
    bedroomsMin: Int
    bedroomsMax: Int
    receptionsMin: Int
    receptionsMax: Int
    bathroomsMin: Int
    bathroomsMax: Int
    locationType: String
    locationOptions: [String]
    buying: ApplicantBuyingInput
    renting: ApplicantRentingInput
    externalArea: ApplicantExternalAreaInput
    internalArea: ApplicantInternalAreaInput
    source: ApplicantSourceInput
    officeIds: [String]
    negotiatorIds: [String]
    metadata: JSON
    id: String!
    _eTag: String!
  ): ApplicantModel!

  CreateApplicantRelationship(
    id: String!
    associatedId: String!
    associatedType: String!
    isMain: Boolean!
  ): ApplicantContactRelationshipModel
  DeleteApplicantRelationship(
    id: String!
    relationshipId: String!
  ): String!
}
