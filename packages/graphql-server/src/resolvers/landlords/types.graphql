type Query {
  GetLandlordById(id: String!, embed: [LandlordQueryEmbed]): LandlordModel!
  GetLandlords(
    pageSize: Int
    pageNumber: Int
    sortBy: String
    embed: [LandlordQueryEmbed]
    id: [String!]
    active: Boolean
    address: String
    name: String
    createdFrom: String
    createdTo: String
    metadata: [String!]
  ): PagedResultLandlordModel!
  GetLandlordRelationships(id: String!, pageSize: Int, pageNumber: Int): PagedResultLandlordRelationshipModel!
  GetLandlordRelationshipById(id: String!, relationshipId: String!): LandlordRelationshipModel!
}

type Mutation {
  UpdateLandlord(
    id: String!
    _eTag: String!
    active: Boolean
    solicitorId: String
    officeId: String
    source: LandLordSourceInput
    metadata: JSON
  ): LandlordModel!
  CreateLandlord(
    active: Boolean
    solicitorId: String
    officeId: String
    source: LandLordSourceInput
    related: [CreateLandlordRelatedModel!]
    metadata: JSON
  ): LandlordModel!
  CreateLandlordRelationship(
    id: String!
    associatedId: String
    associatedType: String
    isMain: Boolean
  ): LandlordRelationshipModel!
  DeleteLandlordRelationship(id: String!, relationshipId: String!): String
}

enum LandlordQueryEmbed {
  appointments
  documents
  office
  properties
  solicitor
  source
}

type EmbeddedLandlordModel {
  appointments: [AppointmentModel]
  documents: [DocumentModel]
  office: OfficeModel
  properties: [PropertyModel]
  solicitor: CompanyModel
  source: SourceModel
}

type LandlordModel {
  id: String
  created: String
  modified: String
  active: Boolean
  solicitorId: String
  officeId: String
  source: LandlordSourceModel
  related: [LandlordRelatedModel!]
  metadata: JSON
  _eTag: String
  _links: JSON
  _embedded: EmbeddedLandlordModel
}

type LandlordSourceModel {
  id: String
  type: String
}

type LandlordRelatedModel {
  id: String
  name: String
  title: String
  forename: String
  surname: String
  type: String
  homePhone: String
  workPhone: String
  mobilePhone: String
  email: String
  primaryAddress: LandlordRelatedPrimaryAddressModel
}

type LandlordRelatedPrimaryAddressModel {
  buildingName: String
  buildingNumber: String
  line1: String
  line2: String
  line3: String
  line4: String
  postcode: String
  countryId: String
}

type PagedResultLandlordModel {
  _embedded: [LandlordModel!]
  pageNumber: Int
  pageSize: Int
  pageCount: Int
  totalPageCount: Int
  totalCount: Int
  _links: JSON
}

type PagedResultLandlordRelationshipModel {
  _embedded: [LandlordRelationshipModel!]
  pageNumber: Int
  pageSize: Int
  pageCount: Int
  totalPageCount: Int
  totalCount: Int
  _links: JSON
}

type LandlordRelationshipModel {
  id: String
  landlordId: String
  created: String
  modified: String
  associatedType: String
  associatedId: String
  isMain: Boolean
  _links: JSON
  _embedded: JSON
}

input LandLordSourceInput {
  id: String
  type: String
}

input CreateLandlordRelatedModel {
  associatedId: String
  associatedType: String
}
