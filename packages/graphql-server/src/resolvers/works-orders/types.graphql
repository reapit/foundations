enum WorksOrdersEmbed {
  company
  documents
  negotiator
  property
  tenancy
  type
}

enum WorksOrdersStatus {
  pendingApproval
  pendingQuote
  raised
  raisedToChase
  landlordToComplete
  complete
  cancelled
}

input InputWorksOrderItem {
  notes: String!
  chargeTo: String!
  estimate: Float
  estimateType: String
  netAmount: Float
  vatAmount: Float
}

type WorksOrderItem {
  id: String
  worksOrderId: String
  created: String
  modified: String
  notes: String
  chargeTo: String
  estimate: Float
  estimateType: String
  netAmount: Float
  vatAmount: Float
  grossAmount: Float
  _eTag: String
  _links: JSON
  _embedded: JSON
}

type WorkOrder {
  id: String
  created: String
  modified: String
  companyId: String
  propertyId: String
  tenancyId: String
  negotiatorId: String
  typeId: String
  status: String
  description: String
  reporter: String
  booked: String
  required: String
  completed: String
  totalNetAmount: Float
  totalVatAmount: Float
  totalGrossAmount: Float
  metadata: JSON
  items: [WorksOrderItem]
  _eTag: String
  _links: JSON
  _embedded: JSON
}

type PagedResultWorksOrders {
  _embedded: [WorkOrder!]
  pageNumber: Int
  pageSize: Int
  pageCount: Int
  totalPageCount: Int
  totalCount: Int
  _links: JSON
}
type WorksOrderItem {
  id: String
  worksOrderId: String
  created: String
  modified: String
  notes: String
  chargeTo: String
  estimate: Float
  estimateType: String
  netAmount: Float
  vatAmount: Float
  grossAmount: Float
  _eTag: String
  _links: JSON
  _embedded: JSON
}

type PagedResultWorksOrderItem {
  _embedded: [WorksOrderItem!]
  pageNumber: Int
  pageSize: Int
  pageCount: Int
  totalPageCount: Int
  totalCount: Int
  _links: JSON
}

type Query {
  GetWorksOrders(
    pageSize: Int
    pageNumber: Int
    sortBy: String
    embed: [WorksOrdersEmbed]
    id: [String]
    companyId: [String]
    negotiatorId: [String]
    propertyId: [String]
    status: [WorksOrdersStatus]
    tenancyId: [String]
    typeId: [String]
    completedFrom: String
    completedTo: String
    createdFrom: String
    createdTo: String
    requiredFrom: String
    requiredTo: String
    metadata: JSON
  ): PagedResultWorksOrders!
  GetWorksOrdersById(embed: WorksOrdersEmbed, id: String!): WorkOrder!

  GetWorksOrderItems(pageNumber: Int, pageSize: Int, id: String!): PagedResultWorksOrderItem!

  GetWorksOrderItemById(itemId: String!, id: String!): WorksOrderItem!
}

type Mutation {
  DeleteWorksOrderItem(itemId: String!, id: String!): Boolean

  UpdateWorksOrderItem(
    notes: String
    chargeTo: String
    id: String!
    itemId: String!
    _eTag: String!
    estimate: Float
    estimateType: String
    netAmount: Float
    vatAmount: Float
  ): WorksOrderItem!

  CreateWorksOrderItem(
    notes: String!
    chargeTo: String!
    id: String!
    estimate: Float
    estimateType: String
    netAmount: Float
    vatAmount: Float
  ): WorksOrderItem!

  UpdateWorksOrder(
    propertyId: String
    negotiatorId: String
    typeId: String
    status: String
    description: String
    reporter: String
    companyId: String
    tenancyId: String
    booked: String
    required: String
    completed: String
    metadata: JSON
    _eTag: String!
    id: String!
  ): WorkOrder!

  CreateWorksOrder(
    propertyId: String!
    negotiatorId: String!
    typeId: String!
    status: String!
    description: String!
    reporter: String!
    items: [InputWorksOrderItem!]

    companyId: String
    tenancyId: String
    booked: String
    required: String
    completed: String
    metadata: JSON
  ): WorkOrder!
}
