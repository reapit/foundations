"""
An appointment attendee
"""
type AppointmentAttendeeModel {
  """
  The unique identifier of the attendee
  """
  id: String

  """
  The type of attendee
  """
  type: String

  """
  A collection of contacts relating to the attendee
  """
  contacts: [AppointmentContactModel!]
}

"""
A summarised view of the details of a contact associated to an appointment attendee
"""
type AppointmentContactModel {
  """
  The unique identifier of the contact
  """
  id: String

  """
  The name of the contact
  """
  name: String

  """
  The home phone number of the contact
  """
  homePhone: String

  """
  The work phone number of the contact
  """
  workPhone: String

  """
  The mobile phone number of the contact
  """
  mobilePhone: String

  """
  The email address of the contact
  """
  email: String
}

"""
Representation of a calendar appointment
"""
type AppointmentModel {
  """
  The unique identifier of the appointment
  """
  id: String

  """
  The date and time when the appointment was created
  """
  created: String

  """
  The date and time when the appointment was last modified
  """
  modified: String

  """
  The date and time when the appointment will start
  """
  start: String

  """
  The date and time when the appointment will end
  """
  end: String

  """
  The unique identifier of the appointment type
  """
  typeId: String

  """
  A free text description about the appointment
  """
  description: String

  """
  A flag denoting whether or not the appointment recurs
  """
  recurring: Boolean

  """
  A flag denoting whether or not the appointment has been cancelled
  """
  cancelled: Boolean

  """
  Follow up information relating to the appointment
  """
  followUp: AppointmentModel_followUp

  """
  The unique identifier of the property related to the appointment
  """
  propertyId: String

  """
  The unique identifier of the negotiator that organised the appointment
  """
  organiserId: String

  """
  A collection of unique identifiers of negotiators attached to the appointment
  """
  negotiatorIds: [String!]

  """
  A collection of unique identifiers of offices attached to the appointment
  """
  officeIds: [String!]

  """
  An appointment attendee
  """
  attendee: AppointmentAttendeeModel

  """
  A flag denoting whether or not the appointment will be accompanied by one or more negotiators
  """
  accompanied: Boolean

  """
  A flag denoting whether or not the main negotiator has confirmed their attendance
  """
  negotiatorConfirmed: Boolean

  """
  A flag denoting whether or not the attendee has confirmed their attendance
  """
  attendeeConfirmed: Boolean

  """
  A flag denoting whether or not the property and/or property's vendor has confirmed their attendance
  """
  propertyConfirmed: Boolean

  """
  App specific metadata that has been set against the appointment
  """
  metadata: JSON

  """
  The ETag for the current version of the appointment. Used for managing update concurrency
  """
  _eTag: String
  _links: JSON
  _embedded: JSON
}

"""
Follow up information relating to the appointment
"""
type AppointmentModel_followUp {
  """
  The date when the appointment should be followed up
  """
  due: String

  """
  The unique identifier of a pre-defined follow up response type
  """
  responseId: String

  """
  Free text internal follow up notes to be stored against the appointment
  """
  notes: String
}

"""
Request body used to create a new calendar appointment
"""
input CreateAppointmentModelInput {
  """
  The date and time when the appointment will start
  """
  start: String

  """
  The date and time when the appointment will end
  """
  end: String

  """
  The date when the appointment should be followed up
  """
  followUpOn: String

  """
  The unique identifier of the appointment type
  """
  typeId: String

  """
  A free text description about the appointment
  """
  description: String

  """
  The unique identifier of the negotiator that organised the appointment
  """
  organiserId: String

  """
  A collection of unique identifiers of negotiators attached to the appointment
  """
  negotiatorIds: [String!]

  """
  A collection of unique identifiers of offices attached to the appointment
  """
  officeIds: [String!]

  """
  Details of the external appointment attendee
  """
  attendee: CreateAppointmentModelInput_attendeeInput

  """
  The unique identifier of the property related to the appointment
  """
  propertyId: String

  """
  A flag denoting whether or not the appointment will be accompanied by one or more negotiators
  """
  accompanied: Boolean

  """
  A flag denoting whether or not the main negotiator has confirmed their attendance
  """
  negotiatorConfirmed: Boolean

  """
  A flag denoting whether or not the attendee has confirmed their attendance
  """
  attendeeConfirmed: Boolean

  """
  A flag denoting whether or not the property and/or property's vendor has confirmed their attendance
  """
  propertyConfirmed: Boolean

  """
  Details of the recurrence pattern for the appointment
  """
  recurrence: CreateAppointmentModelInput_recurrenceInput

  """
  App specific metadata to set against the appointment
  """
  metadata: JSON
}

"""
Details of the external appointment attendee
"""
input CreateAppointmentModelInput_attendeeInput {
  """
  The unique identifier of the attendee
  """
  id: String

  """
  The type of attendee (applicant/contact/landlord/tenant)
  """
  type: String
}

"""
Details of the recurrence pattern for the appointment
"""
input CreateAppointmentModelInput_recurrenceInput {
  """
  The numeric value denoting how often the appointment will recur
  """
  interval: Int

  """
  The type of unit that the `interval` applies to
  """
  type: String

  """
  The date and time when the recurrence will stop
  """
  until: String
}

scalar JSON

type Mutation {
  Create(model: CreateAppointmentModelInput): JSON!
  Update(id: String!, _eTag: String!(), model: UpdateAppointmentModelInput): JSON!
}

type PagedResult_AppointmentModel_ {
  _embedded: [AppointmentModel!]
  pageNumber: Int
  pageSize: Int
  pageCount: Int
  totalCount: Int
  _links: JSON
}

type Query {
  GetAppointments(
    PageSize: Int
    PageNumber: Int
    SortBy: String
    Id: [String!]
    TypeId: [String!]
    NegotiatorId: [String!]
    OfficeId: [String!]
    PropertyId: [String!]
    Start: String
    End: String
    IncludeCancelled: Boolean
    IncludeUnconfirmed: Boolean
  ): PagedResult_AppointmentModel_!
  GetAppointmentById(id: String!): AppointmentModel!
}

"""
Request body used to update an existing calendar appointment
"""
input UpdateAppointmentModelInput {
  """
  The date and time when the appointment will start
  """
  start: String

  """
  The date and time when the appointment will end
  """
  end: String

  """
  The date when the appointment should be followed up
  """
  followUpOn: String

  """
  The unique identifier of the appointment type
  """
  typeId: String

  """
  A free text description about the appointment
  """
  description: String

  """
  The unique identifier of the property related to the appointment
  """
  propertyId: String

  """
  The unique identifier of the negotiator that organised the appointment
  """
  organiserId: String

  """
  A flag denoting whether or not the appointment has been cancelled
  """
  cancelled: Boolean

  """
  A collection of unique identifiers of negotiators attached to the appointment
  """
  negotiatorIds: [String!]

  """
  A collection of unique identifiers of offices attached to the appointment
  """
  officeIds: [String!]

  """
  Details of the external appointment attendee
  """
  attendee: UpdateAppointmentModelInput_attendeeInput

  """
  A flag denoting whether or not the appointment will be accompanied by one or more negotiators
  """
  accompanied: Boolean

  """
  A flag denoting whether or not the main negotiator has confirmed their attendance
  """
  negotiatorConfirmed: Boolean

  """
  A flag denoting whether or not the attendee has confirmed their attendance
  """
  attendeeConfirmed: Boolean

  """
  A flag denoting whether or not the property and/or property's vendor has confirmed their attendance
  """
  propertyConfirmed: Boolean

  """
  Details added when the appointment has been followed up
  """
  followUp: UpdateAppointmentModelInput_followUpInput

  """
  Details of the recurrence pattern for the appointment
  """
  recurrence: UpdateAppointmentModelInput_recurrenceInput

  """
  App specific metadata to set against the appointment
  """
  metadata: JSON
}

"""
Details of the external appointment attendee
"""
input UpdateAppointmentModelInput_attendeeInput {
  """
  The unique identifier of the attendee
  """
  id: String

  """
  The type of attendee (applicant/contact/landlord/tenant)
  """
  type: String

  """
  A flag denoting whether or not the attendee has confirmed their attendance
  """
  confirmed: Boolean
}

"""
Details added when the appointment has been followed up
"""
input UpdateAppointmentModelInput_followUpInput {
  """
  The unique identifier of a pre-defined follow up response type
  """
  responseId: String

  """
  The internal follow up notes to be stored against the appointment
  """
  notes: String
}

"""
Details of the recurrence pattern for the appointment
"""
input UpdateAppointmentModelInput_recurrenceInput {
  """
  The type of unit that the `interval` applies to
  """
  type: String

  """
  The numeric value denoting how often the appointment will recur
  """
  interval: Int

  """
  The date and time when the recurrence will stop
  """
  until: String
}
