// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Page Offices Component Offices should match a snapshot 1`] = `
<BrowserRouter>
  <Router
    history={
      Object {
        "action": "POP",
        "block": [Function],
        "createHref": [Function],
        "go": [Function],
        "goBack": [Function],
        "goForward": [Function],
        "length": 1,
        "listen": [Function],
        "location": Object {
          "hash": "",
          "pathname": "/",
          "search": "",
        },
        "push": [Function],
        "replace": [Function],
      }
    }
  >
    <MockedProvider
      addTypename={true}
      mocks={Array []}
    >
      <ApolloProvider
        client={
          ApolloClient {
            "cache": InMemoryCache {
              "addTypename": true,
              "cacheKeyRoot": KeyTrie {
                "weakness": true,
              },
              "config": Object {
                "addTypename": true,
                "dataIdFromObject": [Function],
                "fragmentMatcher": HeuristicFragmentMatcher {},
                "freezeResults": false,
                "resultCaching": true,
              },
              "data": DepTrackingCache {
                "data": Object {},
                "depend": [Function],
              },
              "maybeBroadcastWatch": [Function],
              "optimisticData": DepTrackingCache {
                "data": Object {},
                "depend": [Function],
              },
              "silenceBroadcast": false,
              "storeReader": StoreReader {
                "executeSelectionSet": [Function],
                "executeStoreQuery": [Function],
                "executeSubSelectedArray": [Function],
                "freezeResults": false,
              },
              "storeWriter": StoreWriter {},
              "typenameDocumentCache": Map {},
              "watches": Set {},
            },
            "clearStoreCallbacks": Array [],
            "defaultOptions": Object {},
            "disableNetworkFetches": false,
            "link": MockLink {
              "addTypename": true,
              "mockedResponsesByKey": Object {},
            },
            "localState": LocalState {
              "cache": InMemoryCache {
                "addTypename": true,
                "cacheKeyRoot": KeyTrie {
                  "weakness": true,
                },
                "config": Object {
                  "addTypename": true,
                  "dataIdFromObject": [Function],
                  "fragmentMatcher": HeuristicFragmentMatcher {},
                  "freezeResults": false,
                  "resultCaching": true,
                },
                "data": DepTrackingCache {
                  "data": Object {},
                  "depend": [Function],
                },
                "maybeBroadcastWatch": [Function],
                "optimisticData": DepTrackingCache {
                  "data": Object {},
                  "depend": [Function],
                },
                "silenceBroadcast": false,
                "storeReader": StoreReader {
                  "executeSelectionSet": [Function],
                  "executeStoreQuery": [Function],
                  "executeSubSelectedArray": [Function],
                  "freezeResults": false,
                },
                "storeWriter": StoreWriter {},
                "typenameDocumentCache": Map {},
                "watches": Set {},
              },
              "client": [Circular],
            },
            "mutate": [Function],
            "query": [Function],
            "queryDeduplication": true,
            "queryManager": QueryManager {
              "assumeImmutableResults": false,
              "clientAwareness": Object {
                "name": undefined,
                "version": undefined,
              },
              "dataStore": DataStore {
                "cache": InMemoryCache {
                  "addTypename": true,
                  "cacheKeyRoot": KeyTrie {
                    "weakness": true,
                  },
                  "config": Object {
                    "addTypename": true,
                    "dataIdFromObject": [Function],
                    "fragmentMatcher": HeuristicFragmentMatcher {},
                    "freezeResults": false,
                    "resultCaching": true,
                  },
                  "data": DepTrackingCache {
                    "data": Object {},
                    "depend": [Function],
                  },
                  "maybeBroadcastWatch": [Function],
                  "optimisticData": DepTrackingCache {
                    "data": Object {},
                    "depend": [Function],
                  },
                  "silenceBroadcast": false,
                  "storeReader": StoreReader {
                    "executeSelectionSet": [Function],
                    "executeStoreQuery": [Function],
                    "executeSubSelectedArray": [Function],
                    "freezeResults": false,
                  },
                  "storeWriter": StoreWriter {},
                  "typenameDocumentCache": Map {},
                  "watches": Set {},
                },
              },
              "fetchQueryRejectFns": Map {},
              "idCounter": 1,
              "inFlightLinkObservables": Map {},
              "link": MockLink {
                "addTypename": true,
                "mockedResponsesByKey": Object {},
              },
              "localState": LocalState {
                "cache": InMemoryCache {
                  "addTypename": true,
                  "cacheKeyRoot": KeyTrie {
                    "weakness": true,
                  },
                  "config": Object {
                    "addTypename": true,
                    "dataIdFromObject": [Function],
                    "fragmentMatcher": HeuristicFragmentMatcher {},
                    "freezeResults": false,
                    "resultCaching": true,
                  },
                  "data": DepTrackingCache {
                    "data": Object {},
                    "depend": [Function],
                  },
                  "maybeBroadcastWatch": [Function],
                  "optimisticData": DepTrackingCache {
                    "data": Object {},
                    "depend": [Function],
                  },
                  "silenceBroadcast": false,
                  "storeReader": StoreReader {
                    "executeSelectionSet": [Function],
                    "executeStoreQuery": [Function],
                    "executeSubSelectedArray": [Function],
                    "freezeResults": false,
                  },
                  "storeWriter": StoreWriter {},
                  "typenameDocumentCache": Map {},
                  "watches": Set {},
                },
                "client": [Circular],
              },
              "mutationStore": MutationStore {
                "store": Object {},
              },
              "onBroadcast": [Function],
              "pollingInfoByQueryId": Map {},
              "queries": Map {},
              "queryDeduplication": true,
              "queryStore": QueryStore {
                "store": Object {},
              },
              "ssrMode": false,
              "transformCache": WeakMap {},
            },
            "reFetchObservableQueries": [Function],
            "resetStore": [Function],
            "resetStoreCallbacks": Array [],
            "store": DataStore {
              "cache": InMemoryCache {
                "addTypename": true,
                "cacheKeyRoot": KeyTrie {
                  "weakness": true,
                },
                "config": Object {
                  "addTypename": true,
                  "dataIdFromObject": [Function],
                  "fragmentMatcher": HeuristicFragmentMatcher {},
                  "freezeResults": false,
                  "resultCaching": true,
                },
                "data": DepTrackingCache {
                  "data": Object {},
                  "depend": [Function],
                },
                "maybeBroadcastWatch": [Function],
                "optimisticData": DepTrackingCache {
                  "data": Object {},
                  "depend": [Function],
                },
                "silenceBroadcast": false,
                "storeReader": StoreReader {
                  "executeSelectionSet": [Function],
                  "executeStoreQuery": [Function],
                  "executeSubSelectedArray": [Function],
                  "freezeResults": false,
                },
                "storeWriter": StoreWriter {},
                "typenameDocumentCache": Map {},
                "watches": Set {},
              },
            },
            "typeDefs": undefined,
            "version": "2.6.8",
            "watchQuery": [Function],
          }
        }
      >
        <Component>
          <Component
            hasBackground={true}
            hasPadding={true}
          >
            <div
              className="container-flex   has-background has-padding  "
            >
              <Component
                flexColumn={true}
                hasBackground={true}
                hasPadding={true}
              >
                <div
                  className="container is-column  has-background has-padding  "
                >
                  <Component>
                    <h3
                      className="title is-3  "
                      id=""
                    />
                  </Component>
                  <Component
                    tabConfigs={
                      Array [
                        Object {
                          "Component": [Function],
                          "active": false,
                          "displayText": "Offices",
                          "onTabClick": [Function],
                          "path": "/offices/",
                          "tabIdentifier": "offices",
                        },
                        Object {
                          "Component": [Function],
                          "active": false,
                          "displayText": "Areas",
                          "onTabClick": [Function],
                          "path": "/offices/areas",
                          "tabIdentifier": "areas",
                        },
                        Object {
                          "Component": [Function],
                          "active": false,
                          "displayText": "Global Settings",
                          "onTabClick": [Function],
                          "path": "/offices/globalsettings",
                          "tabIdentifier": "globalSettings",
                        },
                        Object {
                          "Component": [Function],
                          "active": false,
                          "displayText": "Integrations",
                          "onTabClick": [Function],
                          "path": "/offices/integrations",
                          "tabIdentifier": "integrations",
                        },
                      ]
                    }
                  >
                    <div
                      className="tabs is-fullwidth"
                      role="tablist"
                    >
                      <ul>
                        <li
                          className=""
                          key="offices"
                        >
                          <a
                            aria-controls="offices"
                            aria-selected={false}
                            id="offices"
                            onClick={[Function]}
                            role="tab"
                          >
                            Offices
                          </a>
                        </li>
                        <li
                          className=""
                          key="areas"
                        >
                          <a
                            aria-controls="areas"
                            aria-selected={false}
                            id="areas"
                            onClick={[Function]}
                            role="tab"
                          >
                            Areas
                          </a>
                        </li>
                        <li
                          className=""
                          key="globalSettings"
                        >
                          <a
                            aria-controls="globalSettings"
                            aria-selected={false}
                            id="globalSettings"
                            onClick={[Function]}
                            role="tab"
                          >
                            Global Settings
                          </a>
                        </li>
                        <li
                          className=""
                          key="integrations"
                        >
                          <a
                            aria-controls="integrations"
                            aria-selected={false}
                            id="integrations"
                            onClick={[Function]}
                            role="tab"
                          >
                            Integrations
                          </a>
                        </li>
                      </ul>
                    </div>
                  </Component>
                  <Route
                    component={[Function]}
                    exact={true}
                    key="offices"
                    path="/offices/"
                  />
                  <Route
                    component={[Function]}
                    exact={true}
                    key="areas"
                    path="/offices/areas"
                  />
                  <Route
                    component={[Function]}
                    exact={true}
                    key="globalSettings"
                    path="/offices/globalsettings"
                  />
                  <Route
                    component={[Function]}
                    exact={true}
                    key="integrations"
                    path="/offices/integrations"
                  />
                </div>
              </Component>
            </div>
          </Component>
        </Component>
      </ApolloProvider>
    </MockedProvider>
  </Router>
</BrowserRouter>
`;
