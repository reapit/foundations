{"version":3,"file":"index-C-7jX_Sk.js","sources":["../../src/components/iaas/pipeline-row.tsx","../../src/components/iaas/index.tsx"],"sourcesContent":["import React, { Dispatch, FC, SetStateAction, useState } from 'react'\nimport { buildStatusToIntent, buildStatusToReadable, pipelineViewable } from '@reapit/utils-common'\nimport Routes from '../../constants/routes'\nimport {\n  Button,\n  ButtonGroup,\n  FlexContainer,\n  StatusIndicator,\n  TableCell,\n  TableExpandableRow,\n  TableExpandableRowTriggerCell,\n  TableRow,\n  TableRowContainer,\n} from '@reapit/elements'\nimport { useNavigate } from 'react-router'\nimport { navigateRoute, openNewPage } from '../../utils/navigation'\nimport { PipelineModelInterface } from '@reapit/foundations-ts-definitions'\nimport { ReapitConnectSession } from '@reapit/connect-session'\nimport { useChannel, useEvent } from '@harelpls/use-pusher'\nimport { handlePipelineEvent } from '../apps/page/pusher-event-wrapper'\n\ninterface PipelineRowProps {\n  pipeline: PipelineModelInterface\n  connectSession: ReapitConnectSession\n}\n\nexport const PipelineRow: FC<PipelineRowProps> = ({ pipeline, connectSession }) => {\n  const navigate = useNavigate()\n  const [appPipeline, setAppPipeline] = useState<PipelineModelInterface>(pipeline)\n  const [isOpen, setIsOpen] = useState<boolean>(false)\n\n  const channel = useChannel(`private-${connectSession?.loginIdentity.developerId}`)\n  useEvent(\n    channel,\n    'pipeline-update',\n    handlePipelineEvent(\n      appPipeline,\n      setAppPipeline as Dispatch<SetStateAction<PipelineModelInterface | null>>,\n      pipeline.id ?? null,\n    ),\n  )\n\n  return (\n    <TableRowContainer>\n      <TableRow>\n        <TableCell>{appPipeline.name}</TableCell>\n        <TableCell>\n          <StatusIndicator intent={buildStatusToIntent(appPipeline.buildStatus as string)} />\n          {buildStatusToReadable(appPipeline.buildStatus as string)}\n        </TableCell>\n        <TableCell>\n          <a target=\"_blank\" href={appPipeline.repository?.repositoryUrl} rel=\"noreferrer\">\n            {appPipeline.repository?.repositoryUrl}\n          </a>\n        </TableCell>\n        <TableExpandableRowTriggerCell\n          isOpen={isOpen}\n          onClick={() => setIsOpen(!isOpen)}\n        ></TableExpandableRowTriggerCell>\n      </TableRow>\n      <TableExpandableRow isOpen={isOpen}>\n        <FlexContainer isFlexAlignCenter isFlexJustifyCenter>\n          <ButtonGroup>\n            <Button\n              intent=\"primary\"\n              onClick={navigateRoute(\n                navigate,\n                Routes.APP_PIPELINE_CONFIGURE.replace(':appId', appPipeline.appId as string),\n              )}\n            >\n              Configure\n            </Button>\n            <Button\n              intent=\"primary\"\n              onClick={navigateRoute(navigate, Routes.APP_PIPELINE.replace(':appId', appPipeline.appId as string))}\n            >\n              Deployments\n            </Button>\n            {pipelineViewable(appPipeline.buildStatus as string) && (\n              <Button intent=\"default\" onClick={openNewPage(`https://${appPipeline.subDomain}.iaas.paas.reapit.cloud`)}>\n                View App\n              </Button>\n            )}\n          </ButtonGroup>\n        </FlexContainer>\n      </TableExpandableRow>\n    </TableRowContainer>\n  )\n}\n","import { URLS } from '../../constants/api'\nimport { reapitConnectBrowserSession } from '../../core/connect-session'\nimport { PusherProvider } from '@harelpls/use-pusher'\nimport { useReapitConnect } from '@reapit/connect-session'\nimport {\n  SmallText,\n  Button,\n  elMt6,\n  Icon,\n  Loader,\n  PageContainer,\n  Pagination,\n  SecondaryNavContainer,\n  Table,\n  TableHeader,\n  TableHeadersRow,\n  Title,\n  elMb5,\n  FlexContainer,\n} from '@reapit/elements'\nimport { PipelineModelInterface } from '@reapit/foundations-ts-definitions'\nimport { GetActionNames, getActions } from '@reapit/use-reapit-data'\nimport { useReapitGet } from '@reapit/use-reapit-data'\nimport React, { FC, useState } from 'react'\nimport ErrorBoundary from '../../core/error-boundary'\nimport { useGlobalState } from '../../core/use-global-state'\nimport { ExternalPages, openNewPage } from '../../utils/navigation'\nimport { PipelineRow } from './pipeline-row'\n\ntype Pagination<T> = {\n  items: Array<T>\n  meta: {\n    currentPage: number\n    itemCount: number\n    itemsPerPage: number\n    totalItems: number\n    totalPages: number\n  }\n}\n\nexport const IaaS: FC = () => {\n  const { connectSession } = useReapitConnect(reapitConnectBrowserSession)\n  const [page, setPage] = useState<number>(1)\n  const { globalDataState } = useGlobalState()\n  const { currentDeveloper } = globalDataState\n\n  const developerId = currentDeveloper?.id\n  const developerQuery = developerId ? { developerId } : {}\n\n  const [pipelines, loading] = useReapitGet<Pagination<PipelineModelInterface>>({\n    reapitConnectBrowserSession,\n    action: getActions[GetActionNames.paginatePipeline],\n    headers: {\n      Authorization: `Bearer ${connectSession?.idToken}`,\n    },\n    fetchWhenTrue: [connectSession?.idToken],\n    queryParams: {\n      ...developerQuery,\n      page,\n    },\n  })\n\n  if (!connectSession) return null\n\n  return (\n    <FlexContainer>\n      <SecondaryNavContainer>\n        <Icon className={elMb5} iconSize=\"large\" icon=\"webDeveloperInfographic\" />\n        <SmallText hasGreyText>\n          Infrastructure as a Service management. Pipelines are for deploying your Reapit apps to our infrastructure to\n          simplify your development process\n        </SmallText>\n        <Button intent=\"default\" onClick={openNewPage(ExternalPages.pipelineDocs)}>\n          View Docs\n        </Button>\n      </SecondaryNavContainer>\n      <PageContainer>\n        <ErrorBoundary>\n          <PusherProvider\n            cluster=\"eu\"\n            clientKey={process.env.PUSHER_KEY}\n            authEndpoint={`${URLS.DEPLOYMENT_SERVICE_HOST}pusher/auth`}\n            auth={{\n              headers: {\n                Authorization: `Bearer ${connectSession?.idToken}`,\n              },\n            }}\n          >\n            <Title>Pipelines</Title>\n            {loading || !currentDeveloper ? (\n              <Loader />\n            ) : (\n              <>\n                <Table data-has-expandable-action data-num-columns-excl-action-col=\"3\">\n                  <TableHeadersRow>\n                    <TableHeader>Name</TableHeader>\n                    <TableHeader>Status</TableHeader>\n                    <TableHeader>Repository</TableHeader>\n                    <TableHeader></TableHeader>\n                  </TableHeadersRow>\n                  {pipelines?.items?.map((pipeline) => (\n                    <PipelineRow connectSession={connectSession} pipeline={pipeline} key={pipeline.id} />\n                  ))}\n                </Table>\n                <div className={elMt6}>\n                  {pipelines && (\n                    <Pagination\n                      currentPage={pipelines.meta.currentPage}\n                      numberPages={pipelines.meta.totalPages}\n                      callback={setPage}\n                    />\n                  )}\n                </div>\n              </>\n            )}\n          </PusherProvider>\n        </ErrorBoundary>\n      </PageContainer>\n    </FlexContainer>\n  )\n}\n\nexport default IaaS\n"],"names":["PipelineRow","pipeline","connectSession","navigate","useNavigate","appPipeline","setAppPipeline","useState","isOpen","setIsOpen","channel","useChannel","useEvent","handlePipelineEvent","TableRowContainer","jsxs","TableRow","jsx","TableCell","StatusIndicator","buildStatusToIntent","buildStatusToReadable","TableExpandableRowTriggerCell","TableExpandableRow","FlexContainer","ButtonGroup","Button","navigateRoute","Routes","pipelineViewable","openNewPage","define_process_env_default"],"mappings":"6aA0BO,MAAMA,EAAoC,CAAC,CAAE,SAAAC,EAAU,eAAAC,KAAqB,CACjF,MAAMC,EAAWC,IACX,CAACC,EAAaC,CAAc,EAAIC,WAAiCN,CAAQ,EACzE,CAACO,EAAQC,CAAS,EAAIF,WAAkB,EAAK,EAE7CG,EAAUC,EAAW,WAAWT,GAAgB,cAAc,WAAW,EAAE,EACjF,OAAAU,EACEF,EACA,kBACAG,EACER,EACAC,EACAL,EAAS,IAAM,IACjB,CAAA,SAICa,EACC,CAAA,SAAA,CAAAC,OAACC,EACC,CAAA,SAAA,CAACC,EAAAA,IAAAC,EAAA,CAAW,WAAY,IAAK,CAAA,SAC5BA,EACC,CAAA,SAAA,CAAAD,EAAA,IAACE,EAAgB,CAAA,OAAQC,EAAoBf,EAAY,WAAqB,EAAG,EAChFgB,EAAsBhB,EAAY,WAAqB,CAAA,EAC1D,EACCY,MAAAC,EAAA,CACC,SAACD,EAAAA,IAAA,IAAA,CAAE,OAAO,SAAS,KAAMZ,EAAY,YAAY,cAAe,IAAI,aACjE,SAAYA,EAAA,YAAY,aAC3B,CAAA,EACF,EACAY,EAAA,IAACK,EAAA,CACC,OAAAd,EACA,QAAS,IAAMC,EAAU,CAACD,CAAM,CAAA,CACjC,CAAA,EACH,EACAS,EAAA,IAACM,EAAmB,CAAA,OAAAf,EAClB,SAACS,EAAAA,IAAAO,EAAA,CAAc,kBAAiB,GAAC,oBAAmB,GAClD,SAAAT,EAAAA,KAACU,EACC,CAAA,SAAA,CAAAR,EAAA,IAACS,EAAA,CACC,OAAO,UACP,QAASC,EACPxB,EACAyB,EAAO,uBAAuB,QAAQ,SAAUvB,EAAY,KAAe,CAC7E,EACD,SAAA,WAAA,CAED,EACAY,EAAA,IAACS,EAAA,CACC,OAAO,UACP,QAASC,EAAcxB,EAAUyB,EAAO,aAAa,QAAQ,SAAUvB,EAAY,KAAe,CAAC,EACpG,SAAA,aAAA,CAED,EACCwB,EAAiBxB,EAAY,WAAqB,SAChDqB,EAAO,CAAA,OAAO,UAAU,QAASI,EAAY,WAAWzB,EAAY,SAAS,yBAAyB,EAAG,SAE1G,WAAA,CAAA,CAEJ,CAAA,CACF,CAAA,EACF,CACF,CAAA,CAAA,CAEJ,ECtBM,IAAA0B,GAAA,CAAA,qBAAA,UAAA,GAAA,gBAAA,4BAAA,gBAAA,wCAAA,kBAAA,sBAAA,aAAA,uCAAA,eAAA,iDAAA,eAAA,yCAAA,4BAAA,kDAAA,gBAAA,uFAAA,kBAAA,CAAA,sCAAA,EAAA,YAAA,mEAAA,WAAA,gDAAA,uBAAA,wDAAA,WAAA,iFAAA,wBAAA,6CAAA,WAAA,uBAAA,WAAA,sFAAA,kBAAA,CAAA,sCAAA,EAAA,iBAAA,CAAA,sCAAA"}