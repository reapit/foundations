{"version":3,"file":"index-IKDHySLA.js","sources":["../../../utils-common/src/query-params/index.ts","../../src/components/register/invite/index.tsx"],"sourcesContent":["export const setQueryParams = (params: Object) => {\n  if (!Object.keys(params).length) return ''\n  return Object.keys(params)\n    .filter((key) => params[key] !== undefined && params[key] !== null && params[key] !== '')\n    .map((key) => {\n      if (Array.isArray(params[key])) {\n        return params[key].map((value: any) => `${key}=${value}`).join('&')\n      }\n      return `${key}=${params[key]}`\n    })\n    .join('&')\n}\n\nexport const getParamsFromPath = (search: string) => {\n  const output = {} as Record<string, any>\n  const params = new URLSearchParams(search)\n\n  params.forEach((value, key) => {\n    if (key === 'page') {\n      const pageParam = Number(value)\n      return (output.page = !isNaN(pageParam) && pageParam > 0 ? pageParam : 1)\n    }\n    output[key] = value || ''\n  })\n\n  return output\n}\n","import React, { Dispatch, FC, MouseEvent, SetStateAction, useState } from 'react'\nimport { useNavigate, useLocation } from 'react-router'\nimport { AcceptInviteModel } from '@reapit/foundations-ts-definitions'\nimport { getParamsFromPath, letterNumberSpaceRegex, personNameRegex } from '@reapit/utils-common'\nimport { useForm } from 'react-hook-form'\nimport { BodyText, ButtonGroup, Button, FormLayout, InputWrap, InputGroup, useSnack, Modal } from '@reapit/elements'\nimport { yupResolver } from '@hookform/resolvers/yup'\nimport Routes from '../../../constants/routes'\nimport { object, string } from 'yup'\nimport errorMessages from '../../../constants/error-messages'\nimport { acceptInviteService, rejectInviteService } from '../../../services/developer'\nimport { specialCharsTest } from '../../../utils/yup'\nimport { navigateRoute } from '../../../utils/navigation'\n\nconst { FIELD_REQUIRED, MAXIMUM_CHARACTER_LENGTH } = errorMessages\n\nexport type InviteState = 'DEFAULT' | 'LOADING' | 'ACCEPT_SUCCESS' | 'REJECT_SUCCESS'\n\nexport const validationSchema = object().shape({\n  name: string()\n    .trim()\n    .required(FIELD_REQUIRED)\n    .matches(personNameRegex, 'Full name is not valid')\n    .max(256, MAXIMUM_CHARACTER_LENGTH(256))\n    .test(specialCharsTest),\n\n  jobTitle: string()\n    .trim()\n    .required(FIELD_REQUIRED)\n    .matches(letterNumberSpaceRegex, 'Job title is not valid')\n    .max(256, MAXIMUM_CHARACTER_LENGTH(256))\n    .test(specialCharsTest),\n})\n\nexport const handleAccept =\n  (\n    error: (message: string) => void,\n    setInviteState: Dispatch<SetStateAction<InviteState>>,\n    developerId?: string,\n    memberId?: string,\n  ) =>\n  async (values: AcceptInviteModel) => {\n    if (!developerId || !memberId) return\n\n    setInviteState('LOADING')\n\n    const response = await acceptInviteService(values, developerId, memberId)\n\n    if (typeof response === 'string') {\n      error(response)\n      setInviteState('DEFAULT')\n    } else {\n      setInviteState('ACCEPT_SUCCESS')\n    }\n  }\n\nexport const handleReject =\n  (\n    error: (message: string) => void,\n    setInviteState: Dispatch<SetStateAction<InviteState>>,\n    developerId?: string,\n    memberId?: string,\n  ) =>\n  async (event: MouseEvent<HTMLButtonElement>) => {\n    event.preventDefault()\n    event.stopPropagation()\n    if (!developerId || !memberId) return\n\n    setInviteState('LOADING')\n\n    const response = await rejectInviteService(developerId, memberId)\n\n    if (typeof response === 'string') {\n      error(response)\n      setInviteState('DEFAULT')\n    } else {\n      setInviteState('REJECT_SUCCESS')\n    }\n  }\n\nexport const Invite: FC = () => {\n  const location = useLocation()\n  const navigate = useNavigate()\n  const { error } = useSnack()\n  const [inviteState, setInviteState] = useState<InviteState>('DEFAULT')\n  const queryParams = getParamsFromPath(location.search)\n  const { developerId, memberId, memberName: name, memberJobTitle: jobTitle, organisationName: company } = queryParams\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm<AcceptInviteModel>({\n    resolver: yupResolver(validationSchema),\n    defaultValues: {\n      name,\n      jobTitle,\n    },\n  })\n\n  const onSubmit = handleSubmit(handleAccept(error, setInviteState, developerId, memberId))\n  const onReject = handleReject(error, setInviteState, developerId, memberId)\n  const isLoading = inviteState === 'LOADING'\n  const title =\n    inviteState === 'ACCEPT_SUCCESS'\n      ? 'Invite Accepted'\n      : inviteState === 'REJECT_SUCCESS'\n        ? 'Invite Rejected'\n        : 'Reapit Foundations Invitation'\n\n  return (\n    <Modal title={title} isOpen={true} onModalClose={console.log}>\n      {!inviteState.includes('SUCCESS') && (\n        <>\n          <BodyText>\n            You have been invited to join the &apos;{company}&apos; organisation on Reapit Foundations.\n          </BodyText>\n          <BodyText>Before confirming your account, please ensure your details are correct below.</BodyText>\n          <BodyText>\n            <strong>Important: </strong>If you already have an account and confirm this invitation, any data on your\n            existing account will no longer be available.\n          </BodyText>\n          <form onSubmit={onSubmit}>\n            <FormLayout hasMargin>\n              <InputWrap>\n                <InputGroup\n                  {...register('name')}\n                  label=\"Name\"\n                  errorMessage={errors.name?.message}\n                  icon={errors.name?.message ? 'asterisk' : null}\n                  intent=\"danger\"\n                />\n              </InputWrap>\n              <InputWrap>\n                <InputGroup\n                  {...register('jobTitle')}\n                  label=\"Job Title\"\n                  errorMessage={errors.jobTitle?.message}\n                  icon={errors.jobTitle?.message ? 'asterisk' : null}\n                  intent=\"danger\"\n                />\n              </InputWrap>\n            </FormLayout>\n            <ButtonGroup alignment=\"right\">\n              <Button\n                fixedWidth\n                intent=\"danger\"\n                loading={isLoading}\n                disabled={isLoading}\n                type=\"button\"\n                onClick={onReject}\n              >\n                Decline\n              </Button>\n              <Button intent=\"primary\" loading={isLoading} disabled={isLoading} type=\"submit\">\n                Confirm\n              </Button>\n            </ButtonGroup>\n          </form>\n        </>\n      )}\n      {inviteState === 'ACCEPT_SUCCESS' && (\n        <>\n          <BodyText>Thank you for confirming your invite to Reapit Foundations.</BodyText>\n          <BodyText>\n            If you already had a Developer account, you can use your existing credentials to login to the Developers\n            Portal. If not, you will shortly receive an email with instructions on setting up your login credentials.\n          </BodyText>\n          <ButtonGroup alignment=\"right\">\n            <Button intent=\"primary\" onClick={navigateRoute(navigate, Routes.LOGIN)}>\n              Login\n            </Button>\n          </ButtonGroup>\n        </>\n      )}\n      {inviteState === 'REJECT_SUCCESS' && (\n        <BodyText>You have successfully declined the invitation to Reapit Foundations.</BodyText>\n      )}\n    </Modal>\n  )\n}\n\nexport default Invite\n"],"names":["getParamsFromPath","search","output","value","key","pageParam","FIELD_REQUIRED","MAXIMUM_CHARACTER_LENGTH","errorMessages","validationSchema","object","string","personNameRegex","specialCharsTest","letterNumberSpaceRegex","handleAccept","error","setInviteState","developerId","memberId","values","response","acceptInviteService","handleReject","event","rejectInviteService","Invite","location","useLocation","navigate","useNavigate","useSnack","inviteState","useState","queryParams","name","jobTitle","company","register","handleSubmit","errors","useForm","yupResolver","onSubmit","onReject","isLoading","title","Modal","jsxs","Fragment","BodyText","jsx","FormLayout","InputWrap","InputGroup","ButtonGroup","Button","navigateRoute","Routes"],"mappings":"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"}