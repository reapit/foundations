{"version":3,"file":"customer-register-B3LS0GSW.js","sources":["../../src/components/register/customer-register.tsx"],"sourcesContent":["import React, { FC, useState, Dispatch, SetStateAction } from 'react'\nimport { Subtitle, BodyText, Button, FlexContainer, ButtonGroup, Icon, elMb7 } from '@reapit/elements'\nimport Routes from '../../constants/routes'\nimport { LoginContainer, LoginContentWrapper } from '../login/__styles__'\nimport { reapitConnectBrowserSession } from '../../core/connect-session'\nimport { ReapitConnectSession, useReapitConnect } from '@reapit/connect-session'\nimport { selectDeveloperId, selectIsCustomer, selectIsUserAdmin } from '../../utils/auth'\nimport { UpdateActionNames, updateActions, SendFunction, useReapitUpdate } from '@reapit/use-reapit-data'\nimport { ExternalPages, openNewPage } from '../../utils/navigation'\nimport { CreateDeveloperModel, UpdateCustomerModel } from '@reapit/foundations-ts-definitions'\nimport TermsAndConditionsModal from './terms-and-conditions-modal'\nimport dayjs from 'dayjs'\n\nexport const handleCreateAccount =\n  (\n    updateCustomer: SendFunction<UpdateCustomerModel, boolean | null>,\n    createDeveloper: SendFunction<CreateDeveloperModel, boolean | null>,\n    connectSession: ReapitConnectSession | null,\n  ) =>\n  () => {\n    const registerCustomer = async () => {\n      if (!connectSession) return\n\n      const { loginIdentity } = connectSession\n\n      const customer = await updateCustomer({\n        accountApprovedEmail: loginIdentity.email ?? '',\n        accountApproved: dayjs().format('YYYY-MM-DDTHH:mm:ssZ'),\n      })\n\n      if (!customer) return\n\n      const developer = await createDeveloper({\n        name: loginIdentity.name ?? '',\n        companyName: loginIdentity.orgName ?? '',\n        email: loginIdentity.email ?? '',\n        agreedTerms: dayjs().format('YYYY-MM-DDTHH:mm:ssZ'),\n      })\n\n      if (developer) {\n        window.location.href = `${process.env.connectOAuthUrl}/authorize?response_type=code&client_id=${process.env.connectClientId}&redirect_uri=${window.location.origin}${Routes.APPS}&state=${Routes.SETTINGS_COMPANY}`\n      }\n    }\n    registerCustomer().catch((error) => console.error(error))\n  }\n\nexport const handleSetModal =\n  (termsModalVisible: boolean, setTermsModalVisible: Dispatch<SetStateAction<boolean>>) => () => {\n    setTermsModalVisible(termsModalVisible)\n  }\n\nexport const CustomerRegister: FC = () => {\n  const [termsModalVisible, setTermsModalVisible] = useState<boolean>(false)\n  const { connectSession } = useReapitConnect(reapitConnectBrowserSession)\n  const orgName = connectSession?.loginIdentity.orgName ?? ''\n  const hasDeveloperOrg = Boolean(selectDeveloperId(connectSession))\n  const isCustomerAdmin = selectIsUserAdmin(connectSession)\n  const isCustomer = selectIsCustomer(connectSession)\n\n  const [updatingCustomer, , updateCustomer] = useReapitUpdate<UpdateCustomerModel, null>({\n    method: 'PUT',\n    reapitConnectBrowserSession,\n    action: updateActions[UpdateActionNames.updateCustomer],\n    uriParams: {\n      customerId: connectSession?.loginIdentity.orgId,\n    },\n  })\n\n  const [creatingDeveloper, , createDeveloper] = useReapitUpdate<CreateDeveloperModel, null>({\n    method: 'POST',\n    reapitConnectBrowserSession,\n    action: updateActions[UpdateActionNames.createDeveloper],\n  })\n\n  return (\n    <LoginContainer>\n      <LoginContentWrapper>\n        <Icon className={elMb7} height=\"40px\" width=\"200px\" icon=\"reapitLogo\" />\n        <FlexContainer isFlexColumn>\n          <Subtitle hasNoMargin hasCenteredText>\n            Welcome\n          </Subtitle>\n          <BodyText hasCenteredText hasSectionMargin>\n            to the Reapit Foundations DeveloperPortal\n          </BodyText>\n        </FlexContainer>\n        {hasDeveloperOrg && (\n          <>\n            <BodyText hasGreyText hasCenteredText>\n              The organisation ‘{orgName}’ has already been setup within the DeveloperPortal. To access this\n              organisation, you will need to be invited by the Admin who set the account up.\n            </BodyText>\n            <BodyText hasGreyText hasCenteredText hasSectionMargin>\n              For more information on how an Admin can Invite Members to an organisation, please{' '}\n              <a onClick={openNewPage(ExternalPages.inviteMembersDocs)} target=\"_blank\" rel=\"noreferrer\">\n                click here\n              </a>\n              .\n            </BodyText>\n          </>\n        )}\n        {isCustomer && !isCustomerAdmin && !hasDeveloperOrg && (\n          <>\n            <BodyText hasGreyText hasCenteredText>\n              Unfortunately, only an Admin can setup your developer organisation ‘{orgName}’. Please contact an Admin to\n              set up the account.\n            </BodyText>\n            <BodyText hasGreyText hasCenteredText>\n              They can do this up from{' '}\n              <a href={`${window.location.origin}${Routes.SELECT_ROLE}`} target=\"_blank\" rel=\"noreferrer\">\n                this page\n              </a>\n              .\n            </BodyText>\n            <BodyText hasGreyText hasCenteredText hasSectionMargin>\n              You will need to contact them directly to perform this task.\n            </BodyText>\n          </>\n        )}\n        {isCustomerAdmin && !hasDeveloperOrg && (\n          <>\n            <BodyText hasGreyText hasCenteredText>\n              This portal is used for building apps and integrations on top of our Platform APIs.\n            </BodyText>\n            <BodyText hasGreyText hasCenteredText>\n              Whilst using the DeveloperPortal to build against our Sandbox environment is free, API consumption charges\n              apply when your app or integration is published (either privately or publicly) in the AppMarket.\n            </BodyText>\n            <BodyText hasGreyText hasCenteredText hasSectionMargin>\n              To view our Terms and Conditions, please click ‘Proceed’ below.\n            </BodyText>\n          </>\n        )}\n        <ButtonGroup alignment=\"center\">\n          <Button onClick={openNewPage(process.env.marketplaceUrl)} intent=\"default\">\n            Visit AppMarket\n          </Button>\n          {isCustomerAdmin && !hasDeveloperOrg && (\n            <Button onClick={handleSetModal(true, setTermsModalVisible)} intent=\"primary\">\n              Proceed\n            </Button>\n          )}\n        </ButtonGroup>\n        <TermsAndConditionsModal\n          visible={termsModalVisible}\n          onAccept={handleCreateAccount(updateCustomer, createDeveloper, connectSession)}\n          onDecline={handleSetModal(false, setTermsModalVisible)}\n          isSubmitting={creatingDeveloper || updatingCustomer}\n        />\n        <BodyText hasGreyText hasCenteredText>\n          {process.env.APP_VERSION}\n        </BodyText>\n      </LoginContentWrapper>\n    </LoginContainer>\n  )\n}\n\nexport default CustomerRegister\n"],"names":["define_process_env_default"],"mappings":"mQA6EQ,IAUEA,EAAA,CAAA,OAAA,cATF,UADA,GAAA,gBAAA,4BAAA,gBAAA,wCAAA,kBAAA,sBAAA,aAAA,uCAAA,eAAA,iDAAA,eAAA,yCAAA,4BAAA,kDAAA,gBAAA,uFAAA,kBAAA,CAAA,sCAAA,EAAA,YAAA,mEAAA,WAAA,gDAAA,uBAAA,wDAAA,WAAA,iFAAA,wBAAA,6CAAA,WAAA,uBAAA,WAAA,sFAAA,kBAAA,CAAA,sCAAA,EAAA,iBAAA,CAAA,sCAAA"}