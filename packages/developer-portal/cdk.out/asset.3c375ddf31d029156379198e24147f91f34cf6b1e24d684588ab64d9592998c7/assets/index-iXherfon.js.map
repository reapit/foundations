{"version":3,"file":"index-iXherfon.js","sources":["../../src/components/register/form-fields.ts","../../src/components/register/validation-schema.ts","../../src/components/register/index.tsx"],"sourcesContent":["import { FormFieldInfo } from '@reapit/utils-common'\n\nexport type FieldKey = 'nameField' | 'companyNameField' | 'emailField' | 'telephoneField' | 'gitHubUsernameField'\n\nexport const formFields: Record<FieldKey, FormFieldInfo> = {\n  nameField: {\n    name: 'name',\n    label: 'Full name',\n    placeHolder: 'Joe Developer',\n    errorMessage: 'Invalid full name',\n  },\n  companyNameField: {\n    label: 'Company name',\n    name: 'companyName',\n    placeHolder: 'Acme Industries Ltd',\n  },\n  emailField: {\n    name: 'email',\n    label: 'Email',\n    placeHolder: 'name@address.com',\n    errorMessage: 'Invalid email',\n  },\n  telephoneField: {\n    name: 'telephone',\n    label: 'Telephone',\n    placeHolder: '0800 800 800',\n    errorMessage: 'Invalid phone number',\n  },\n  gitHubUsernameField: {\n    name: 'gitHubUsername',\n    label: 'GitHub Username',\n    placeHolder: 'Gihub handle',\n    errorMessage: 'Invalid GitHub Username',\n  },\n}\n","/* istanbul ignore file */\nimport * as Yup from 'yup'\nimport { formFields } from './form-fields'\nimport errorMessages from '../../constants/error-messages'\nimport { personNameRegex, telephoneRegex, emailRegex } from '@reapit/utils-common'\nimport { specialCharsTest } from '../../utils/yup'\nimport githubUsernameRegex from 'github-username-regex'\n\nconst { nameField, companyNameField, emailField, telephoneField, gitHubUsernameField } = formFields\n\nexport const validationSchema = Yup.object().shape({\n  [nameField.name]: Yup.string()\n    .trim()\n    .required(errorMessages.FIELD_REQUIRED)\n    .matches(personNameRegex, nameField.errorMessage)\n    .test(specialCharsTest),\n\n  [companyNameField.name]: Yup.string().trim().required(errorMessages.FIELD_REQUIRED).test(specialCharsTest),\n\n  [emailField.name]: Yup.string()\n    .trim()\n    .required(errorMessages.FIELD_REQUIRED)\n    .matches(emailRegex, emailField.errorMessage),\n\n  [telephoneField.name]: Yup.string()\n    .trim()\n    .required(errorMessages.FIELD_REQUIRED)\n    .matches(telephoneRegex, telephoneField.errorMessage)\n    .test(specialCharsTest),\n\n  [gitHubUsernameField.name]: Yup.string()\n    .trim()\n    .test({\n      name: 'isValidDescription',\n      message: 'GitHub Username is not valid',\n      test: (value) => {\n        if (!value) return true\n        return githubUsernameRegex.test(value)\n      },\n    })\n    .test(specialCharsTest),\n})\n","import React, { FC, useState, useEffect, MouseEvent, Dispatch, SetStateAction } from 'react'\nimport dayjs from 'dayjs'\nimport {\n  InputGroup,\n  FormLayout,\n  InputWrapFull,\n  PersistentNotification,\n  Subtitle,\n  BodyText,\n  Button,\n  FlexContainer,\n  ButtonGroup,\n  elMb12,\n  useSnack,\n  Icon,\n  elMb7,\n} from '@reapit/elements'\nimport { CreateDeveloperModel } from '@reapit/foundations-ts-definitions'\nimport TermsAndConditionsModal from './terms-and-conditions-modal'\nimport Routes from '../../constants/routes'\nimport { formFields } from './form-fields'\nimport { yupResolver } from '@hookform/resolvers/yup'\nimport { validationSchema } from './validation-schema'\nimport { useForm, UseFormGetValues } from 'react-hook-form'\nimport { LoginContainer, LoginContentWrapper } from '../login/__styles__'\nimport { reapitConnectBrowserSession } from '../../core/connect-session'\nimport { createDeveloperService } from '../../services/developer'\n\nconst { nameField, emailField, companyNameField, telephoneField, gitHubUsernameField } = formFields\n\nexport type DeveloperState = 'LOADING' | 'SUCCESS' | 'ERROR' | 'INITIAL'\n\nexport const registerFormInitialValues: CreateDeveloperModel = {\n  name: '',\n  companyName: '',\n  email: '',\n  telephone: '',\n  agreedTerms: '',\n  gitHubUsername: '',\n}\n\nexport const onSubmit =\n  (\n    values: CreateDeveloperModel,\n    setDeveloperState: Dispatch<SetStateAction<DeveloperState>>,\n    error: (message: string, timeout: number) => void,\n  ) =>\n  async () => {\n    setDeveloperState('LOADING')\n    const response = await createDeveloperService({\n      ...values,\n      agreedTerms: dayjs().format('YYYY-MM-DDTHH:mm:ssZ'),\n    })\n    if (typeof response === 'string') {\n      error(response, 5000)\n      setDeveloperState('ERROR')\n    } else {\n      setDeveloperState('SUCCESS')\n    }\n  }\n\nexport const onDeclineTermsAndConditions = (setTermsAndConditionsModalVisible: (isVisible: boolean) => void) => () => {\n  setTermsAndConditionsModalVisible(false)\n}\n\nexport const onLoginButtonClick = () => (event: MouseEvent) => {\n  event.preventDefault()\n  reapitConnectBrowserSession.connectLoginRedirect(`${window.location.origin}${Routes.APPS}`)\n}\n\nexport const formSubmit = (setAgreeModalVisable: (val: boolean) => void) => () => {\n  setAgreeModalVisable(true)\n}\n\nexport const formChange =\n  ({\n    getValues,\n    errors,\n    formStep,\n    setFormStep,\n  }: {\n    getValues: UseFormGetValues<CreateDeveloperModel>\n    errors: { [s: string]: any }\n    setFormStep: (value: 1 | 2 | 3) => void\n    formStep: number\n  }) =>\n  () => {\n    const { name, telephone } = getValues()\n\n    if (name && !errors.name && formStep != 3) {\n      if (telephone && !errors.telephone) {\n        setFormStep(3)\n      } else setFormStep(2)\n    }\n  }\n\nexport const Register: FC = () => {\n  const [agreeModalVisable, setAgreeModalVisable] = useState<boolean>(false)\n  const [developerState, setDeveloperState] = useState<DeveloperState>('INITIAL')\n  const [formStep, setFormStep] = useState<1 | 2 | 3>(1)\n  const { error } = useSnack()\n  const {\n    handleSubmit,\n    formState: { errors },\n    register,\n    getValues,\n  } = useForm<CreateDeveloperModel>({\n    resolver: yupResolver(validationSchema),\n    defaultValues: registerFormInitialValues,\n  })\n\n  useEffect(() => {\n    if (developerState === 'SUCCESS' || developerState === 'ERROR') {\n      setAgreeModalVisable(false)\n    }\n  }, [developerState])\n\n  return (\n    <LoginContainer>\n      <LoginContentWrapper>\n        <Icon className={elMb7} height=\"40px\" width=\"200px\" icon=\"reapitLogo\" />\n        <FlexContainer isFlexColumn>\n          <Subtitle hasNoMargin hasCenteredText>\n            Register\n          </Subtitle>\n          <BodyText hasCenteredText>for Reapit Foundations DeveloperPortal</BodyText>\n        </FlexContainer>\n        {developerState === 'SUCCESS' ? (\n          <>\n            <PersistentNotification className={elMb12} intent=\"success\" isExpanded isFullWidth isInline>\n              Successfully registered, if you already have a Reapit Connect account, please now login. If you do not,\n              please check your email to confirm your account.\n            </PersistentNotification>\n            <ButtonGroup alignment=\"center\" className={elMb12}>\n              <Button onClick={onLoginButtonClick()} intent=\"primary\">\n                Login With Reapit\n              </Button>\n            </ButtonGroup>\n          </>\n        ) : (\n          <>\n            <form\n              onSubmit={handleSubmit(formSubmit(setAgreeModalVisable))}\n              onChange={formChange({\n                getValues,\n                errors,\n                formStep,\n                setFormStep,\n              })}\n            >\n              <BodyText hasGreyText hasCenteredText hasSectionMargin>\n                By registering for the Foundations platform, you will get access to the Reapit DeveloperPortal and\n                sandbox data. You will also get the opportunity to list apps in the Reapit Marketplace. We look forward\n                to seeing what you build!\n              </BodyText>\n              <FormLayout hasMargin>\n                <InputWrapFull>\n                  <InputGroup\n                    type=\"text\"\n                    label={nameField.label as string}\n                    id={nameField.name}\n                    placeholder={nameField.placeHolder}\n                    {...register('name')}\n                    intent={errors?.name?.message ? 'danger' : undefined}\n                    inputAddOnText={errors?.name?.message}\n                  />\n                </InputWrapFull>\n                <InputWrapFull>\n                  <InputGroup\n                    type=\"text\"\n                    label={companyNameField.label as string}\n                    id={companyNameField.name}\n                    placeholder={companyNameField.placeHolder}\n                    {...register('companyName')}\n                    intent={errors?.companyName?.message ? 'danger' : undefined}\n                    inputAddOnText={errors?.companyName?.message}\n                  />\n                </InputWrapFull>\n                <InputWrapFull>\n                  <InputGroup\n                    type=\"email\"\n                    label={emailField.label as string}\n                    id={emailField.name}\n                    placeholder={emailField.placeHolder}\n                    {...register('email')}\n                    intent={errors?.email?.message ? 'danger' : undefined}\n                    inputAddOnText={errors?.email?.message}\n                  />\n                </InputWrapFull>\n                <InputWrapFull>\n                  <InputGroup\n                    type=\"tel\"\n                    label={telephoneField.label as string}\n                    id={telephoneField.name}\n                    placeholder={telephoneField.placeHolder}\n                    {...register('telephone')}\n                    intent={errors?.telephone?.message ? 'danger' : undefined}\n                    inputAddOnText={errors?.telephone?.message}\n                  />\n                </InputWrapFull>\n                <InputWrapFull>\n                  <InputGroup\n                    type=\"tel\"\n                    label={gitHubUsernameField.label as string}\n                    id={gitHubUsernameField.name}\n                    placeholder={gitHubUsernameField.placeHolder}\n                    {...register('gitHubUsername')}\n                    intent={errors?.gitHubUsername?.message ? 'danger' : undefined}\n                    inputAddOnText={errors?.gitHubUsername?.message}\n                  />\n                </InputWrapFull>\n              </FormLayout>\n              <TermsAndConditionsModal\n                visible={agreeModalVisable}\n                onAccept={onSubmit(getValues(), setDeveloperState, error)}\n                onDecline={onDeclineTermsAndConditions(setAgreeModalVisable)}\n                isSubmitting={developerState === 'LOADING'}\n              />\n              <ButtonGroup alignment=\"center\">\n                <Button type=\"submit\" loading={developerState === 'LOADING'} intent=\"primary\">\n                  Register\n                </Button>\n              </ButtonGroup>\n            </form>\n          </>\n        )}\n      </LoginContentWrapper>\n    </LoginContainer>\n  )\n}\n\nexport default Register\n"],"names":["formFields","nameField","companyNameField","emailField","telephoneField","gitHubUsernameField","validationSchema","Yup.object","Yup.string","errorMessages","personNameRegex","specialCharsTest","emailRegex","telephoneRegex","value","githubUsernameRegex","registerFormInitialValues","onSubmit","values","setDeveloperState","error","response","createDeveloperService","dayjs","onDeclineTermsAndConditions","setTermsAndConditionsModalVisible","onLoginButtonClick","event","reapitConnectBrowserSession","Routes","formSubmit","setAgreeModalVisable","formChange","getValues","errors","formStep","setFormStep","name","telephone","Register","agreeModalVisable","useState","developerState","useSnack","handleSubmit","register","useForm","yupResolver","useEffect","jsx","LoginContainer","jsxs","LoginContentWrapper","Icon","elMb7","FlexContainer","Subtitle","BodyText","Fragment","PersistentNotification","elMb12","ButtonGroup","Button","FormLayout","InputWrapFull","InputGroup","TermsAndConditionsModal"],"mappings":"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"}