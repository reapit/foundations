{"version":3,"file":"yup-BkrrzsJ8.js","sources":["../../../utils-common/src/validators/index.ts","../../src/utils/yup.ts"],"sourcesContent":["export const isImageType = (type: string) => {\n  const regex = /^image\\//\n  return regex.test(type)\n}\n\nexport const isValidUrlWithCustomScheme = (urls: string): boolean => {\n  if (!urls) {\n    return false\n  }\n\n  // remove all white-space and filter all empty urls\n  return urls\n    .replace(/\\s/g, '')\n    .split(',')\n    .filter((url) => url)\n    .every((url) => checkValidCustomScheme(url))\n}\n\nexport const checkValidCustomScheme = (url: string): boolean => {\n  const result = url.match(/([a-zA-Z-]{1,30}):\\/\\/([a-zA-Z\\d-.:]{1,255})/)\n  if (!result) {\n    return false\n  }\n  const [, protocol, link] = result\n  // allow http only for localhost\n  if (protocol === 'http') {\n    return link.indexOf('localhost') === 0\n  }\n\n  return !!protocol && !!link\n}\n\nexport const isValidLimitToClientIds = (clientIds: string): boolean => {\n  // Only allow strings with 15 characters seperated by a comma\n  return clientIds\n    .replace(/\\s/g, '')\n    .split(',')\n    .every((clientId) => clientId.length >= 3 && clientId.length <= 15)\n}\n\nexport const isValidHttpsUrl = (url: string) => {\n  return /^\\s*(https:\\/\\/)([a-z\\d-]{1,63}\\.)*[a-z\\d-]{1,255}(.[a-z]{2,6}|:[0-9]{2,6})\\s*/.test(url)\n}\n\nexport const isValidHttpUrl = (url: string) => {\n  return /^\\s*(http:\\/\\/)([a-z\\d-]{1,63}\\.)*[a-z\\d-]{1,255}(.[a-z]{2,6}|:[0-9]{2,6})\\s*/.test(url)\n}\n\nexport const whiteListLocalhostAndIsValidUrl = (url: string) => {\n  return isValidHttpsUrl(url) || /http?:\\/\\/localhost/.test(url)\n}\n\nexport const hasSpecialChars = (value: string): boolean => {\n  if (!value) return false\n\n  if (/^[\\w\\-\\s£$@%&*()?!%/=+'\"~^,‘’.#;:]+$/.test(value) && /^((?!javascript).)*$/.test(value.toLowerCase())) {\n    return false\n  }\n\n  return true\n}\n","import { hasSpecialChars } from '@reapit/utils-common'\n\nexport const specialCharsTest = {\n  name: 'hasNoSpecialChars',\n  message: 'Special characters are not permitted',\n  test: (value?: string) => {\n    if (!value) return true\n    return !hasSpecialChars(value)\n  },\n}\n\nexport const yarnNpmTest = {\n  name: 'isYarnOrNpm',\n  message: 'Package manager must be yarn or npm',\n  test: (value?: string) => {\n    return value === 'yarn' || value === 'npm' || value === 'yarn-berry'\n  },\n}\n"],"names":["isValidUrlWithCustomScheme","urls","url","checkValidCustomScheme","result","protocol","link","isValidLimitToClientIds","clientIds","clientId","isValidHttpsUrl","isValidHttpUrl","whiteListLocalhostAndIsValidUrl","hasSpecialChars","value","specialCharsTest","yarnNpmTest"],"mappings":"4BAKa,MAAAA,EAA8BC,GACpCA,EAKEA,EACJ,QAAQ,MAAO,EAAE,EACjB,MAAM,GAAG,EACT,OAAQC,GAAQA,CAAG,EACnB,MAAOA,GAAQC,EAAuBD,CAAG,CAAC,EARpC,GAWEC,EAA0BD,GAAyB,CACxD,MAAAE,EAASF,EAAI,MAAM,8CAA8C,EACvE,GAAI,CAACE,EACI,MAAA,GAET,KAAM,EAAGC,EAAUC,CAAI,EAAIF,EAE3B,OAAIC,IAAa,OACRC,EAAK,QAAQ,WAAW,IAAM,EAGhC,CAAC,CAACD,GAAY,CAAC,CAACC,CACzB,EAEaC,EAA2BC,GAE/BA,EACJ,QAAQ,MAAO,EAAE,EACjB,MAAM,GAAG,EACT,MAAOC,GAAaA,EAAS,QAAU,GAAKA,EAAS,QAAU,EAAE,EAGzDC,EAAmBR,GACvB,iFAAiF,KAAKA,CAAG,EAGrFS,EAAkBT,GACtB,gFAAgF,KAAKA,CAAG,EAGpFU,EAAmCV,GACvCQ,EAAgBR,CAAG,GAAK,sBAAsB,KAAKA,CAAG,EAGlDW,EAAmBC,GAC1B,GAACA,GAED,uCAAuC,KAAKA,CAAK,GAAK,uBAAuB,KAAKA,EAAM,YAAY,CAAC,GCrD9FC,EAAmB,CAC9B,KAAM,oBACN,QAAS,uCACT,KAAOD,GACAA,EACE,CAACD,EAAgBC,CAAK,EADV,EAGvB,EAEaE,EAAc,CACzB,KAAM,cACN,QAAS,sCACT,KAAOF,GACEA,IAAU,QAAUA,IAAU,OAASA,IAAU,YAE5D"}