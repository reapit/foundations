var y=Object.defineProperty;var p=(r,s,t)=>s in r?y(r,s,{enumerable:!0,configurable:!0,writable:!0,value:t}):r[s]=t;var c=(r,s,t)=>(p(r,typeof s!="symbol"?s+"":s,t),t);class i extends Error{constructor(t,e){super(t);c(this,"name");c(this,"status");this.message=t,this.response=e,Object.setPrototypeOf(this,new.target.prototype),this.name=this.constructor.name,this.status=this.constructor.status,this.message=t,Error.captureStackTrace&&typeof Error.captureStackTrace=="function"&&Error.captureStackTrace(this,this.constructor),this.response=e}}const u=async(r,{method:s,url:t})=>{const e=await(async()=>{try{return await r.json()}catch{return r}})(),o=new i(`Foundations API error: Status: ${r.status} Method: ${s} Path: ${t} ${JSON.stringify(e)}`);return o.status=r.status,o.response=e,o},m=async({api:r,url:s,method:t,body:e,headers:o})=>{const n=`${r}${s}`,a=await fetch(n,{headers:o,method:t,body:JSON.stringify(e)});if(a.status<400)try{return await a.blob()}catch(d){const h=new i("Can't convert response to blob. Error:",d.message);throw console.error(h.message),h}throw await u(a,{url:s,method:t})},w=async({api:r,url:s,method:t,body:e,headers:o})=>{const n=`${r}${s}`,a=await fetch(n,{headers:o,method:t,body:JSON.stringify(e)});if(a.status<400)try{return await a.json()}catch{return a.ok}throw await u(a,{url:s,method:t})};export{m as a,w as f};
