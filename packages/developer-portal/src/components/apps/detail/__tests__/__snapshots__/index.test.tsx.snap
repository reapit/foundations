// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`AppDetail should match snapshot 1`] = `
{
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <mock-styled.div />
      <mock-styled.h1
        classname=""
      >
        will-test-dev-co-voracious-person
      </mock-styled.h1>
      <mock-styled.h2
        classname=""
      >
        Authenticating Your App
      </mock-styled.h2>
      <mock-styled.p
        classname="mock-css."
      >
        Client-side Apps use our identity provider
         
        <a>
          Reapit Connect
        </a>
         to authenticate against our API. Your application will need to re-direct to Reapit Connect where we will handle user login and in turn, re-direct back to your app with a code in the URL that you exchange for access and id JWTs, referred to as
         
        <a>
          Authorization Code flow.
        </a>
         You will need the Client Id and Redirect Uris below to configure Reapit Connect.
      </mock-styled.p>
      <mock-styled.p
        classname="mock-css. mock-css."
      >
        To make this process easier, we provide you with an authentication module for client-side apps,
         
        <a>
          Connect Session
        </a>
        , which comes bundled with our
         
        <a>
          Create React App Template
        </a>
         for quick start client-side development.
      </mock-styled.p>
      <mock-styled.div
        classname=""
      >
        <mock-styled.div
          classname=""
        >
          <mock-styled.div
            classname=""
          >
            <mock-styled.span
              classname="mock-css.
  margin-right: 0.625rem;
 mock-css.
  font-size: 2.5rem;
"
            >
              <svg />
            </mock-styled.span>
            <div>
              <mock-styled.h2
                classname="mock-css."
              >
                Authentication Client Id
              </mock-styled.h2>
              <mock-styled.p
                classname="mock-css."
              >
                MOCK_EXTERNAL_ID
              </mock-styled.p>
            </div>
          </mock-styled.div>
          <mock-styled.button
            classname="mock-css."
          >
            <mock-styled.div />
            Copy
          </mock-styled.button>
        </mock-styled.div>
        <mock-styled.div
          classname=""
        >
          <mock-styled.div
            classname=""
          >
            <mock-styled.span
              classname="mock-css.
  margin-right: 0.625rem;
 mock-css.
  font-size: 2.5rem;
"
            >
              <svg />
            </mock-styled.span>
            <div>
              <mock-styled.h2
                classname="mock-css."
              >
                App Id
              </mock-styled.h2>
              <mock-styled.p
                classname="mock-css.
  width: 100%;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
 mock-css."
              >
                MOCK_APP_ID
              </mock-styled.p>
            </div>
          </mock-styled.div>
          <mock-styled.button
            classname="mock-css."
          >
            <mock-styled.div />
            Copy
          </mock-styled.button>
        </mock-styled.div>
        <mock-styled.div
          classname=""
        >
          <mock-styled.h2
            classname="mock-css."
          >
            Redirect Uri(s)
          </mock-styled.h2>
          <mock-styled.p
            classname="mock-css.
  width: 100%;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
 mock-css. mock-css."
          >
            https://foo.bar
          </mock-styled.p>
        </mock-styled.div>
        <mock-styled.div
          classname=""
        >
          <mock-styled.h2
            classname="mock-css."
          >
            Sign Out Uri(s)
          </mock-styled.h2>
          <mock-styled.p
            classname="mock-css.
  width: 100%;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
 mock-css. mock-css."
          >
            https://foo.bar
          </mock-styled.p>
        </mock-styled.div>
        <mock-styled.div
          classname=""
        >
          <mock-styled.div
            classname=""
          >
            <mock-styled.h2
              classname="mock-css."
            >
              Integration Type
            </mock-styled.h2>
            <mock-styled.p
              classname="mock-css. mock-css."
            >
              You have a client side authenticated integration that will not render within the AgencyCloud desktop CRM
            </mock-styled.p>
          </mock-styled.div>
        </mock-styled.div>
        <mock-styled.div
          classname=""
        >
          <mock-styled.div
            classname=""
          >
            <mock-styled.h2
              classname="mock-css."
            >
              App Status
            </mock-styled.h2>
            <mock-styled.p
              classname="mock-css. mock-css."
            >
              Your app is live and public in the AppMarket with a pending revision under review
            </mock-styled.p>
          </mock-styled.div>
        </mock-styled.div>
        <mock-styled.div
          classname=""
        >
          <mock-styled.h2
            classname="mock-css."
          >
            Permissions
          </mock-styled.h2>
          <mock-styled.div>
            Read applicants
          </mock-styled.div>
          <mock-styled.div>
            Read properties
          </mock-styled.div>
        </mock-styled.div>
      </mock-styled.div>
    </div>
  </body>,
  "container": <div>
    <mock-styled.div />
    <mock-styled.h1
      classname=""
    >
      will-test-dev-co-voracious-person
    </mock-styled.h1>
    <mock-styled.h2
      classname=""
    >
      Authenticating Your App
    </mock-styled.h2>
    <mock-styled.p
      classname="mock-css."
    >
      Client-side Apps use our identity provider
       
      <a>
        Reapit Connect
      </a>
       to authenticate against our API. Your application will need to re-direct to Reapit Connect where we will handle user login and in turn, re-direct back to your app with a code in the URL that you exchange for access and id JWTs, referred to as
       
      <a>
        Authorization Code flow.
      </a>
       You will need the Client Id and Redirect Uris below to configure Reapit Connect.
    </mock-styled.p>
    <mock-styled.p
      classname="mock-css. mock-css."
    >
      To make this process easier, we provide you with an authentication module for client-side apps,
       
      <a>
        Connect Session
      </a>
      , which comes bundled with our
       
      <a>
        Create React App Template
      </a>
       for quick start client-side development.
    </mock-styled.p>
    <mock-styled.div
      classname=""
    >
      <mock-styled.div
        classname=""
      >
        <mock-styled.div
          classname=""
        >
          <mock-styled.span
            classname="mock-css.
  margin-right: 0.625rem;
 mock-css.
  font-size: 2.5rem;
"
          >
            <svg />
          </mock-styled.span>
          <div>
            <mock-styled.h2
              classname="mock-css."
            >
              Authentication Client Id
            </mock-styled.h2>
            <mock-styled.p
              classname="mock-css."
            >
              MOCK_EXTERNAL_ID
            </mock-styled.p>
          </div>
        </mock-styled.div>
        <mock-styled.button
          classname="mock-css."
        >
          <mock-styled.div />
          Copy
        </mock-styled.button>
      </mock-styled.div>
      <mock-styled.div
        classname=""
      >
        <mock-styled.div
          classname=""
        >
          <mock-styled.span
            classname="mock-css.
  margin-right: 0.625rem;
 mock-css.
  font-size: 2.5rem;
"
          >
            <svg />
          </mock-styled.span>
          <div>
            <mock-styled.h2
              classname="mock-css."
            >
              App Id
            </mock-styled.h2>
            <mock-styled.p
              classname="mock-css.
  width: 100%;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
 mock-css."
            >
              MOCK_APP_ID
            </mock-styled.p>
          </div>
        </mock-styled.div>
        <mock-styled.button
          classname="mock-css."
        >
          <mock-styled.div />
          Copy
        </mock-styled.button>
      </mock-styled.div>
      <mock-styled.div
        classname=""
      >
        <mock-styled.h2
          classname="mock-css."
        >
          Redirect Uri(s)
        </mock-styled.h2>
        <mock-styled.p
          classname="mock-css.
  width: 100%;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
 mock-css. mock-css."
        >
          https://foo.bar
        </mock-styled.p>
      </mock-styled.div>
      <mock-styled.div
        classname=""
      >
        <mock-styled.h2
          classname="mock-css."
        >
          Sign Out Uri(s)
        </mock-styled.h2>
        <mock-styled.p
          classname="mock-css.
  width: 100%;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
 mock-css. mock-css."
        >
          https://foo.bar
        </mock-styled.p>
      </mock-styled.div>
      <mock-styled.div
        classname=""
      >
        <mock-styled.div
          classname=""
        >
          <mock-styled.h2
            classname="mock-css."
          >
            Integration Type
          </mock-styled.h2>
          <mock-styled.p
            classname="mock-css. mock-css."
          >
            You have a client side authenticated integration that will not render within the AgencyCloud desktop CRM
          </mock-styled.p>
        </mock-styled.div>
      </mock-styled.div>
      <mock-styled.div
        classname=""
      >
        <mock-styled.div
          classname=""
        >
          <mock-styled.h2
            classname="mock-css."
          >
            App Status
          </mock-styled.h2>
          <mock-styled.p
            classname="mock-css. mock-css."
          >
            Your app is live and public in the AppMarket with a pending revision under review
          </mock-styled.p>
        </mock-styled.div>
      </mock-styled.div>
      <mock-styled.div
        classname=""
      >
        <mock-styled.h2
          classname="mock-css."
        >
          Permissions
        </mock-styled.h2>
        <mock-styled.div>
          Read applicants
        </mock-styled.div>
        <mock-styled.div>
          Read properties
        </mock-styled.div>
      </mock-styled.div>
    </mock-styled.div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`AppDetail should match snapshot when app is client credentials 1`] = `
{
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <mock-styled.div />
      <mock-styled.h1
        classname=""
      >
        will-test-dev-co-voracious-person
      </mock-styled.h1>
      <mock-styled.h2
        classname=""
      >
        Authenticating Your App
      </mock-styled.h2>
      <mock-styled.p
        classname="mock-css."
      >
        Client-side Apps use our identity provider
         
        <a>
          Reapit Connect
        </a>
         to authenticate against our API. Your application will need to re-direct to Reapit Connect where we will handle user login and in turn, re-direct back to your app with a code in the URL that you exchange for access and id JWTs, referred to as
         
        <a>
          Authorization Code flow.
        </a>
         You will need the Client Id and Redirect Uris below to configure Reapit Connect.
      </mock-styled.p>
      <mock-styled.p
        classname="mock-css. mock-css."
      >
        To make this process easier, we provide you with an authentication module for client-side apps,
         
        <a>
          Connect Session
        </a>
        , which comes bundled with our
         
        <a>
          Create React App Template
        </a>
         for quick start client-side development.
      </mock-styled.p>
      <mock-styled.div
        classname=""
      >
        <mock-styled.div
          classname=""
        >
          <mock-styled.div
            classname=""
          >
            <mock-styled.span
              classname="mock-css.
  margin-right: 0.625rem;
 mock-css.
  font-size: 2.5rem;
"
            >
              <svg />
            </mock-styled.span>
            <div>
              <mock-styled.h2
                classname="mock-css."
              >
                Authentication Client Id
              </mock-styled.h2>
              <mock-styled.p
                classname="mock-css."
              >
                MOCK_EXTERNAL_ID
              </mock-styled.p>
            </div>
          </mock-styled.div>
          <mock-styled.button
            classname="mock-css."
          >
            <mock-styled.div />
            Copy
          </mock-styled.button>
        </mock-styled.div>
        <mock-styled.div
          classname=""
        >
          <mock-styled.div
            classname=""
          >
            <mock-styled.span
              classname="mock-css.
  margin-right: 0.625rem;
 mock-css.
  font-size: 2.5rem;
"
            >
              <svg />
            </mock-styled.span>
            <div>
              <mock-styled.h2
                classname="mock-css."
              >
                App Id
              </mock-styled.h2>
              <mock-styled.p
                classname="mock-css.
  width: 100%;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
 mock-css."
              >
                MOCK_APP_ID
              </mock-styled.p>
            </div>
          </mock-styled.div>
          <mock-styled.button
            classname="mock-css."
          >
            <mock-styled.div />
            Copy
          </mock-styled.button>
        </mock-styled.div>
        <mock-styled.div
          classname=""
        >
          <mock-styled.h2
            classname="mock-css."
          >
            Redirect Uri(s)
          </mock-styled.h2>
          <mock-styled.p
            classname="mock-css.
  width: 100%;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
 mock-css. mock-css."
          >
            https://foo.bar
          </mock-styled.p>
        </mock-styled.div>
        <mock-styled.div
          classname=""
        >
          <mock-styled.h2
            classname="mock-css."
          >
            Sign Out Uri(s)
          </mock-styled.h2>
          <mock-styled.p
            classname="mock-css.
  width: 100%;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
 mock-css. mock-css."
          >
            https://foo.bar
          </mock-styled.p>
        </mock-styled.div>
        <mock-styled.div
          classname=""
        >
          <mock-styled.div
            classname=""
          >
            <mock-styled.h2
              classname="mock-css."
            >
              Integration Type
            </mock-styled.h2>
            <mock-styled.p
              classname="mock-css. mock-css."
            >
              You have a client side authenticated integration that will not render within the AgencyCloud desktop CRM
            </mock-styled.p>
          </mock-styled.div>
        </mock-styled.div>
        <mock-styled.div
          classname=""
        >
          <mock-styled.div
            classname=""
          >
            <mock-styled.h2
              classname="mock-css."
            >
              App Status
            </mock-styled.h2>
            <mock-styled.p
              classname="mock-css. mock-css."
            >
              Your app is live and public in the AppMarket with a pending revision under review
            </mock-styled.p>
          </mock-styled.div>
        </mock-styled.div>
        <mock-styled.div
          classname=""
        >
          <mock-styled.h2
            classname="mock-css."
          >
            Permissions
          </mock-styled.h2>
          <mock-styled.div>
            Read applicants
          </mock-styled.div>
          <mock-styled.div>
            Read properties
          </mock-styled.div>
        </mock-styled.div>
      </mock-styled.div>
    </div>
  </body>,
  "container": <div>
    <mock-styled.div />
    <mock-styled.h1
      classname=""
    >
      will-test-dev-co-voracious-person
    </mock-styled.h1>
    <mock-styled.h2
      classname=""
    >
      Authenticating Your App
    </mock-styled.h2>
    <mock-styled.p
      classname="mock-css."
    >
      Client-side Apps use our identity provider
       
      <a>
        Reapit Connect
      </a>
       to authenticate against our API. Your application will need to re-direct to Reapit Connect where we will handle user login and in turn, re-direct back to your app with a code in the URL that you exchange for access and id JWTs, referred to as
       
      <a>
        Authorization Code flow.
      </a>
       You will need the Client Id and Redirect Uris below to configure Reapit Connect.
    </mock-styled.p>
    <mock-styled.p
      classname="mock-css. mock-css."
    >
      To make this process easier, we provide you with an authentication module for client-side apps,
       
      <a>
        Connect Session
      </a>
      , which comes bundled with our
       
      <a>
        Create React App Template
      </a>
       for quick start client-side development.
    </mock-styled.p>
    <mock-styled.div
      classname=""
    >
      <mock-styled.div
        classname=""
      >
        <mock-styled.div
          classname=""
        >
          <mock-styled.span
            classname="mock-css.
  margin-right: 0.625rem;
 mock-css.
  font-size: 2.5rem;
"
          >
            <svg />
          </mock-styled.span>
          <div>
            <mock-styled.h2
              classname="mock-css."
            >
              Authentication Client Id
            </mock-styled.h2>
            <mock-styled.p
              classname="mock-css."
            >
              MOCK_EXTERNAL_ID
            </mock-styled.p>
          </div>
        </mock-styled.div>
        <mock-styled.button
          classname="mock-css."
        >
          <mock-styled.div />
          Copy
        </mock-styled.button>
      </mock-styled.div>
      <mock-styled.div
        classname=""
      >
        <mock-styled.div
          classname=""
        >
          <mock-styled.span
            classname="mock-css.
  margin-right: 0.625rem;
 mock-css.
  font-size: 2.5rem;
"
          >
            <svg />
          </mock-styled.span>
          <div>
            <mock-styled.h2
              classname="mock-css."
            >
              App Id
            </mock-styled.h2>
            <mock-styled.p
              classname="mock-css.
  width: 100%;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
 mock-css."
            >
              MOCK_APP_ID
            </mock-styled.p>
          </div>
        </mock-styled.div>
        <mock-styled.button
          classname="mock-css."
        >
          <mock-styled.div />
          Copy
        </mock-styled.button>
      </mock-styled.div>
      <mock-styled.div
        classname=""
      >
        <mock-styled.h2
          classname="mock-css."
        >
          Redirect Uri(s)
        </mock-styled.h2>
        <mock-styled.p
          classname="mock-css.
  width: 100%;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
 mock-css. mock-css."
        >
          https://foo.bar
        </mock-styled.p>
      </mock-styled.div>
      <mock-styled.div
        classname=""
      >
        <mock-styled.h2
          classname="mock-css."
        >
          Sign Out Uri(s)
        </mock-styled.h2>
        <mock-styled.p
          classname="mock-css.
  width: 100%;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
 mock-css. mock-css."
        >
          https://foo.bar
        </mock-styled.p>
      </mock-styled.div>
      <mock-styled.div
        classname=""
      >
        <mock-styled.div
          classname=""
        >
          <mock-styled.h2
            classname="mock-css."
          >
            Integration Type
          </mock-styled.h2>
          <mock-styled.p
            classname="mock-css. mock-css."
          >
            You have a client side authenticated integration that will not render within the AgencyCloud desktop CRM
          </mock-styled.p>
        </mock-styled.div>
      </mock-styled.div>
      <mock-styled.div
        classname=""
      >
        <mock-styled.div
          classname=""
        >
          <mock-styled.h2
            classname="mock-css."
          >
            App Status
          </mock-styled.h2>
          <mock-styled.p
            classname="mock-css. mock-css."
          >
            Your app is live and public in the AppMarket with a pending revision under review
          </mock-styled.p>
        </mock-styled.div>
      </mock-styled.div>
      <mock-styled.div
        classname=""
      >
        <mock-styled.h2
          classname="mock-css."
        >
          Permissions
        </mock-styled.h2>
        <mock-styled.div>
          Read applicants
        </mock-styled.div>
        <mock-styled.div>
          Read properties
        </mock-styled.div>
      </mock-styled.div>
    </mock-styled.div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`AppDetail should match snapshot where loading apps 1`] = `
{
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <mock-styled.div />
      <mock-styled.div
        classname=""
      >
        <mock-styled.div>
          <mock-styled.div />
        </mock-styled.div>
      </mock-styled.div>
    </div>
  </body>,
  "container": <div>
    <mock-styled.div />
    <mock-styled.div
      classname=""
    >
      <mock-styled.div>
        <mock-styled.div />
      </mock-styled.div>
    </mock-styled.div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`AppDetail should match snapshot where no app found 1`] = `
{
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <mock-styled.div />
      <mock-styled.div
        classname="mock-css. mock-css. mock-css. mock-css."
      >
        <div
          class="mock-css.
  padding: 0 1rem;
  display: flex;
  align-items: center;
  border-radius: var(--default-border-radius) 0 0 var(--default-border-radius);
  cursor: pointer;

  , {
    color: var(--color-white);
  }
"
          data-testid="close-icon"
        >
          <mock-styled.span
            classname=""
          >
            <svg />
          </mock-styled.span>
        </div>
        <div
          class="mock-css.
  padding: 1rem;
  opacity: 0;
  transition: 0.5s;
  width: 100%;
"
        >
          No record of this app found
        </div>
      </mock-styled.div>
    </div>
  </body>,
  "container": <div>
    <mock-styled.div />
    <mock-styled.div
      classname="mock-css. mock-css. mock-css. mock-css."
    >
      <div
        class="mock-css.
  padding: 0 1rem;
  display: flex;
  align-items: center;
  border-radius: var(--default-border-radius) 0 0 var(--default-border-radius);
  cursor: pointer;

  , {
    color: var(--color-white);
  }
"
        data-testid="close-icon"
      >
        <mock-styled.span
          classname=""
        >
          <svg />
        </mock-styled.span>
      </div>
      <div
        class="mock-css.
  padding: 1rem;
  opacity: 0;
  transition: 0.5s;
  width: 100%;
"
      >
        No record of this app found
      </div>
    </mock-styled.div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;
