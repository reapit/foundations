// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`PipelineControls should match snapshot for route /apps/:appId/pipeline 1`] = `
{
  "asFragment": [Function],
  "baseElement": <body>
    <div
      id="root"
    >
      <div />
      <div />
    </div>
    <div>
      <mock-styled.div />
      <div
        class="mock-css.
  @keyframes fade-in {
    from {
      opacity: 0;
    }

    to {
      opacity: 1;
    }
  }
  animation-duration: 0.5s;
  animation-fill-mode: both;
  animation-delay: 0.1s;
  animation-name: fade-in;
"
      >
        <mock-styled.span
          classname="mock-css.
  margin-bottom: 0.5rem;
 mock-css.
  font-size: 5rem;
"
        >
          <svg />
        </mock-styled.span>
        <mock-styled.h2
          classname=""
        >
          Pipeline
        </mock-styled.h2>
        <mock-styled.p
          classname="mock-css."
        >
          When you have a pipeline for your application, you can manage deployments from this page. Each table row refers to a deployment, and by expading the content, you can follow progress in real time.
        </mock-styled.p>
        <mock-styled.div>
          <mock-styled.div
            classname=""
          >
            <mock-styled.button
              classname="mock-css."
              disabled="true"
            >
              <mock-styled.div />
              Deploy
            </mock-styled.button>
            <mock-styled.button
              classname="mock-css."
            >
              <mock-styled.div />
              API Keys
            </mock-styled.button>
            <mock-styled.button
              classname="mock-css."
              disabled="false"
            >
              <mock-styled.div />
              Delete Pipeline
            </mock-styled.button>
            <mock-styled.button
              classname="mock-css."
            >
              <mock-styled.div />
              View Docs
            </mock-styled.button>
          </mock-styled.div>
        </mock-styled.div>
      </div>
    </div>
  </body>,
  "container": <div>
    <mock-styled.div />
    <div
      class="mock-css.
  @keyframes fade-in {
    from {
      opacity: 0;
    }

    to {
      opacity: 1;
    }
  }
  animation-duration: 0.5s;
  animation-fill-mode: both;
  animation-delay: 0.1s;
  animation-name: fade-in;
"
    >
      <mock-styled.span
        classname="mock-css.
  margin-bottom: 0.5rem;
 mock-css.
  font-size: 5rem;
"
      >
        <svg />
      </mock-styled.span>
      <mock-styled.h2
        classname=""
      >
        Pipeline
      </mock-styled.h2>
      <mock-styled.p
        classname="mock-css."
      >
        When you have a pipeline for your application, you can manage deployments from this page. Each table row refers to a deployment, and by expading the content, you can follow progress in real time.
      </mock-styled.p>
      <mock-styled.div>
        <mock-styled.div
          classname=""
        >
          <mock-styled.button
            classname="mock-css."
            disabled="true"
          >
            <mock-styled.div />
            Deploy
          </mock-styled.button>
          <mock-styled.button
            classname="mock-css."
          >
            <mock-styled.div />
            API Keys
          </mock-styled.button>
          <mock-styled.button
            classname="mock-css."
            disabled="false"
          >
            <mock-styled.div />
            Delete Pipeline
          </mock-styled.button>
          <mock-styled.button
            classname="mock-css."
          >
            <mock-styled.div />
            View Docs
          </mock-styled.button>
        </mock-styled.div>
      </mock-styled.div>
    </div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`PipelineControls should match snapshot for route /apps/:appId/pipeline/configure 1`] = `
{
  "asFragment": [Function],
  "baseElement": <body>
    <div
      id="root"
    >
      <div />
      <div />
    </div>
    <div
      id="root"
    />
    <div>
      <mock-styled.div />
      <div
        class="mock-css.
  @keyframes fade-in {
    from {
      opacity: 0;
    }

    to {
      opacity: 1;
    }
  }
  animation-duration: 0.5s;
  animation-fill-mode: both;
  animation-delay: 0.1s;
  animation-name: fade-in;
"
      >
        <mock-styled.span
          classname="mock-css.
  margin-bottom: 0.5rem;
 mock-css.
  font-size: 5rem;
"
        >
          <svg />
        </mock-styled.span>
        <mock-styled.h2
          classname=""
        >
          Pipeline
        </mock-styled.h2>
        <mock-styled.p
          classname="mock-css."
        >
          When you have a pipeline for your application, you can manage deployments from this page. Each table row refers to a deployment, and by expading the content, you can follow progress in real time.
        </mock-styled.p>
        <mock-styled.div>
          <mock-styled.div
            classname=""
          >
            <mock-styled.button
              classname="mock-css."
              disabled="true"
            >
              <mock-styled.div />
              Deploy
            </mock-styled.button>
            <mock-styled.button
              classname="mock-css."
            >
              <mock-styled.div />
              API Keys
            </mock-styled.button>
            <mock-styled.button
              classname="mock-css."
              disabled="false"
            >
              <mock-styled.div />
              Delete Pipeline
            </mock-styled.button>
            <mock-styled.button
              classname="mock-css."
            >
              <mock-styled.div />
              View Docs
            </mock-styled.button>
          </mock-styled.div>
        </mock-styled.div>
      </div>
    </div>
  </body>,
  "container": <div>
    <mock-styled.div />
    <div
      class="mock-css.
  @keyframes fade-in {
    from {
      opacity: 0;
    }

    to {
      opacity: 1;
    }
  }
  animation-duration: 0.5s;
  animation-fill-mode: both;
  animation-delay: 0.1s;
  animation-name: fade-in;
"
    >
      <mock-styled.span
        classname="mock-css.
  margin-bottom: 0.5rem;
 mock-css.
  font-size: 5rem;
"
      >
        <svg />
      </mock-styled.span>
      <mock-styled.h2
        classname=""
      >
        Pipeline
      </mock-styled.h2>
      <mock-styled.p
        classname="mock-css."
      >
        When you have a pipeline for your application, you can manage deployments from this page. Each table row refers to a deployment, and by expading the content, you can follow progress in real time.
      </mock-styled.p>
      <mock-styled.div>
        <mock-styled.div
          classname=""
        >
          <mock-styled.button
            classname="mock-css."
            disabled="true"
          >
            <mock-styled.div />
            Deploy
          </mock-styled.button>
          <mock-styled.button
            classname="mock-css."
          >
            <mock-styled.div />
            API Keys
          </mock-styled.button>
          <mock-styled.button
            classname="mock-css."
            disabled="false"
          >
            <mock-styled.div />
            Delete Pipeline
          </mock-styled.button>
          <mock-styled.button
            classname="mock-css."
          >
            <mock-styled.div />
            View Docs
          </mock-styled.button>
        </mock-styled.div>
      </mock-styled.div>
    </div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`PipelineControls should match snapshot for route /apps/:appId/pipeline/environment 1`] = `
{
  "asFragment": [Function],
  "baseElement": <body>
    <div
      id="root"
    >
      <div />
      <div />
    </div>
    <div
      id="root"
    />
    <div
      id="root"
    />
    <div
      id="root"
    />
    <div>
      <mock-styled.div />
      <div
        class="mock-css.
  @keyframes fade-in {
    from {
      opacity: 0;
    }

    to {
      opacity: 1;
    }
  }
  animation-duration: 0.5s;
  animation-fill-mode: both;
  animation-delay: 0.1s;
  animation-name: fade-in;
"
      >
        <mock-styled.span
          classname="mock-css.
  margin-bottom: 0.5rem;
 mock-css.
  font-size: 5rem;
"
        >
          <svg />
        </mock-styled.span>
        <mock-styled.h2
          classname=""
        >
          Pipeline
        </mock-styled.h2>
        <mock-styled.p
          classname="mock-css."
        >
          When you have a pipeline for your application, you can manage deployments from this page. Each table row refers to a deployment, and by expading the content, you can follow progress in real time.
        </mock-styled.p>
        <mock-styled.div>
          <mock-styled.div
            classname=""
          >
            <mock-styled.button
              classname="mock-css."
              disabled="true"
            >
              <mock-styled.div />
              Deploy
            </mock-styled.button>
            <mock-styled.button
              classname="mock-css."
            >
              <mock-styled.div />
              API Keys
            </mock-styled.button>
            <mock-styled.button
              classname="mock-css."
              disabled="false"
            >
              <mock-styled.div />
              Delete Pipeline
            </mock-styled.button>
            <mock-styled.button
              classname="mock-css."
            >
              <mock-styled.div />
              View Docs
            </mock-styled.button>
          </mock-styled.div>
        </mock-styled.div>
      </div>
    </div>
  </body>,
  "container": <div>
    <mock-styled.div />
    <div
      class="mock-css.
  @keyframes fade-in {
    from {
      opacity: 0;
    }

    to {
      opacity: 1;
    }
  }
  animation-duration: 0.5s;
  animation-fill-mode: both;
  animation-delay: 0.1s;
  animation-name: fade-in;
"
    >
      <mock-styled.span
        classname="mock-css.
  margin-bottom: 0.5rem;
 mock-css.
  font-size: 5rem;
"
      >
        <svg />
      </mock-styled.span>
      <mock-styled.h2
        classname=""
      >
        Pipeline
      </mock-styled.h2>
      <mock-styled.p
        classname="mock-css."
      >
        When you have a pipeline for your application, you can manage deployments from this page. Each table row refers to a deployment, and by expading the content, you can follow progress in real time.
      </mock-styled.p>
      <mock-styled.div>
        <mock-styled.div
          classname=""
        >
          <mock-styled.button
            classname="mock-css."
            disabled="true"
          >
            <mock-styled.div />
            Deploy
          </mock-styled.button>
          <mock-styled.button
            classname="mock-css."
          >
            <mock-styled.div />
            API Keys
          </mock-styled.button>
          <mock-styled.button
            classname="mock-css."
            disabled="false"
          >
            <mock-styled.div />
            Delete Pipeline
          </mock-styled.button>
          <mock-styled.button
            classname="mock-css."
          >
            <mock-styled.div />
            View Docs
          </mock-styled.button>
        </mock-styled.div>
      </mock-styled.div>
    </div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`PipelineControls should match snapshot for route /apps/:appId/pipeline/new 1`] = `
{
  "asFragment": [Function],
  "baseElement": <body>
    <div
      id="root"
    >
      <div />
      <div />
    </div>
    <div
      id="root"
    />
    <div
      id="root"
    />
    <div>
      <mock-styled.div />
      <div
        class="mock-css.
  @keyframes fade-in {
    from {
      opacity: 0;
    }

    to {
      opacity: 1;
    }
  }
  animation-duration: 0.5s;
  animation-fill-mode: both;
  animation-delay: 0.1s;
  animation-name: fade-in;
"
      >
        <mock-styled.span
          classname="mock-css.
  margin-bottom: 0.5rem;
 mock-css.
  font-size: 5rem;
"
        >
          <svg />
        </mock-styled.span>
        <mock-styled.h2
          classname=""
        >
          Pipeline
        </mock-styled.h2>
        <mock-styled.p
          classname="mock-css."
        >
          When you have a pipeline for your application, you can manage deployments from this page. Each table row refers to a deployment, and by expading the content, you can follow progress in real time.
        </mock-styled.p>
        <mock-styled.div>
          <mock-styled.div
            classname=""
          >
            <mock-styled.button
              classname="mock-css."
              disabled="true"
            >
              <mock-styled.div />
              Deploy
            </mock-styled.button>
            <mock-styled.button
              classname="mock-css."
            >
              <mock-styled.div />
              API Keys
            </mock-styled.button>
            <mock-styled.button
              classname="mock-css."
              disabled="false"
            >
              <mock-styled.div />
              Delete Pipeline
            </mock-styled.button>
            <mock-styled.button
              classname="mock-css."
            >
              <mock-styled.div />
              View Docs
            </mock-styled.button>
          </mock-styled.div>
        </mock-styled.div>
      </div>
    </div>
  </body>,
  "container": <div>
    <mock-styled.div />
    <div
      class="mock-css.
  @keyframes fade-in {
    from {
      opacity: 0;
    }

    to {
      opacity: 1;
    }
  }
  animation-duration: 0.5s;
  animation-fill-mode: both;
  animation-delay: 0.1s;
  animation-name: fade-in;
"
    >
      <mock-styled.span
        classname="mock-css.
  margin-bottom: 0.5rem;
 mock-css.
  font-size: 5rem;
"
      >
        <svg />
      </mock-styled.span>
      <mock-styled.h2
        classname=""
      >
        Pipeline
      </mock-styled.h2>
      <mock-styled.p
        classname="mock-css."
      >
        When you have a pipeline for your application, you can manage deployments from this page. Each table row refers to a deployment, and by expading the content, you can follow progress in real time.
      </mock-styled.p>
      <mock-styled.div>
        <mock-styled.div
          classname=""
        >
          <mock-styled.button
            classname="mock-css."
            disabled="true"
          >
            <mock-styled.div />
            Deploy
          </mock-styled.button>
          <mock-styled.button
            classname="mock-css."
          >
            <mock-styled.div />
            API Keys
          </mock-styled.button>
          <mock-styled.button
            classname="mock-css."
            disabled="false"
          >
            <mock-styled.div />
            Delete Pipeline
          </mock-styled.button>
          <mock-styled.button
            classname="mock-css."
          >
            <mock-styled.div />
            View Docs
          </mock-styled.button>
        </mock-styled.div>
      </mock-styled.div>
    </div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`PipelineControls should match snapshot where pipeline is provisioning 1`] = `
{
  "asFragment": [Function],
  "baseElement": <body>
    <div
      id="root"
    >
      <div />
      <div />
    </div>
    <div
      id="root"
    />
    <div
      id="root"
    />
    <div
      id="root"
    />
    <div
      id="root"
    />
    <div
      id="root"
    />
    <div>
      <mock-styled.div />
      <div
        class="mock-css.
  @keyframes fade-in {
    from {
      opacity: 0;
    }

    to {
      opacity: 1;
    }
  }
  animation-duration: 0.5s;
  animation-fill-mode: both;
  animation-delay: 0.1s;
  animation-name: fade-in;
"
      >
        <mock-styled.span
          classname="mock-css.
  margin-bottom: 0.5rem;
 mock-css.
  font-size: 5rem;
"
        >
          <svg />
        </mock-styled.span>
        <mock-styled.h2
          classname=""
        >
          Pipeline
        </mock-styled.h2>
        <mock-styled.p
          classname="mock-css."
        >
          When you have a pipeline for your application, you can manage deployments from this page. Each table row refers to a deployment, and by expading the content, you can follow progress in real time.
        </mock-styled.p>
        <mock-styled.div>
          <mock-styled.div
            classname=""
          >
            <mock-styled.button
              classname="mock-css. mock-css."
              disabled="true"
            >
              <mock-styled.div />
              Provision
            </mock-styled.button>
            <mock-styled.button
              classname="mock-css."
            >
              <mock-styled.div />
              API Keys
            </mock-styled.button>
            <mock-styled.button
              classname="mock-css."
              disabled="true"
            >
              <mock-styled.div />
              Delete Pipeline
            </mock-styled.button>
            <mock-styled.button
              classname="mock-css."
            >
              <mock-styled.div />
              View Docs
            </mock-styled.button>
          </mock-styled.div>
        </mock-styled.div>
      </div>
    </div>
  </body>,
  "container": <div>
    <mock-styled.div />
    <div
      class="mock-css.
  @keyframes fade-in {
    from {
      opacity: 0;
    }

    to {
      opacity: 1;
    }
  }
  animation-duration: 0.5s;
  animation-fill-mode: both;
  animation-delay: 0.1s;
  animation-name: fade-in;
"
    >
      <mock-styled.span
        classname="mock-css.
  margin-bottom: 0.5rem;
 mock-css.
  font-size: 5rem;
"
      >
        <svg />
      </mock-styled.span>
      <mock-styled.h2
        classname=""
      >
        Pipeline
      </mock-styled.h2>
      <mock-styled.p
        classname="mock-css."
      >
        When you have a pipeline for your application, you can manage deployments from this page. Each table row refers to a deployment, and by expading the content, you can follow progress in real time.
      </mock-styled.p>
      <mock-styled.div>
        <mock-styled.div
          classname=""
        >
          <mock-styled.button
            classname="mock-css. mock-css."
            disabled="true"
          >
            <mock-styled.div />
            Provision
          </mock-styled.button>
          <mock-styled.button
            classname="mock-css."
          >
            <mock-styled.div />
            API Keys
          </mock-styled.button>
          <mock-styled.button
            classname="mock-css."
            disabled="true"
          >
            <mock-styled.div />
            Delete Pipeline
          </mock-styled.button>
          <mock-styled.button
            classname="mock-css."
          >
            <mock-styled.div />
            View Docs
          </mock-styled.button>
        </mock-styled.div>
      </mock-styled.div>
    </div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`PipelineControls should match snapshot where there is no pipeline 1`] = `
{
  "asFragment": [Function],
  "baseElement": <body>
    <div
      id="root"
    >
      <div />
      <div />
    </div>
    <div
      id="root"
    />
    <div
      id="root"
    />
    <div
      id="root"
    />
    <div
      id="root"
    />
    <div>
      <mock-styled.div />
      <div
        class="mock-css.
  @keyframes fade-in {
    from {
      opacity: 0;
    }

    to {
      opacity: 1;
    }
  }
  animation-duration: 0.5s;
  animation-fill-mode: both;
  animation-delay: 0.1s;
  animation-name: fade-in;
"
      >
        <mock-styled.span
          classname="mock-css.
  margin-bottom: 0.5rem;
 mock-css.
  font-size: 5rem;
"
        >
          <svg />
        </mock-styled.span>
        <mock-styled.h2
          classname=""
        >
          Pipeline
        </mock-styled.h2>
        <mock-styled.p
          classname="mock-css."
        >
          To get started with Reapit IAAS pipelines, first take the time to read the documentation. Then visit this page to configure your first pipeline.
        </mock-styled.p>
        <mock-styled.div>
          <mock-styled.div
            classname=""
          >
            <mock-styled.button
              classname="mock-css."
            >
              <mock-styled.div />
              API Keys
            </mock-styled.button>
            <mock-styled.button
              classname="mock-css."
            >
              <mock-styled.div />
              View Docs
            </mock-styled.button>
          </mock-styled.div>
        </mock-styled.div>
      </div>
    </div>
  </body>,
  "container": <div>
    <mock-styled.div />
    <div
      class="mock-css.
  @keyframes fade-in {
    from {
      opacity: 0;
    }

    to {
      opacity: 1;
    }
  }
  animation-duration: 0.5s;
  animation-fill-mode: both;
  animation-delay: 0.1s;
  animation-name: fade-in;
"
    >
      <mock-styled.span
        classname="mock-css.
  margin-bottom: 0.5rem;
 mock-css.
  font-size: 5rem;
"
      >
        <svg />
      </mock-styled.span>
      <mock-styled.h2
        classname=""
      >
        Pipeline
      </mock-styled.h2>
      <mock-styled.p
        classname="mock-css."
      >
        To get started with Reapit IAAS pipelines, first take the time to read the documentation. Then visit this page to configure your first pipeline.
      </mock-styled.p>
      <mock-styled.div>
        <mock-styled.div
          classname=""
        >
          <mock-styled.button
            classname="mock-css."
          >
            <mock-styled.div />
            API Keys
          </mock-styled.button>
          <mock-styled.button
            classname="mock-css."
          >
            <mock-styled.div />
            View Docs
          </mock-styled.button>
        </mock-styled.div>
      </mock-styled.div>
    </div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;
