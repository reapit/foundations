// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`PipelineNew Should match snapshot 1`] = `
{
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <mock-styled.div />
      <mock-styled.h1
        classname=""
      >
        New Pipeline
      </mock-styled.h1>
      <mock-styled.div
        classname="mock-css.
  width: 100%;
  justify-content: space-evenly;
"
      >
        <mock-styled.div>
          <mock-styled.input
            id="deployments"
            name="pipeline-tabs"
            type="radio"
            value="deployments"
          />
          <mock-styled.label
            htmlfor="deployments"
          >
            <span
              class="mock-css.
  width: 100%;
  height: 100%;
  text-align: center;
  padding: 0.75rem 0;
  display: flex;
  justify-content: center;
  align-items: center;
  border-bottom: 2px solid var(--color-white);
  white-space: nowrap;
  font-size: var(--font-size-default);
  font-weight: var(--font-weight-medium);
  color: var(--color-grey-500);
"
            >
              Deployments
            </span>
          </mock-styled.label>
          <mock-styled.input
            id="configure"
            name="pipeline-tabs"
            type="radio"
            value="configure"
          />
          <mock-styled.label
            htmlfor="configure"
          >
            <span
              class="mock-css.
  width: 100%;
  height: 100%;
  text-align: center;
  padding: 0.75rem 0;
  display: flex;
  justify-content: center;
  align-items: center;
  border-bottom: 2px solid var(--color-white);
  white-space: nowrap;
  font-size: var(--font-size-default);
  font-weight: var(--font-weight-medium);
  color: var(--color-grey-500);
"
            >
              Configure
            </span>
          </mock-styled.label>
          <mock-styled.input
            id="environment"
            name="pipeline-tabs"
            type="radio"
            value="environment"
          />
          <mock-styled.label
            htmlfor="environment"
          >
            <span
              class="mock-css.
  width: 100%;
  height: 100%;
  text-align: center;
  padding: 0.75rem 0;
  display: flex;
  justify-content: center;
  align-items: center;
  border-bottom: 2px solid var(--color-white);
  white-space: nowrap;
  font-size: var(--font-size-default);
  font-weight: var(--font-weight-medium);
  color: var(--color-grey-500);
"
            >
              Environment Variables
            </span>
          </mock-styled.label>
        </mock-styled.div>
        <mock-styled.div
          classname="mock-css.
  width: 100%;
  justify-content: space-evenly;
"
        />
      </mock-styled.div>
      <mock-styled.p
        classname="mock-css."
      >
        Tell us about how we should build your application here. We assume that your application is a front end app and that, it uses either yarn or npm to run scripts decalared in a package.json file. We assume also that your application is bundled and that bundle is output to a local directory that we can deploy for you.
      </mock-styled.p>
      <form>
        <mock-styled.div
          classname="mock-css."
        >
          <mock-styled.div>
            <mock-styled.div>
              <mock-styled.label>
                Name
              </mock-styled.label>
              <mock-styled.input
                classname=""
                name="name"
              />
            </mock-styled.div>
          </mock-styled.div>
          <mock-styled.div>
            <mock-styled.div>
              <mock-styled.label>
                Deployment Branch
              </mock-styled.label>
              <mock-styled.input
                classname=""
                name="branch"
              />
            </mock-styled.div>
          </mock-styled.div>
          <mock-styled.div>
            <mock-styled.div>
              <mock-styled.label>
                Github Repository
              </mock-styled.label>
              <mock-styled.input
                classname=""
                name="repository"
                placeholder="https://github.com/org/repo"
              />
            </mock-styled.div>
          </mock-styled.div>
          <mock-styled.div>
            <mock-styled.div>
              <mock-styled.label>
                Package Manager
              </mock-styled.label>
              <mock-styled.select
                id="package-manager-select"
                name="packageManager"
              >
                <option
                  value="npm"
                >
                  NPM
                </option>
                <option
                  value="yarn"
                >
                  YARN
                </option>
                <option
                  value="yarn-berry"
                >
                  YARN BERRY
                </option>
              </mock-styled.select>
            </mock-styled.div>
          </mock-styled.div>
          <mock-styled.div>
            <mock-styled.div>
              <mock-styled.label>
                Build Command
              </mock-styled.label>
              <mock-styled.input
                classname=""
                name="buildCommand"
              />
            </mock-styled.div>
          </mock-styled.div>
          <mock-styled.div>
            <mock-styled.div>
              <mock-styled.label>
                Build Directory
              </mock-styled.label>
              <mock-styled.input
                classname=""
                name="outDir"
              />
            </mock-styled.div>
          </mock-styled.div>
        </mock-styled.div>
      </form>
      <mock-styled.div
        classname=""
      />
      <mock-styled.div
        classname=""
      >
        <mock-styled.button
          classname="mock-css. mock-css."
        >
          <mock-styled.div />
          <mock-styled.span
            classname="mock-css.
  font-size: var(--font-size-subheading);
"
          >
            <svg />
          </mock-styled.span>
        </mock-styled.button>
      </mock-styled.div>
    </div>
  </body>,
  "container": <div>
    <mock-styled.div />
    <mock-styled.h1
      classname=""
    >
      New Pipeline
    </mock-styled.h1>
    <mock-styled.div
      classname="mock-css.
  width: 100%;
  justify-content: space-evenly;
"
    >
      <mock-styled.div>
        <mock-styled.input
          id="deployments"
          name="pipeline-tabs"
          type="radio"
          value="deployments"
        />
        <mock-styled.label
          htmlfor="deployments"
        >
          <span
            class="mock-css.
  width: 100%;
  height: 100%;
  text-align: center;
  padding: 0.75rem 0;
  display: flex;
  justify-content: center;
  align-items: center;
  border-bottom: 2px solid var(--color-white);
  white-space: nowrap;
  font-size: var(--font-size-default);
  font-weight: var(--font-weight-medium);
  color: var(--color-grey-500);
"
          >
            Deployments
          </span>
        </mock-styled.label>
        <mock-styled.input
          id="configure"
          name="pipeline-tabs"
          type="radio"
          value="configure"
        />
        <mock-styled.label
          htmlfor="configure"
        >
          <span
            class="mock-css.
  width: 100%;
  height: 100%;
  text-align: center;
  padding: 0.75rem 0;
  display: flex;
  justify-content: center;
  align-items: center;
  border-bottom: 2px solid var(--color-white);
  white-space: nowrap;
  font-size: var(--font-size-default);
  font-weight: var(--font-weight-medium);
  color: var(--color-grey-500);
"
          >
            Configure
          </span>
        </mock-styled.label>
        <mock-styled.input
          id="environment"
          name="pipeline-tabs"
          type="radio"
          value="environment"
        />
        <mock-styled.label
          htmlfor="environment"
        >
          <span
            class="mock-css.
  width: 100%;
  height: 100%;
  text-align: center;
  padding: 0.75rem 0;
  display: flex;
  justify-content: center;
  align-items: center;
  border-bottom: 2px solid var(--color-white);
  white-space: nowrap;
  font-size: var(--font-size-default);
  font-weight: var(--font-weight-medium);
  color: var(--color-grey-500);
"
          >
            Environment Variables
          </span>
        </mock-styled.label>
      </mock-styled.div>
      <mock-styled.div
        classname="mock-css.
  width: 100%;
  justify-content: space-evenly;
"
      />
    </mock-styled.div>
    <mock-styled.p
      classname="mock-css."
    >
      Tell us about how we should build your application here. We assume that your application is a front end app and that, it uses either yarn or npm to run scripts decalared in a package.json file. We assume also that your application is bundled and that bundle is output to a local directory that we can deploy for you.
    </mock-styled.p>
    <form>
      <mock-styled.div
        classname="mock-css."
      >
        <mock-styled.div>
          <mock-styled.div>
            <mock-styled.label>
              Name
            </mock-styled.label>
            <mock-styled.input
              classname=""
              name="name"
            />
          </mock-styled.div>
        </mock-styled.div>
        <mock-styled.div>
          <mock-styled.div>
            <mock-styled.label>
              Deployment Branch
            </mock-styled.label>
            <mock-styled.input
              classname=""
              name="branch"
            />
          </mock-styled.div>
        </mock-styled.div>
        <mock-styled.div>
          <mock-styled.div>
            <mock-styled.label>
              Github Repository
            </mock-styled.label>
            <mock-styled.input
              classname=""
              name="repository"
              placeholder="https://github.com/org/repo"
            />
          </mock-styled.div>
        </mock-styled.div>
        <mock-styled.div>
          <mock-styled.div>
            <mock-styled.label>
              Package Manager
            </mock-styled.label>
            <mock-styled.select
              id="package-manager-select"
              name="packageManager"
            >
              <option
                value="npm"
              >
                NPM
              </option>
              <option
                value="yarn"
              >
                YARN
              </option>
              <option
                value="yarn-berry"
              >
                YARN BERRY
              </option>
            </mock-styled.select>
          </mock-styled.div>
        </mock-styled.div>
        <mock-styled.div>
          <mock-styled.div>
            <mock-styled.label>
              Build Command
            </mock-styled.label>
            <mock-styled.input
              classname=""
              name="buildCommand"
            />
          </mock-styled.div>
        </mock-styled.div>
        <mock-styled.div>
          <mock-styled.div>
            <mock-styled.label>
              Build Directory
            </mock-styled.label>
            <mock-styled.input
              classname=""
              name="outDir"
            />
          </mock-styled.div>
        </mock-styled.div>
      </mock-styled.div>
    </form>
    <mock-styled.div
      classname=""
    />
    <mock-styled.div
      classname=""
    >
      <mock-styled.button
        classname="mock-css. mock-css."
      >
        <mock-styled.div />
        <mock-styled.span
          classname="mock-css.
  font-size: var(--font-size-subheading);
"
        >
          <svg />
        </mock-styled.span>
      </mock-styled.button>
    </mock-styled.div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`PipelineNew should match snapshot for mobile view 1`] = `
{
  "asFragment": [Function],
  "baseElement": <body>
    <div
      id="root"
    >
      <div />
    </div>
    <div>
      <mock-styled.div />
      <mock-styled.h1
        classname=""
      >
        New Pipeline
      </mock-styled.h1>
      <mock-styled.div
        classname="mock-css.
  width: 100%;
  justify-content: space-evenly;
"
      >
        <mock-styled.div>
          <mock-styled.input
            id="deployments"
            name="pipeline-tabs"
            type="radio"
            value="deployments"
          />
          <mock-styled.label
            htmlfor="deployments"
          >
            <span
              class="mock-css.
  width: 100%;
  height: 100%;
  text-align: center;
  padding: 0.75rem 0;
  display: flex;
  justify-content: center;
  align-items: center;
  border-bottom: 2px solid var(--color-white);
  white-space: nowrap;
  font-size: var(--font-size-default);
  font-weight: var(--font-weight-medium);
  color: var(--color-grey-500);
"
            >
              Deployments
            </span>
          </mock-styled.label>
          <mock-styled.input
            id="configure"
            name="pipeline-tabs"
            type="radio"
            value="configure"
          />
          <mock-styled.label
            htmlfor="configure"
          >
            <span
              class="mock-css.
  width: 100%;
  height: 100%;
  text-align: center;
  padding: 0.75rem 0;
  display: flex;
  justify-content: center;
  align-items: center;
  border-bottom: 2px solid var(--color-white);
  white-space: nowrap;
  font-size: var(--font-size-default);
  font-weight: var(--font-weight-medium);
  color: var(--color-grey-500);
"
            >
              Configure
            </span>
          </mock-styled.label>
          <mock-styled.input
            id="environment"
            name="pipeline-tabs"
            type="radio"
            value="environment"
          />
          <mock-styled.label
            htmlfor="environment"
          >
            <span
              class="mock-css.
  width: 100%;
  height: 100%;
  text-align: center;
  padding: 0.75rem 0;
  display: flex;
  justify-content: center;
  align-items: center;
  border-bottom: 2px solid var(--color-white);
  white-space: nowrap;
  font-size: var(--font-size-default);
  font-weight: var(--font-weight-medium);
  color: var(--color-grey-500);
"
            >
              Environment Variables
            </span>
          </mock-styled.label>
        </mock-styled.div>
        <mock-styled.div
          classname="mock-css.
  width: 100%;
  justify-content: space-evenly;
"
        />
      </mock-styled.div>
      <mock-styled.p
        classname="mock-css."
      >
        Tell us about how we should build your application here. We assume that your application is a front end app and that, it uses either yarn or npm to run scripts decalared in a package.json file. We assume also that your application is bundled and that bundle is output to a local directory that we can deploy for you.
      </mock-styled.p>
      <form>
        <mock-styled.div
          classname="mock-css."
        >
          <mock-styled.div>
            <mock-styled.div>
              <mock-styled.label>
                Name
              </mock-styled.label>
              <mock-styled.input
                classname=""
                name="name"
              />
            </mock-styled.div>
          </mock-styled.div>
          <mock-styled.div>
            <mock-styled.div>
              <mock-styled.label>
                Deployment Branch
              </mock-styled.label>
              <mock-styled.input
                classname=""
                name="branch"
              />
            </mock-styled.div>
          </mock-styled.div>
          <mock-styled.div>
            <mock-styled.div>
              <mock-styled.label>
                Github Repository
              </mock-styled.label>
              <mock-styled.input
                classname=""
                name="repository"
                placeholder="https://github.com/org/repo"
              />
            </mock-styled.div>
          </mock-styled.div>
          <mock-styled.div>
            <mock-styled.div>
              <mock-styled.label>
                Package Manager
              </mock-styled.label>
              <mock-styled.select
                id="package-manager-select"
                name="packageManager"
              >
                <option
                  value="npm"
                >
                  NPM
                </option>
                <option
                  value="yarn"
                >
                  YARN
                </option>
                <option
                  value="yarn-berry"
                >
                  YARN BERRY
                </option>
              </mock-styled.select>
            </mock-styled.div>
          </mock-styled.div>
          <mock-styled.div>
            <mock-styled.div>
              <mock-styled.label>
                Build Command
              </mock-styled.label>
              <mock-styled.input
                classname=""
                name="buildCommand"
              />
            </mock-styled.div>
          </mock-styled.div>
          <mock-styled.div>
            <mock-styled.div>
              <mock-styled.label>
                Build Directory
              </mock-styled.label>
              <mock-styled.input
                classname=""
                name="outDir"
              />
            </mock-styled.div>
          </mock-styled.div>
        </mock-styled.div>
      </form>
      <mock-styled.div
        classname=""
      />
      <mock-styled.div
        classname=""
      >
        <mock-styled.button
          classname="mock-css. mock-css."
        >
          <mock-styled.div />
          <mock-styled.span
            classname="mock-css.
  font-size: var(--font-size-subheading);
"
          >
            <svg />
          </mock-styled.span>
        </mock-styled.button>
      </mock-styled.div>
    </div>
  </body>,
  "container": <div>
    <mock-styled.div />
    <mock-styled.h1
      classname=""
    >
      New Pipeline
    </mock-styled.h1>
    <mock-styled.div
      classname="mock-css.
  width: 100%;
  justify-content: space-evenly;
"
    >
      <mock-styled.div>
        <mock-styled.input
          id="deployments"
          name="pipeline-tabs"
          type="radio"
          value="deployments"
        />
        <mock-styled.label
          htmlfor="deployments"
        >
          <span
            class="mock-css.
  width: 100%;
  height: 100%;
  text-align: center;
  padding: 0.75rem 0;
  display: flex;
  justify-content: center;
  align-items: center;
  border-bottom: 2px solid var(--color-white);
  white-space: nowrap;
  font-size: var(--font-size-default);
  font-weight: var(--font-weight-medium);
  color: var(--color-grey-500);
"
          >
            Deployments
          </span>
        </mock-styled.label>
        <mock-styled.input
          id="configure"
          name="pipeline-tabs"
          type="radio"
          value="configure"
        />
        <mock-styled.label
          htmlfor="configure"
        >
          <span
            class="mock-css.
  width: 100%;
  height: 100%;
  text-align: center;
  padding: 0.75rem 0;
  display: flex;
  justify-content: center;
  align-items: center;
  border-bottom: 2px solid var(--color-white);
  white-space: nowrap;
  font-size: var(--font-size-default);
  font-weight: var(--font-weight-medium);
  color: var(--color-grey-500);
"
          >
            Configure
          </span>
        </mock-styled.label>
        <mock-styled.input
          id="environment"
          name="pipeline-tabs"
          type="radio"
          value="environment"
        />
        <mock-styled.label
          htmlfor="environment"
        >
          <span
            class="mock-css.
  width: 100%;
  height: 100%;
  text-align: center;
  padding: 0.75rem 0;
  display: flex;
  justify-content: center;
  align-items: center;
  border-bottom: 2px solid var(--color-white);
  white-space: nowrap;
  font-size: var(--font-size-default);
  font-weight: var(--font-weight-medium);
  color: var(--color-grey-500);
"
          >
            Environment Variables
          </span>
        </mock-styled.label>
      </mock-styled.div>
      <mock-styled.div
        classname="mock-css.
  width: 100%;
  justify-content: space-evenly;
"
      />
    </mock-styled.div>
    <mock-styled.p
      classname="mock-css."
    >
      Tell us about how we should build your application here. We assume that your application is a front end app and that, it uses either yarn or npm to run scripts decalared in a package.json file. We assume also that your application is bundled and that bundle is output to a local directory that we can deploy for you.
    </mock-styled.p>
    <form>
      <mock-styled.div
        classname="mock-css."
      >
        <mock-styled.div>
          <mock-styled.div>
            <mock-styled.label>
              Name
            </mock-styled.label>
            <mock-styled.input
              classname=""
              name="name"
            />
          </mock-styled.div>
        </mock-styled.div>
        <mock-styled.div>
          <mock-styled.div>
            <mock-styled.label>
              Deployment Branch
            </mock-styled.label>
            <mock-styled.input
              classname=""
              name="branch"
            />
          </mock-styled.div>
        </mock-styled.div>
        <mock-styled.div>
          <mock-styled.div>
            <mock-styled.label>
              Github Repository
            </mock-styled.label>
            <mock-styled.input
              classname=""
              name="repository"
              placeholder="https://github.com/org/repo"
            />
          </mock-styled.div>
        </mock-styled.div>
        <mock-styled.div>
          <mock-styled.div>
            <mock-styled.label>
              Package Manager
            </mock-styled.label>
            <mock-styled.select
              id="package-manager-select"
              name="packageManager"
            >
              <option
                value="npm"
              >
                NPM
              </option>
              <option
                value="yarn"
              >
                YARN
              </option>
              <option
                value="yarn-berry"
              >
                YARN BERRY
              </option>
            </mock-styled.select>
          </mock-styled.div>
        </mock-styled.div>
        <mock-styled.div>
          <mock-styled.div>
            <mock-styled.label>
              Build Command
            </mock-styled.label>
            <mock-styled.input
              classname=""
              name="buildCommand"
            />
          </mock-styled.div>
        </mock-styled.div>
        <mock-styled.div>
          <mock-styled.div>
            <mock-styled.label>
              Build Directory
            </mock-styled.label>
            <mock-styled.input
              classname=""
              name="outDir"
            />
          </mock-styled.div>
        </mock-styled.div>
      </mock-styled.div>
    </form>
    <mock-styled.div
      classname=""
    />
    <mock-styled.div
      classname=""
    >
      <mock-styled.button
        classname="mock-css. mock-css."
      >
        <mock-styled.div />
        <mock-styled.span
          classname="mock-css.
  font-size: var(--font-size-subheading);
"
        >
          <svg />
        </mock-styled.span>
      </mock-styled.button>
    </mock-styled.div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;
