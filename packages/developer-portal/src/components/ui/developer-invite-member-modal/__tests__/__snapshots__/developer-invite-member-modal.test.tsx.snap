// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`developer-invite-member-modal InviteMemberModal should match snapshot with default 1`] = `""`;

exports[`developer-invite-member-modal InviteMemberModal should match snapshot with visible true 1`] = `
<Component
  footer={
    <React.Fragment>
      <Unknown
        type="button"
        variant="secondary"
      >
        Cancel
      </Unknown>
      <Unknown
        type="submit"
        variant="primary"
      >
        Send Invite
      </Unknown>
    </React.Fragment>
  }
  title="Invite New Member"
  visible={true}
>
  <Component
    className="px-4"
  >
    Please enter a name and email address below to invite a new member to your organisation:
  </Component>
  <Formik
    initialValues={
      Object {
        "developerInviteEmail": "",
        "developerInviteMessage": "",
        "developerInviteName": "",
      }
    }
    onSubmit={[Function]}
    validationSchema={
      ObjectSchema {
        "_blacklist": RefSet {
          "list": Set {},
          "refs": Map {},
        },
        "_conditions": Array [],
        "_defaultDefault": [Function],
        "_deps": Array [],
        "_excludedEdges": Array [],
        "_exclusive": Object {},
        "_mutate": undefined,
        "_nodes": Array [
          "developerInviteMessage",
          "developerInviteEmail",
          "developerInviteName",
        ],
        "_options": Object {
          "abortEarly": true,
          "recursive": true,
        },
        "_type": "object",
        "_typeError": [Function],
        "_whitelist": RefSet {
          "list": Set {},
          "refs": Map {},
        },
        "fields": Object {
          "developerInviteEmail": StringSchema {
            "_blacklist": RefSet {
              "list": Set {},
              "refs": Map {},
            },
            "_conditions": Array [],
            "_deps": Array [],
            "_exclusive": Object {
              "matches": false,
              "required": true,
              "trim": false,
            },
            "_mutate": undefined,
            "_options": Object {
              "abortEarly": true,
              "recursive": true,
            },
            "_type": "string",
            "_typeError": [Function],
            "_whitelist": RefSet {
              "list": Set {},
              "refs": Map {},
            },
            "tests": Array [
              [Function],
              [Function],
              [Function],
            ],
            "transforms": Array [
              [Function],
              [Function],
            ],
            "type": "string",
          },
          "developerInviteMessage": StringSchema {
            "_blacklist": RefSet {
              "list": Set {},
              "refs": Map {},
            },
            "_conditions": Array [],
            "_deps": Array [],
            "_exclusive": Object {
              "max": true,
              "trim": false,
            },
            "_mutate": undefined,
            "_options": Object {
              "abortEarly": true,
              "recursive": true,
            },
            "_type": "string",
            "_typeError": [Function],
            "_whitelist": RefSet {
              "list": Set {},
              "refs": Map {},
            },
            "tests": Array [
              [Function],
              [Function],
            ],
            "transforms": Array [
              [Function],
              [Function],
            ],
            "type": "string",
          },
          "developerInviteName": StringSchema {
            "_blacklist": RefSet {
              "list": Set {},
              "refs": Map {},
            },
            "_conditions": Array [],
            "_deps": Array [],
            "_exclusive": Object {
              "matches": false,
              "required": true,
              "trim": false,
            },
            "_mutate": undefined,
            "_options": Object {
              "abortEarly": true,
              "recursive": true,
            },
            "_type": "string",
            "_typeError": [Function],
            "_whitelist": RefSet {
              "list": Set {},
              "refs": Map {},
            },
            "tests": Array [
              [Function],
              [Function],
              [Function],
            ],
            "transforms": Array [
              [Function],
              [Function],
            ],
            "type": "string",
          },
        },
        "tests": Array [],
        "transforms": Array [
          [Function],
        ],
        "type": "object",
      }
    }
  >
    <Component />
  </Formik>
</Component>
`;

exports[`developer-invite-member-modal InviteMemberModalInput should match snapshot 1`] = `
<Fragment>
  <Component
    id="developerInviteName"
    labelText="Name"
    name="developerInviteName"
    placeholder="Name"
    required={true}
    type="text"
  />
  <Component
    id="developerInviteEmail"
    labelText="Email"
    name="developerInviteEmail"
    placeholder="Email"
    required={true}
    type="email"
  />
  <Component
    id="developerInviteMessage"
    labelText="Message (Optional)"
    name="developerInviteMessage"
    placeholder="Message"
  />
</Fragment>
`;
