// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`FormWizard Matches snapshot 1`] = `
{
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <div
        class="mocked-styled-93 el-snack-holder"
      />
      <div
        class="mocked-styled-95 el-steps"
      >
        <div
          class="el-is-active el-step"
          data-testid="step-0"
          role="button"
          tabindex="0"
        >
          1
        </div>
      </div>
      <form
        style="margin-top: 1rem;"
      >
        <div
          class="el-form-layout-has-margin el-form-layout"
        >
          <div
            class="mocked-styled-135 el-input-wrap-full"
          >
            <div
              class="mocked-styled-40 el-input-group"
            >
              <input
                aria-label="Input type text"
                class="mocked-styled-38 el-input"
                id="website"
                name="website"
                placeholder="mycompany.co.uk"
                type="text"
              />
              <label
                class="mocked-styled-41 el-label"
                for="website"
              >
                Website
              </label>
            </div>
          </div>
        </div>
        <div
          class="mocked-styled-2 el-button-group"
        >
          <div
            class="mocked-styled-3 el-button-group-inner"
          >
            <button
              class="el-intent-neutral el-button"
              disabled=""
            >
              <div
                class="mocked-styled-0 el-button-loader"
              />
              Previous
            </button>
            <button
              class="el-intent-primary el-button"
            >
              <div
                class="mocked-styled-0 el-button-loader"
              />
              Submit
            </button>
          </div>
        </div>
      </form>
    </div>
  </body>,
  "container": <div>
    <div
      class="mocked-styled-93 el-snack-holder"
    />
    <div
      class="mocked-styled-95 el-steps"
    >
      <div
        class="el-is-active el-step"
        data-testid="step-0"
        role="button"
        tabindex="0"
      >
        1
      </div>
    </div>
    <form
      style="margin-top: 1rem;"
    >
      <div
        class="el-form-layout-has-margin el-form-layout"
      >
        <div
          class="mocked-styled-135 el-input-wrap-full"
        >
          <div
            class="mocked-styled-40 el-input-group"
          >
            <input
              aria-label="Input type text"
              class="mocked-styled-38 el-input"
              id="website"
              name="website"
              placeholder="mycompany.co.uk"
              type="text"
            />
            <label
              class="mocked-styled-41 el-label"
              for="website"
            >
              Website
            </label>
          </div>
        </div>
      </div>
      <div
        class="mocked-styled-2 el-button-group"
      >
        <div
          class="mocked-styled-3 el-button-group-inner"
        >
          <button
            class="el-intent-neutral el-button"
            disabled=""
          >
            <div
              class="mocked-styled-0 el-button-loader"
            />
            Previous
          </button>
          <button
            class="el-intent-primary el-button"
          >
            <div
              class="mocked-styled-0 el-button-loader"
            />
            Submit
          </button>
        </div>
      </div>
    </form>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;
