// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`WebhooksPingForm should match a snapshot 1`] = `
{
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <mock-styled.div />
      <form
        class="mock-css.
  padding: 1.5rem;
"
      >
        <mock-styled.h2
          classname="mock-css.
  margin-left: 0.5rem;
"
        >
          Test Webhook Subscription
        </mock-styled.h2>
        <mock-styled.div
          classname=""
        >
          <mock-styled.div
            classname=""
          >
            <mock-styled.label
              classname="mock-css.
  margin-left: 0.5rem;
"
            >
              Subscription topics
            </mock-styled.label>
            <mock-styled.div>
              <mock-styled.select
                name="topicId"
              >
                <option
                  value=""
                >
                  None selected
                </option>
                <option />
                <option />
                <option />
              </mock-styled.select>
            </mock-styled.div>
          </mock-styled.div>
          <mock-styled.div
            classname=""
          >
            <mock-styled.p
              classname=""
            >
              To test your Webhook subscription, please select a subscription topic and an example payload for that topic will be sent to the configured URL. For more information, please
               
              <a>
                click here
              </a>
            </mock-styled.p>
            <mock-styled.div
              classname="mock-css.
  margin-left: auto;
"
            >
              <mock-styled.div
                classname="mock-css."
              >
                <mock-styled.button
                  classname="mock-css."
                  type="button"
                >
                  <mock-styled.div />
                  Cancel
                </mock-styled.button>
                <mock-styled.button
                  classname="mock-css."
                  type="submit"
                >
                  <mock-styled.div />
                  Test
                </mock-styled.button>
              </mock-styled.div>
            </mock-styled.div>
          </mock-styled.div>
        </mock-styled.div>
      </form>
    </div>
  </body>,
  "container": <div>
    <mock-styled.div />
    <form
      class="mock-css.
  padding: 1.5rem;
"
    >
      <mock-styled.h2
        classname="mock-css.
  margin-left: 0.5rem;
"
      >
        Test Webhook Subscription
      </mock-styled.h2>
      <mock-styled.div
        classname=""
      >
        <mock-styled.div
          classname=""
        >
          <mock-styled.label
            classname="mock-css.
  margin-left: 0.5rem;
"
          >
            Subscription topics
          </mock-styled.label>
          <mock-styled.div>
            <mock-styled.select
              name="topicId"
            >
              <option
                value=""
              >
                None selected
              </option>
              <option />
              <option />
              <option />
            </mock-styled.select>
          </mock-styled.div>
        </mock-styled.div>
        <mock-styled.div
          classname=""
        >
          <mock-styled.p
            classname=""
          >
            To test your Webhook subscription, please select a subscription topic and an example payload for that topic will be sent to the configured URL. For more information, please
             
            <a>
              click here
            </a>
          </mock-styled.p>
          <mock-styled.div
            classname="mock-css.
  margin-left: auto;
"
          >
            <mock-styled.div
              classname="mock-css."
            >
              <mock-styled.button
                classname="mock-css."
                type="button"
              >
                <mock-styled.div />
                Cancel
              </mock-styled.button>
              <mock-styled.button
                classname="mock-css."
                type="submit"
              >
                <mock-styled.div />
                Test
              </mock-styled.button>
            </mock-styled.div>
          </mock-styled.div>
        </mock-styled.div>
      </mock-styled.div>
    </form>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;
