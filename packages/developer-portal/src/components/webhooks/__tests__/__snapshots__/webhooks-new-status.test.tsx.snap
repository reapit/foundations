// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`WebhooksNewStatus should match a snapshot 1`] = `
{
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <mock-styled.div />
      <div
        class="mock-css.
  margin-bottom: 2.5rem;
"
      >
        <mock-styled.p
          classname="mock-css. mock-css."
        >
          Selecting active status will determine whether the webhook will fire when changes are made. This will effect your consumption costs so you may wish to disable it periodically. Ignoring when the etag only changes will mean the webhoook only fires when customer data changes.
        </mock-styled.p>
      </div>
      <mock-styled.div
        classname="mock-css.
  @keyframes fade-in {
    from {
      opacity: 0;
    }

    to {
      opacity: 1;
    }
  }
  animation-duration: 0.5s;
  animation-fill-mode: both;
  animation-delay: 0.1s;
  animation-name: fade-in;
"
      >
        <mock-styled.div>
          <mock-styled.div>
            <mock-styled.input
              id="status-toggle"
              type="checkbox"
            />
            <mock-styled.label
              classname="mock-css.
  margin-top: 0.25rem;
 mock-css."
              htmlfor="status-toggle"
            >
              <mock-styled.span>
                Active
              </mock-styled.span>
              <mock-styled.span>
                Inactive
              </mock-styled.span>
            </mock-styled.label>
            <mock-styled.label>
              Status
            </mock-styled.label>
          </mock-styled.div>
        </mock-styled.div>
        <mock-styled.div>
          <mock-styled.div>
            <mock-styled.input
              classname=""
              id="test-static-id"
              type="checkbox"
            />
            <mock-styled.label
              htmlfor="test-static-id"
            >
              Ignore where only the etag has been modified
            </mock-styled.label>
            <mock-styled.span
              classname=""
            >
              Ignore
            </mock-styled.span>
          </mock-styled.div>
        </mock-styled.div>
      </mock-styled.div>
    </div>
  </body>,
  "container": <div>
    <mock-styled.div />
    <div
      class="mock-css.
  margin-bottom: 2.5rem;
"
    >
      <mock-styled.p
        classname="mock-css. mock-css."
      >
        Selecting active status will determine whether the webhook will fire when changes are made. This will effect your consumption costs so you may wish to disable it periodically. Ignoring when the etag only changes will mean the webhoook only fires when customer data changes.
      </mock-styled.p>
    </div>
    <mock-styled.div
      classname="mock-css.
  @keyframes fade-in {
    from {
      opacity: 0;
    }

    to {
      opacity: 1;
    }
  }
  animation-duration: 0.5s;
  animation-fill-mode: both;
  animation-delay: 0.1s;
  animation-name: fade-in;
"
    >
      <mock-styled.div>
        <mock-styled.div>
          <mock-styled.input
            id="status-toggle"
            type="checkbox"
          />
          <mock-styled.label
            classname="mock-css.
  margin-top: 0.25rem;
 mock-css."
            htmlfor="status-toggle"
          >
            <mock-styled.span>
              Active
            </mock-styled.span>
            <mock-styled.span>
              Inactive
            </mock-styled.span>
          </mock-styled.label>
          <mock-styled.label>
            Status
          </mock-styled.label>
        </mock-styled.div>
      </mock-styled.div>
      <mock-styled.div>
        <mock-styled.div>
          <mock-styled.input
            classname=""
            id="test-static-id"
            type="checkbox"
          />
          <mock-styled.label
            htmlfor="test-static-id"
          >
            Ignore where only the etag has been modified
          </mock-styled.label>
          <mock-styled.span
            classname=""
          >
            Ignore
          </mock-styled.span>
        </mock-styled.div>
      </mock-styled.div>
    </mock-styled.div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;
