// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`WebhooksEditControls should match a snapshot with controls content 1`] = `
{
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <mock-styled.div />
      <div
        class="el-flex-container el-flex-justify-center"
      >
        <mock-styled.div>
          <mock-styled.div
            classname=""
          >
            <mock-styled.button
              classname="el-intent-primary"
            >
              <mock-styled.div />
              Edit
            </mock-styled.button>
            <mock-styled.button
              classname="el-intent-primary"
            >
              <mock-styled.div />
              Ping
            </mock-styled.button>
            <mock-styled.button
              classname="el-intent-neutral"
            >
              <mock-styled.div />
              Copy Public Key
            </mock-styled.button>
          </mock-styled.div>
        </mock-styled.div>
      </div>
    </div>
  </body>,
  "container": <div>
    <mock-styled.div />
    <div
      class="el-flex-container el-flex-justify-center"
    >
      <mock-styled.div>
        <mock-styled.div
          classname=""
        >
          <mock-styled.button
            classname="el-intent-primary"
          >
            <mock-styled.div />
            Edit
          </mock-styled.button>
          <mock-styled.button
            classname="el-intent-primary"
          >
            <mock-styled.div />
            Ping
          </mock-styled.button>
          <mock-styled.button
            classname="el-intent-neutral"
          >
            <mock-styled.div />
            Copy Public Key
          </mock-styled.button>
        </mock-styled.div>
      </mock-styled.div>
    </div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`WebhooksEditControls should match a snapshot with manage content 1`] = `
{
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <mock-styled.div />
      <form
        class="el-p8"
      >
        <div
          class="el-flex-container el-flex-justify-between el-flex-align-center el-mb11"
        >
          <mock-styled.h2
            classname="el-text-base el-has-bold-text"
          >
            Edit Webhook
          </mock-styled.h2>
          <mock-styled.div>
            <mock-styled.div
              classname="el-button-group-align-right"
            >
              <mock-styled.button
                classname="el-intent-neutral"
                disabled="false"
                type="button"
              >
                <mock-styled.div />
                Delete
              </mock-styled.button>
              <mock-styled.button
                classname="el-intent-primary"
                disabled="false"
                type="button"
              >
                <mock-styled.div />
                Cancel
              </mock-styled.button>
              <mock-styled.button
                classname="el-intent-primary"
                disabled="false"
                type="submit"
              >
                <mock-styled.div />
                Update
              </mock-styled.button>
            </mock-styled.div>
          </mock-styled.div>
        </div>
        <mock-styled.div
          classname=""
        >
          <mock-styled.div>
            <mock-styled.div>
              <mock-styled.input
                classname=""
                id="test-static-id"
                name="url"
                placeholder="Enter secure https:// url"
              />
              <mock-styled.label
                htmlfor="test-static-id"
              >
                Webhook URL
              </mock-styled.label>
            </mock-styled.div>
          </mock-styled.div>
          <mock-styled.div>
            <div
              class="el-flex-container el-flex-wrap el-flex-justify-between el-flex-align-center el-mb5"
            >
              <mock-styled.div
                classname="mock-css.
  min-width: 210px;
"
              >
                <mock-styled.input
                  classname=""
                  id="test-static-id"
                  placeholder="Search topics to get started"
                />
                <mock-styled.span
                  classname="el-icon-new"
                  role="img"
                  style="font-size: 1rem;"
                >
                  <svg
                    fill="none"
                    height="1em"
                    style="font-size: 1rem;"
                    viewBox="0 0 24 24"
                    width="1em"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      d="m21.71 20.29-5.4-5.39A7.9 7.9 0 0 0 18 10a8 8 0 1 0-8 8 7.9 7.9 0 0 0 4.9-1.69l5.39 5.4a1 1 0 0 0 1.42 0 1 1 0 0 0 0-1.42M4 10a6 6 0 1 1 12 0 6 6 0 0 1-12 0"
                      fill="currentColor"
                    />
                  </svg>
                </mock-styled.span>
                <mock-styled.label
                  htmlfor="test-static-id"
                >
                  Subscription topics
                </mock-styled.label>
              </mock-styled.div>
            </div>
            <mock-styled.div
              aria-controls=":r1:"
              aria-haspopup="listbox"
              role="combobox"
            >
              <mock-styled.input
                id="topic-edit-ids-MOCK_ID"
                name="topicIds"
              />
              <mock-styled.div
                classname=""
              />
            </mock-styled.div>
          </mock-styled.div>
          <mock-styled.div>
            <mock-styled.label
              classname="el-ml3 el-mb5"
            >
              Subscription customers
            </mock-styled.label>
            <mock-styled.div
              aria-controls=":r2:"
              aria-haspopup="listbox"
              role="combobox"
            >
              <mock-styled.input
                id="customer-edit-ids-MOCK_ID"
                name="customerIds"
              />
              <mock-styled.div
                classname=""
              />
              <mock-styled.div
                classname=""
              >
                <mock-styled.input
                  id="test-static-id"
                  type="checkbox"
                />
                <mock-styled.label
                  classname="el-has-grey-chips"
                  htmlfor="test-static-id"
                >
                  All Customers
                </mock-styled.label>
                <mock-styled.input
                  id="test-static-id"
                  type="checkbox"
                />
                <mock-styled.label
                  classname="el-has-grey-chips"
                  htmlfor="test-static-id"
                >
                  Sandbox Estates
                </mock-styled.label>
                <mock-styled.input
                  id="test-static-id"
                  type="checkbox"
                />
                <mock-styled.label
                  classname="el-has-grey-chips"
                  htmlfor="test-static-id"
                >
                  Reapit Sales
                </mock-styled.label>
                <mock-styled.input
                  id="test-static-id"
                  type="checkbox"
                />
                <mock-styled.label
                  classname="el-has-grey-chips"
                  htmlfor="test-static-id"
                >
                  Foo Bar
                </mock-styled.label>
              </mock-styled.div>
            </mock-styled.div>
          </mock-styled.div>
          <mock-styled.div>
            <div
              class="el-flex-container el-flex-wrap el-flex-justify-between el-flex-align-center el-mb5"
            >
              <mock-styled.div>
                <mock-styled.input
                  classname=""
                  id="test-static-id"
                  placeholder="Type and press enter to add a field"
                  value=""
                />
                <mock-styled.label
                  htmlfor="test-static-id"
                >
                  Semi-structured Fields
                </mock-styled.label>
              </mock-styled.div>
            </div>
            <mock-styled.div>
              <mock-styled.input
                id="semi-structured-fields-MOCK_ID"
                name="extraFields"
              />
              <mock-styled.div
                classname=""
              >
                <p>
                  Please enter a semi-structured field name above, then press enter.
                </p>
              </mock-styled.div>
            </mock-styled.div>
          </mock-styled.div>
          <mock-styled.div>
            <mock-styled.label>
              Status
            </mock-styled.label>
            <mock-styled.input
              id="status-edit-toggle-MOCK_ID"
              name="active"
              type="checkbox"
            />
            <mock-styled.label
              classname="el-has-grey-bg"
              htmlfor="status-edit-toggle-MOCK_ID"
            >
              <mock-styled.span>
                Active
              </mock-styled.span>
              <mock-styled.span>
                Inactive
              </mock-styled.span>
            </mock-styled.label>
          </mock-styled.div>
          <mock-styled.div>
            <mock-styled.div>
              <mock-styled.input
                classname=""
                id="test-static-id"
                name="ignoreEtagOnlyChanges"
                type="checkbox"
              />
              <mock-styled.label
                htmlfor="test-static-id"
              >
                Ignore where only the etag has been modified
              </mock-styled.label>
              <mock-styled.span
                classname=""
              >
                Ignore
              </mock-styled.span>
            </mock-styled.div>
          </mock-styled.div>
        </mock-styled.div>
      </form>
    </div>
  </body>,
  "container": <div>
    <mock-styled.div />
    <form
      class="el-p8"
    >
      <div
        class="el-flex-container el-flex-justify-between el-flex-align-center el-mb11"
      >
        <mock-styled.h2
          classname="el-text-base el-has-bold-text"
        >
          Edit Webhook
        </mock-styled.h2>
        <mock-styled.div>
          <mock-styled.div
            classname="el-button-group-align-right"
          >
            <mock-styled.button
              classname="el-intent-neutral"
              disabled="false"
              type="button"
            >
              <mock-styled.div />
              Delete
            </mock-styled.button>
            <mock-styled.button
              classname="el-intent-primary"
              disabled="false"
              type="button"
            >
              <mock-styled.div />
              Cancel
            </mock-styled.button>
            <mock-styled.button
              classname="el-intent-primary"
              disabled="false"
              type="submit"
            >
              <mock-styled.div />
              Update
            </mock-styled.button>
          </mock-styled.div>
        </mock-styled.div>
      </div>
      <mock-styled.div
        classname=""
      >
        <mock-styled.div>
          <mock-styled.div>
            <mock-styled.input
              classname=""
              id="test-static-id"
              name="url"
              placeholder="Enter secure https:// url"
            />
            <mock-styled.label
              htmlfor="test-static-id"
            >
              Webhook URL
            </mock-styled.label>
          </mock-styled.div>
        </mock-styled.div>
        <mock-styled.div>
          <div
            class="el-flex-container el-flex-wrap el-flex-justify-between el-flex-align-center el-mb5"
          >
            <mock-styled.div
              classname="mock-css.
  min-width: 210px;
"
            >
              <mock-styled.input
                classname=""
                id="test-static-id"
                placeholder="Search topics to get started"
              />
              <mock-styled.span
                classname="el-icon-new"
                role="img"
                style="font-size: 1rem;"
              >
                <svg
                  fill="none"
                  height="1em"
                  style="font-size: 1rem;"
                  viewBox="0 0 24 24"
                  width="1em"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <path
                    d="m21.71 20.29-5.4-5.39A7.9 7.9 0 0 0 18 10a8 8 0 1 0-8 8 7.9 7.9 0 0 0 4.9-1.69l5.39 5.4a1 1 0 0 0 1.42 0 1 1 0 0 0 0-1.42M4 10a6 6 0 1 1 12 0 6 6 0 0 1-12 0"
                    fill="currentColor"
                  />
                </svg>
              </mock-styled.span>
              <mock-styled.label
                htmlfor="test-static-id"
              >
                Subscription topics
              </mock-styled.label>
            </mock-styled.div>
          </div>
          <mock-styled.div
            aria-controls=":r1:"
            aria-haspopup="listbox"
            role="combobox"
          >
            <mock-styled.input
              id="topic-edit-ids-MOCK_ID"
              name="topicIds"
            />
            <mock-styled.div
              classname=""
            />
          </mock-styled.div>
        </mock-styled.div>
        <mock-styled.div>
          <mock-styled.label
            classname="el-ml3 el-mb5"
          >
            Subscription customers
          </mock-styled.label>
          <mock-styled.div
            aria-controls=":r2:"
            aria-haspopup="listbox"
            role="combobox"
          >
            <mock-styled.input
              id="customer-edit-ids-MOCK_ID"
              name="customerIds"
            />
            <mock-styled.div
              classname=""
            />
            <mock-styled.div
              classname=""
            >
              <mock-styled.input
                id="test-static-id"
                type="checkbox"
              />
              <mock-styled.label
                classname="el-has-grey-chips"
                htmlfor="test-static-id"
              >
                All Customers
              </mock-styled.label>
              <mock-styled.input
                id="test-static-id"
                type="checkbox"
              />
              <mock-styled.label
                classname="el-has-grey-chips"
                htmlfor="test-static-id"
              >
                Sandbox Estates
              </mock-styled.label>
              <mock-styled.input
                id="test-static-id"
                type="checkbox"
              />
              <mock-styled.label
                classname="el-has-grey-chips"
                htmlfor="test-static-id"
              >
                Reapit Sales
              </mock-styled.label>
              <mock-styled.input
                id="test-static-id"
                type="checkbox"
              />
              <mock-styled.label
                classname="el-has-grey-chips"
                htmlfor="test-static-id"
              >
                Foo Bar
              </mock-styled.label>
            </mock-styled.div>
          </mock-styled.div>
        </mock-styled.div>
        <mock-styled.div>
          <div
            class="el-flex-container el-flex-wrap el-flex-justify-between el-flex-align-center el-mb5"
          >
            <mock-styled.div>
              <mock-styled.input
                classname=""
                id="test-static-id"
                placeholder="Type and press enter to add a field"
                value=""
              />
              <mock-styled.label
                htmlfor="test-static-id"
              >
                Semi-structured Fields
              </mock-styled.label>
            </mock-styled.div>
          </div>
          <mock-styled.div>
            <mock-styled.input
              id="semi-structured-fields-MOCK_ID"
              name="extraFields"
            />
            <mock-styled.div
              classname=""
            >
              <p>
                Please enter a semi-structured field name above, then press enter.
              </p>
            </mock-styled.div>
          </mock-styled.div>
        </mock-styled.div>
        <mock-styled.div>
          <mock-styled.label>
            Status
          </mock-styled.label>
          <mock-styled.input
            id="status-edit-toggle-MOCK_ID"
            name="active"
            type="checkbox"
          />
          <mock-styled.label
            classname="el-has-grey-bg"
            htmlfor="status-edit-toggle-MOCK_ID"
          >
            <mock-styled.span>
              Active
            </mock-styled.span>
            <mock-styled.span>
              Inactive
            </mock-styled.span>
          </mock-styled.label>
        </mock-styled.div>
        <mock-styled.div>
          <mock-styled.div>
            <mock-styled.input
              classname=""
              id="test-static-id"
              name="ignoreEtagOnlyChanges"
              type="checkbox"
            />
            <mock-styled.label
              htmlfor="test-static-id"
            >
              Ignore where only the etag has been modified
            </mock-styled.label>
            <mock-styled.span
              classname=""
            >
              Ignore
            </mock-styled.span>
          </mock-styled.div>
        </mock-styled.div>
      </mock-styled.div>
    </form>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`WebhooksEditControls should match a snapshot with ping content 1`] = `
{
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <mock-styled.div />
      <form
        class="el-p8"
      >
        <mock-styled.h2
          classname="el-text-base el-ml3"
        >
          Test Webhook Subscription
        </mock-styled.h2>
        <mock-styled.div
          classname=""
        >
          <mock-styled.div
            classname=""
          >
            <mock-styled.label
              classname="el-ml3"
            >
              Subscription topics
            </mock-styled.label>
            <mock-styled.div>
              <mock-styled.select
                name="topicId"
              >
                <option
                  value=""
                >
                  None selected
                </option>
                <option />
                <option />
                <option />
              </mock-styled.select>
            </mock-styled.div>
          </mock-styled.div>
          <mock-styled.div
            classname=""
          >
            <mock-styled.p
              classname="el-text-base"
            >
              To test your Webhook subscription, please select a subscription topic and an example payload for that topic will be sent to the configured URL. For more information, please
               
              <a>
                click here
              </a>
            </mock-styled.p>
            <mock-styled.div
              classname="el-ml-auto"
            >
              <mock-styled.div
                classname="el-button-group-align-right"
              >
                <mock-styled.button
                  classname="el-intent-primary"
                  disabled="false"
                  type="button"
                >
                  <mock-styled.div />
                  Cancel
                </mock-styled.button>
                <mock-styled.button
                  classname="el-intent-primary"
                  disabled="false"
                  type="submit"
                >
                  <mock-styled.div />
                  Test
                </mock-styled.button>
              </mock-styled.div>
            </mock-styled.div>
          </mock-styled.div>
        </mock-styled.div>
      </form>
    </div>
  </body>,
  "container": <div>
    <mock-styled.div />
    <form
      class="el-p8"
    >
      <mock-styled.h2
        classname="el-text-base el-ml3"
      >
        Test Webhook Subscription
      </mock-styled.h2>
      <mock-styled.div
        classname=""
      >
        <mock-styled.div
          classname=""
        >
          <mock-styled.label
            classname="el-ml3"
          >
            Subscription topics
          </mock-styled.label>
          <mock-styled.div>
            <mock-styled.select
              name="topicId"
            >
              <option
                value=""
              >
                None selected
              </option>
              <option />
              <option />
              <option />
            </mock-styled.select>
          </mock-styled.div>
        </mock-styled.div>
        <mock-styled.div
          classname=""
        >
          <mock-styled.p
            classname="el-text-base"
          >
            To test your Webhook subscription, please select a subscription topic and an example payload for that topic will be sent to the configured URL. For more information, please
             
            <a>
              click here
            </a>
          </mock-styled.p>
          <mock-styled.div
            classname="el-ml-auto"
          >
            <mock-styled.div
              classname="el-button-group-align-right"
            >
              <mock-styled.button
                classname="el-intent-primary"
                disabled="false"
                type="button"
              >
                <mock-styled.div />
                Cancel
              </mock-styled.button>
              <mock-styled.button
                classname="el-intent-primary"
                disabled="false"
                type="submit"
              >
                <mock-styled.div />
                Test
              </mock-styled.button>
            </mock-styled.div>
          </mock-styled.div>
        </mock-styled.div>
      </mock-styled.div>
    </form>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;
