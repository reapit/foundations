// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`WebhooksControls should match a snapshot for the /webhooks/about page 1`] = `
{
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <div
        class="mocked-styled-93 el-snack-holder"
      />
      <div
        class="el-mb7 el-button-group"
      >
        <div
          class="mocked-styled-3 el-button-group-inner"
        >
          <button
            class="el-intent-neutral el-button"
          >
            <div
              class="mocked-styled-0 el-button-loader"
            />
            View Docs
          </button>
          <button
            class="el-intent-neutral el-button"
          >
            <div
              class="mocked-styled-0 el-button-loader"
            />
            Video
          </button>
        </div>
      </div>
    </div>
  </body>,
  "container": <div>
    <div
      class="mocked-styled-93 el-snack-holder"
    />
    <div
      class="el-mb7 el-button-group"
    >
      <div
        class="mocked-styled-3 el-button-group-inner"
      >
        <button
          class="el-intent-neutral el-button"
        >
          <div
            class="mocked-styled-0 el-button-loader"
          />
          View Docs
        </button>
        <button
          class="el-intent-neutral el-button"
        >
          <div
            class="mocked-styled-0 el-button-loader"
          />
          Video
        </button>
      </div>
    </div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`WebhooksControls should match a snapshot for the /webhooks/logs page 1`] = `
{
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <div
        class="mocked-styled-93 el-snack-holder"
      />
      <div
        class="el-border-radius mock-css.
  overflow: hidden;
 el-mb5"
      >
        <mock-styled.div>
          <div
            class="mocked-styled-40 el-input-group"
          >
            <select
              aria-label="Select an item from the dropdown list"
              class="el-wfull el-select"
              name="applicationId"
            >
              <option
                value=""
              >
                None selected
              </option>
              <option
                value="MOCK_APP_ID"
              >
                MOCK_APP_NAME
              </option>
              <option
                value="MOCK_OTHER_APP_ID"
              >
                MOCK_APP_NAME_ANOTHER
              </option>
            </select>
            <label
              class="mocked-styled-41 el-label"
            >
              App Name
            </label>
          </div>
        </mock-styled.div>
        <mock-styled.div>
          <div
            class="mock-css.
  input {
    width: 100%;
  }
 el-input-group"
          >
            <input
              aria-label="Input type date format dd/mm/yyy max date of 2019-10-10 min date of 2019-04"
              class="mocked-styled-38 el-input"
              id="test-static-id"
              max="2019-10-10"
              min="2019-04"
              name="from"
              type="date"
              value="2019-10-10"
            />
            <label
              class="mocked-styled-41 el-label"
              for="test-static-id"
            >
              Date From
            </label>
          </div>
        </mock-styled.div>
        <mock-styled.div>
          <div
            class="mock-css.
  input {
    width: 100%;
  }
 el-input-group"
          >
            <input
              aria-label="Input type date format dd/mm/yyy max date of 2019-10-10 min date of 2019-10-10"
              class="mocked-styled-38 el-input"
              id="test-static-id"
              max="2019-10-10"
              min="2019-10-10"
              name="to"
              type="date"
              value="2019-10-10"
            />
            <label
              class="mocked-styled-41 el-label"
              for="test-static-id"
            >
              Date To
            </label>
          </div>
        </mock-styled.div>
        <mock-styled.div>
          <div
            class="mocked-styled-40 el-input-group"
          >
            <select
              aria-label="Select an item from the dropdown list"
              class="el-wfull el-select"
              name="topicId"
            >
              <option
                value=""
              >
                None selected
              </option>
              <option
                value="properties.created"
              >
                Property created
              </option>
              <option
                value="properties.modified"
              >
                Property modified
              </option>
            </select>
            <label
              class="mocked-styled-41 el-label"
            >
              Topic Name
            </label>
          </div>
        </mock-styled.div>
        <mock-styled.div>
          <div
            class="mock-css.
  input {
    width: 100%;
  }
 el-input-group"
          >
            <input
              aria-label="Input type text"
              class="mocked-styled-38 el-input"
              id="test-static-id"
              name="entityId"
              type="text"
              value=""
            />
            <label
              class="mocked-styled-41 el-label"
              for="test-static-id"
            >
              Entity Id
            </label>
          </div>
        </mock-styled.div>
        <mock-styled.div>
          <div
            class="mock-css.
  input {
    width: 100%;
  }
 el-input-group"
          >
            <input
              aria-label="Input type text"
              class="mocked-styled-38 el-input"
              id="test-static-id"
              name="eventId"
              type="text"
              value=""
            />
            <label
              class="mocked-styled-41 el-label"
              for="test-static-id"
            >
              Event Id
            </label>
          </div>
        </mock-styled.div>
      </div>
      <div
        class="el-mb7 el-button-group"
      >
        <div
          class="mocked-styled-3 el-button-group-inner"
        >
          <button
            class="el-intent-neutral el-button"
          >
            <div
              class="mocked-styled-0 el-button-loader"
            />
            View Docs
          </button>
          <button
            class="el-intent-neutral el-button"
          >
            <div
              class="mocked-styled-0 el-button-loader"
            />
            Video
          </button>
        </div>
      </div>
    </div>
  </body>,
  "container": <div>
    <div
      class="mocked-styled-93 el-snack-holder"
    />
    <div
      class="el-border-radius mock-css.
  overflow: hidden;
 el-mb5"
    >
      <mock-styled.div>
        <div
          class="mocked-styled-40 el-input-group"
        >
          <select
            aria-label="Select an item from the dropdown list"
            class="el-wfull el-select"
            name="applicationId"
          >
            <option
              value=""
            >
              None selected
            </option>
            <option
              value="MOCK_APP_ID"
            >
              MOCK_APP_NAME
            </option>
            <option
              value="MOCK_OTHER_APP_ID"
            >
              MOCK_APP_NAME_ANOTHER
            </option>
          </select>
          <label
            class="mocked-styled-41 el-label"
          >
            App Name
          </label>
        </div>
      </mock-styled.div>
      <mock-styled.div>
        <div
          class="mock-css.
  input {
    width: 100%;
  }
 el-input-group"
        >
          <input
            aria-label="Input type date format dd/mm/yyy max date of 2019-10-10 min date of 2019-04"
            class="mocked-styled-38 el-input"
            id="test-static-id"
            max="2019-10-10"
            min="2019-04"
            name="from"
            type="date"
            value="2019-10-10"
          />
          <label
            class="mocked-styled-41 el-label"
            for="test-static-id"
          >
            Date From
          </label>
        </div>
      </mock-styled.div>
      <mock-styled.div>
        <div
          class="mock-css.
  input {
    width: 100%;
  }
 el-input-group"
        >
          <input
            aria-label="Input type date format dd/mm/yyy max date of 2019-10-10 min date of 2019-10-10"
            class="mocked-styled-38 el-input"
            id="test-static-id"
            max="2019-10-10"
            min="2019-10-10"
            name="to"
            type="date"
            value="2019-10-10"
          />
          <label
            class="mocked-styled-41 el-label"
            for="test-static-id"
          >
            Date To
          </label>
        </div>
      </mock-styled.div>
      <mock-styled.div>
        <div
          class="mocked-styled-40 el-input-group"
        >
          <select
            aria-label="Select an item from the dropdown list"
            class="el-wfull el-select"
            name="topicId"
          >
            <option
              value=""
            >
              None selected
            </option>
            <option
              value="properties.created"
            >
              Property created
            </option>
            <option
              value="properties.modified"
            >
              Property modified
            </option>
          </select>
          <label
            class="mocked-styled-41 el-label"
          >
            Topic Name
          </label>
        </div>
      </mock-styled.div>
      <mock-styled.div>
        <div
          class="mock-css.
  input {
    width: 100%;
  }
 el-input-group"
        >
          <input
            aria-label="Input type text"
            class="mocked-styled-38 el-input"
            id="test-static-id"
            name="entityId"
            type="text"
            value=""
          />
          <label
            class="mocked-styled-41 el-label"
            for="test-static-id"
          >
            Entity Id
          </label>
        </div>
      </mock-styled.div>
      <mock-styled.div>
        <div
          class="mock-css.
  input {
    width: 100%;
  }
 el-input-group"
        >
          <input
            aria-label="Input type text"
            class="mocked-styled-38 el-input"
            id="test-static-id"
            name="eventId"
            type="text"
            value=""
          />
          <label
            class="mocked-styled-41 el-label"
            for="test-static-id"
          >
            Event Id
          </label>
        </div>
      </mock-styled.div>
    </div>
    <div
      class="el-mb7 el-button-group"
    >
      <div
        class="mocked-styled-3 el-button-group-inner"
      >
        <button
          class="el-intent-neutral el-button"
        >
          <div
            class="mocked-styled-0 el-button-loader"
          />
          View Docs
        </button>
        <button
          class="el-intent-neutral el-button"
        >
          <div
            class="mocked-styled-0 el-button-loader"
          />
          Video
        </button>
      </div>
    </div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`WebhooksControls should match a snapshot for the /webhooks/manage page 1`] = `
{
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <div
        class="mocked-styled-93 el-snack-holder"
      />
      <div
        class="el-border-radius mock-css.
  overflow: hidden;
 el-mb5"
      >
        <mock-styled.div>
          <div
            class="mocked-styled-40 el-input-group"
          >
            <select
              aria-label="Select an item from the dropdown list"
              class="el-wfull el-select"
              name="applicationId"
            >
              <option
                value=""
              >
                None selected
              </option>
              <option
                value="MOCK_APP_ID"
              >
                MOCK_APP_NAME
              </option>
              <option
                value="MOCK_OTHER_APP_ID"
              >
                MOCK_APP_NAME_ANOTHER
              </option>
            </select>
            <label
              class="mocked-styled-41 el-label"
            >
              App Name
            </label>
          </div>
        </mock-styled.div>
      </div>
      <div
        class="el-mb7 el-button-group"
      >
        <div
          class="mocked-styled-3 el-button-group-inner"
        >
          <button
            class="el-intent-neutral el-button"
          >
            <div
              class="mocked-styled-0 el-button-loader"
            />
            View Docs
          </button>
          <button
            class="el-intent-neutral el-button"
          >
            <div
              class="mocked-styled-0 el-button-loader"
            />
            Video
          </button>
        </div>
      </div>
    </div>
  </body>,
  "container": <div>
    <div
      class="mocked-styled-93 el-snack-holder"
    />
    <div
      class="el-border-radius mock-css.
  overflow: hidden;
 el-mb5"
    >
      <mock-styled.div>
        <div
          class="mocked-styled-40 el-input-group"
        >
          <select
            aria-label="Select an item from the dropdown list"
            class="el-wfull el-select"
            name="applicationId"
          >
            <option
              value=""
            >
              None selected
            </option>
            <option
              value="MOCK_APP_ID"
            >
              MOCK_APP_NAME
            </option>
            <option
              value="MOCK_OTHER_APP_ID"
            >
              MOCK_APP_NAME_ANOTHER
            </option>
          </select>
          <label
            class="mocked-styled-41 el-label"
          >
            App Name
          </label>
        </div>
      </mock-styled.div>
    </div>
    <div
      class="el-mb7 el-button-group"
    >
      <div
        class="mocked-styled-3 el-button-group-inner"
      >
        <button
          class="el-intent-neutral el-button"
        >
          <div
            class="mocked-styled-0 el-button-loader"
          />
          View Docs
        </button>
        <button
          class="el-intent-neutral el-button"
        >
          <div
            class="mocked-styled-0 el-button-loader"
          />
          Video
        </button>
      </div>
    </div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`WebhooksControls should match a snapshot for the /webhooks/new page 1`] = `
{
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <div
        class="mocked-styled-93 el-snack-holder"
      />
      <div
        class="el-mb7 el-button-group"
      >
        <div
          class="mocked-styled-3 el-button-group-inner"
        >
          <button
            class="el-intent-neutral el-button"
          >
            <div
              class="mocked-styled-0 el-button-loader"
            />
            View Docs
          </button>
          <button
            class="el-intent-neutral el-button"
          >
            <div
              class="mocked-styled-0 el-button-loader"
            />
            Video
          </button>
        </div>
      </div>
    </div>
  </body>,
  "container": <div>
    <div
      class="mocked-styled-93 el-snack-holder"
    />
    <div
      class="el-mb7 el-button-group"
    >
      <div
        class="mocked-styled-3 el-button-group-inner"
      >
        <button
          class="el-intent-neutral el-button"
        >
          <div
            class="mocked-styled-0 el-button-loader"
          />
          View Docs
        </button>
        <button
          class="el-intent-neutral el-button"
        >
          <div
            class="mocked-styled-0 el-button-loader"
          />
          Video
        </button>
      </div>
    </div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;
