// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`WebhooksControls should match a snapshot for the /webhooks/about page 1`] = `
{
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <mock-styled.div />
      <mock-styled.div
        classname="mock-css.
  margin-bottom: 1.25rem;
"
      >
        <mock-styled.div
          classname=""
        >
          <mock-styled.button
            classname="mock-css."
          >
            <mock-styled.div />
            View Docs
          </mock-styled.button>
          <mock-styled.button
            classname="mock-css."
          >
            <mock-styled.div />
            Video
          </mock-styled.button>
        </mock-styled.div>
      </mock-styled.div>
    </div>
  </body>,
  "container": <div>
    <mock-styled.div />
    <mock-styled.div
      classname="mock-css.
  margin-bottom: 1.25rem;
"
    >
      <mock-styled.div
        classname=""
      >
        <mock-styled.button
          classname="mock-css."
        >
          <mock-styled.div />
          View Docs
        </mock-styled.button>
        <mock-styled.button
          classname="mock-css."
        >
          <mock-styled.div />
          Video
        </mock-styled.button>
      </mock-styled.div>
    </mock-styled.div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`WebhooksControls should match a snapshot for the /webhooks/logs page 1`] = `
{
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <mock-styled.div />
      <div
        class="mock-css.
  border-radius: 0.25rem;
 mock-css.
  overflow: hidden;
 mock-css.
  margin-bottom: 0.75rem;
"
      >
        <mock-styled.div>
          <mock-styled.div>
            <mock-styled.select
              classname="mock-css.
  width: 100%;
"
              name="applicationId"
              value=""
            >
              <option
                value=""
              >
                None selected
              </option>
              <option
                value="MOCK_APP_ID"
              >
                MOCK_APP_NAME
              </option>
              <option
                value="MOCK_OTHER_APP_ID"
              >
                MOCK_APP_NAME_ANOTHER
              </option>
            </mock-styled.select>
            <mock-styled.label>
              App Name
            </mock-styled.label>
          </mock-styled.div>
        </mock-styled.div>
        <mock-styled.div>
          <mock-styled.div
            classname="mock-css.
  input {
    width: 100%;
  }
"
          >
            <mock-styled.input
              classname=""
              id="test-static-id"
              max="2019-10-10"
              min="2019-04"
              name="from"
              type="date"
              value="2019-10-10"
            />
            <mock-styled.label
              htmlfor="test-static-id"
            >
              Date From
            </mock-styled.label>
          </mock-styled.div>
        </mock-styled.div>
        <mock-styled.div>
          <mock-styled.div
            classname="mock-css.
  input {
    width: 100%;
  }
"
          >
            <mock-styled.input
              classname=""
              id="test-static-id"
              max="2019-10-10"
              min="2019-10-10"
              name="to"
              type="date"
              value="2019-10-10"
            />
            <mock-styled.label
              htmlfor="test-static-id"
            >
              Date To
            </mock-styled.label>
          </mock-styled.div>
        </mock-styled.div>
        <mock-styled.div>
          <mock-styled.div>
            <mock-styled.select
              classname="mock-css.
  width: 100%;
"
              name="topicId"
              value=""
            >
              <option
                value=""
              >
                None selected
              </option>
              <option
                value="properties.created"
              >
                Property created
              </option>
              <option
                value="properties.modified"
              >
                Property modified
              </option>
            </mock-styled.select>
            <mock-styled.label>
              Topic Name
            </mock-styled.label>
          </mock-styled.div>
        </mock-styled.div>
        <mock-styled.div>
          <mock-styled.div
            classname="mock-css.
  input {
    width: 100%;
  }
"
          >
            <mock-styled.input
              classname=""
              id="test-static-id"
              name="entityId"
              type="text"
              value=""
            />
            <mock-styled.label
              htmlfor="test-static-id"
            >
              Entity Id
            </mock-styled.label>
          </mock-styled.div>
        </mock-styled.div>
        <mock-styled.div>
          <mock-styled.div
            classname="mock-css.
  input {
    width: 100%;
  }
"
          >
            <mock-styled.input
              classname=""
              id="test-static-id"
              name="eventId"
              type="text"
              value=""
            />
            <mock-styled.label
              htmlfor="test-static-id"
            >
              Event Id
            </mock-styled.label>
          </mock-styled.div>
        </mock-styled.div>
      </div>
      <mock-styled.div
        classname="mock-css.
  margin-bottom: 1.25rem;
"
      >
        <mock-styled.div
          classname=""
        >
          <mock-styled.button
            classname="mock-css."
          >
            <mock-styled.div />
            View Docs
          </mock-styled.button>
          <mock-styled.button
            classname="mock-css."
          >
            <mock-styled.div />
            Video
          </mock-styled.button>
        </mock-styled.div>
      </mock-styled.div>
    </div>
  </body>,
  "container": <div>
    <mock-styled.div />
    <div
      class="mock-css.
  border-radius: 0.25rem;
 mock-css.
  overflow: hidden;
 mock-css.
  margin-bottom: 0.75rem;
"
    >
      <mock-styled.div>
        <mock-styled.div>
          <mock-styled.select
            classname="mock-css.
  width: 100%;
"
            name="applicationId"
            value=""
          >
            <option
              value=""
            >
              None selected
            </option>
            <option
              value="MOCK_APP_ID"
            >
              MOCK_APP_NAME
            </option>
            <option
              value="MOCK_OTHER_APP_ID"
            >
              MOCK_APP_NAME_ANOTHER
            </option>
          </mock-styled.select>
          <mock-styled.label>
            App Name
          </mock-styled.label>
        </mock-styled.div>
      </mock-styled.div>
      <mock-styled.div>
        <mock-styled.div
          classname="mock-css.
  input {
    width: 100%;
  }
"
        >
          <mock-styled.input
            classname=""
            id="test-static-id"
            max="2019-10-10"
            min="2019-04"
            name="from"
            type="date"
            value="2019-10-10"
          />
          <mock-styled.label
            htmlfor="test-static-id"
          >
            Date From
          </mock-styled.label>
        </mock-styled.div>
      </mock-styled.div>
      <mock-styled.div>
        <mock-styled.div
          classname="mock-css.
  input {
    width: 100%;
  }
"
        >
          <mock-styled.input
            classname=""
            id="test-static-id"
            max="2019-10-10"
            min="2019-10-10"
            name="to"
            type="date"
            value="2019-10-10"
          />
          <mock-styled.label
            htmlfor="test-static-id"
          >
            Date To
          </mock-styled.label>
        </mock-styled.div>
      </mock-styled.div>
      <mock-styled.div>
        <mock-styled.div>
          <mock-styled.select
            classname="mock-css.
  width: 100%;
"
            name="topicId"
            value=""
          >
            <option
              value=""
            >
              None selected
            </option>
            <option
              value="properties.created"
            >
              Property created
            </option>
            <option
              value="properties.modified"
            >
              Property modified
            </option>
          </mock-styled.select>
          <mock-styled.label>
            Topic Name
          </mock-styled.label>
        </mock-styled.div>
      </mock-styled.div>
      <mock-styled.div>
        <mock-styled.div
          classname="mock-css.
  input {
    width: 100%;
  }
"
        >
          <mock-styled.input
            classname=""
            id="test-static-id"
            name="entityId"
            type="text"
            value=""
          />
          <mock-styled.label
            htmlfor="test-static-id"
          >
            Entity Id
          </mock-styled.label>
        </mock-styled.div>
      </mock-styled.div>
      <mock-styled.div>
        <mock-styled.div
          classname="mock-css.
  input {
    width: 100%;
  }
"
        >
          <mock-styled.input
            classname=""
            id="test-static-id"
            name="eventId"
            type="text"
            value=""
          />
          <mock-styled.label
            htmlfor="test-static-id"
          >
            Event Id
          </mock-styled.label>
        </mock-styled.div>
      </mock-styled.div>
    </div>
    <mock-styled.div
      classname="mock-css.
  margin-bottom: 1.25rem;
"
    >
      <mock-styled.div
        classname=""
      >
        <mock-styled.button
          classname="mock-css."
        >
          <mock-styled.div />
          View Docs
        </mock-styled.button>
        <mock-styled.button
          classname="mock-css."
        >
          <mock-styled.div />
          Video
        </mock-styled.button>
      </mock-styled.div>
    </mock-styled.div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`WebhooksControls should match a snapshot for the /webhooks/manage page 1`] = `
{
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <mock-styled.div />
      <div
        class="mock-css.
  border-radius: 0.25rem;
 mock-css.
  overflow: hidden;
 mock-css.
  margin-bottom: 0.75rem;
"
      >
        <mock-styled.div>
          <mock-styled.div>
            <mock-styled.select
              classname="mock-css.
  width: 100%;
"
              name="applicationId"
              value=""
            >
              <option
                value=""
              >
                None selected
              </option>
              <option
                value="MOCK_APP_ID"
              >
                MOCK_APP_NAME
              </option>
              <option
                value="MOCK_OTHER_APP_ID"
              >
                MOCK_APP_NAME_ANOTHER
              </option>
            </mock-styled.select>
            <mock-styled.label>
              App Name
            </mock-styled.label>
          </mock-styled.div>
        </mock-styled.div>
      </div>
      <mock-styled.div
        classname="mock-css.
  margin-bottom: 1.25rem;
"
      >
        <mock-styled.div
          classname=""
        >
          <mock-styled.button
            classname="mock-css."
          >
            <mock-styled.div />
            View Docs
          </mock-styled.button>
          <mock-styled.button
            classname="mock-css."
          >
            <mock-styled.div />
            Video
          </mock-styled.button>
        </mock-styled.div>
      </mock-styled.div>
    </div>
  </body>,
  "container": <div>
    <mock-styled.div />
    <div
      class="mock-css.
  border-radius: 0.25rem;
 mock-css.
  overflow: hidden;
 mock-css.
  margin-bottom: 0.75rem;
"
    >
      <mock-styled.div>
        <mock-styled.div>
          <mock-styled.select
            classname="mock-css.
  width: 100%;
"
            name="applicationId"
            value=""
          >
            <option
              value=""
            >
              None selected
            </option>
            <option
              value="MOCK_APP_ID"
            >
              MOCK_APP_NAME
            </option>
            <option
              value="MOCK_OTHER_APP_ID"
            >
              MOCK_APP_NAME_ANOTHER
            </option>
          </mock-styled.select>
          <mock-styled.label>
            App Name
          </mock-styled.label>
        </mock-styled.div>
      </mock-styled.div>
    </div>
    <mock-styled.div
      classname="mock-css.
  margin-bottom: 1.25rem;
"
    >
      <mock-styled.div
        classname=""
      >
        <mock-styled.button
          classname="mock-css."
        >
          <mock-styled.div />
          View Docs
        </mock-styled.button>
        <mock-styled.button
          classname="mock-css."
        >
          <mock-styled.div />
          Video
        </mock-styled.button>
      </mock-styled.div>
    </mock-styled.div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`WebhooksControls should match a snapshot for the /webhooks/new page 1`] = `
{
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <mock-styled.div />
      <mock-styled.div
        classname="mock-css.
  margin-bottom: 1.25rem;
"
      >
        <mock-styled.div
          classname=""
        >
          <mock-styled.button
            classname="mock-css."
          >
            <mock-styled.div />
            View Docs
          </mock-styled.button>
          <mock-styled.button
            classname="mock-css."
          >
            <mock-styled.div />
            Video
          </mock-styled.button>
        </mock-styled.div>
      </mock-styled.div>
    </div>
  </body>,
  "container": <div>
    <mock-styled.div />
    <mock-styled.div
      classname="mock-css.
  margin-bottom: 1.25rem;
"
    >
      <mock-styled.div
        classname=""
      >
        <mock-styled.button
          classname="mock-css."
        >
          <mock-styled.div />
          View Docs
        </mock-styled.button>
        <mock-styled.button
          classname="mock-css."
        >
          <mock-styled.div />
          Video
        </mock-styled.button>
      </mock-styled.div>
    </mock-styled.div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;
