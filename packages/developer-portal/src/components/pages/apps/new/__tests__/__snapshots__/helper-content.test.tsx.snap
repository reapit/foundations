// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`HelperContent should match a snapshot 1`] = `
Object {
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <div
        class="ecbqyq6-el-snack-holder"
      />
      <div
        class="hadvzab-helper-content-container"
      >
        <div>
          <h2
            class="e1byern-el-subtitle"
          >
            AgencyCloud Functionality
          </h2>
          <p
            class="e15ggth7-el-body-text"
          >
            For the greatest integration with our AgencyCloud desktop CRM, we support rendering client-side authenticated web applications using a Chromium Web View inside the CRM itself. Server side apps cannot be launched from within AgencyCloud.
          </p>
          <p
            class="e15ggth7-el-body-text"
          >
            You can either launch your application from the dedicated Apps menu in the AgencyCloud software, or you can launch your app from a series of menus embedded within other pages. Your app can receive contextual entity ids as global variables so it can launch with relevant data for your users. For more on our desktop API
             
            <a>
              see here.
            </a>
          </p>
          <p
            class="e15ggth7-el-body-text"
          >
            To ensure a consistent UI and UX, it is a requirement for AgencyCloud integrated apps to use our Elements UI library and Foundations Design System. If you want to familiarise yourself with this before moving on, you can
             
            <a>
              view the docs here.
            </a>
          </p>
          <p
            class="e15ggth7-el-body-text"
          >
            We do not support rendering of web applications that use a third party UI. You cannot simply link out from your integrated app, or render your pre-existing app in an iframe. Your app must be inegrated at an API level.
          </p>
        </div>
        <div>
          <h2
            class="e1byern-el-subtitle"
          >
            External Web Applications
          </h2>
          <p
            class="e15ggth7-el-body-text"
          >
            You should select this if you wish to integrate Foundations APIs with a pre-existing or future web application that you do not wish to launch from within the AgencyCloud desktop CRM.
          </p>
          <p
            class="e15ggth7-el-body-text"
          >
            Your application could be authenticated against Foundations either on the client-side or server-side. If you choose client-side authentication at the next step however, should you wish to upgrade to a full AgencyCloud integration in the future, you can do this. Server side apps cannot be launched from within AgencyCloud.
          </p>
        </div>
        <div>
          <h2
            class="e1byern-el-subtitle"
          >
            Data Portal and Reporting Feeds
          </h2>
          <p
            class="e15ggth7-el-body-text"
          >
            This is a server-side only data feed, using our
             
            <a>
              Client Credentials authentication flow.
            </a>
             You should select this if you have no requirement to render your application inside of the AgencyCloud desktop CRM and, you have no requirement for user-centric client side authentication.
          </p>
          <p
            class="e15ggth7-el-body-text"
          >
            Typically you will be pulling data to serve another application, to perform data processing or some other analytics function.
          </p>
          <p
            class="e15ggth7-el-body-text"
          >
            You should also select this option if you require a permenent connection to our APIs; to pull data on demand as opposed to on the fly, when a user logs in to your application.
          </p>
        </div>
        <div>
          <h2
            class="e1byern-el-subtitle"
          >
            Website Feeds
          </h2>
          <p
            class="e15ggth7-el-body-text"
          >
            When building a public website for a Reapit Customer, you will have no user authentication so your integration must be server-side, using our
             
            <a>
              Client Credentials authentication flow.
            </a>
          </p>
          <p
            class="e15ggth7-el-body-text"
          >
            Your application will be read-only and by selecting this option, we will pre-populate the typical API permissions your integration will need for most website development.
          </p>
        </div>
        <div>
          <h2
            class="e1byern-el-subtitle"
          >
            Web Services Migrations
          </h2>
          <p
            class="e15ggth7-el-body-text"
          >
            Select this option if you are migraiting from the legacy Reapit SOAP API, or web services. These services will soon be deprecated so it is important to start your migration to the Foundations Platform as soon as possible.
          </p>
          <p
            class="e15ggth7-el-body-text"
          >
            You will get options at the next steps to decide whether client or server-side authentication best serves your application needs however, in most cases web services applications are server-side using our
             
            <a>
              Client Credentials authentication flow.
            </a>
          </p>
          <p
            class="e15ggth7-el-body-text"
          >
            Please be aware there is not a 1:1 mapping between the SOAP and Foundations REST API. As such, we suggest reading the 
            <a>
              API docs here
            </a>
             and looking at the
             
            <a
              href="/swagger"
              rel="noopener noreferrer"
              target="_blank"
            >
              API explorer here
               
            </a>
            to investigate which data sets and permissions you will need before getting started.
          </p>
        </div>
        <div>
          <h2
            class="e1byern-el-subtitle"
          >
            Using Reapit Connect as an Itentity Provider
          </h2>
          <p
            class="e15ggth7-el-body-text"
          >
            We support using Reapit Connect, our client-side authentication solution, simply as an identity provider for your application.
          </p>
          <p
            class="e15ggth7-el-body-text"
          >
            In this case, your client side authenticated users will not have any data permissions however, you can access and validate their identity against your own application. For more on
             
            <a>
              Reapit Connect visit here
            </a>
             and if you are interested in using our Sign In With Reapit button to embed on your own site
             
            <a>
              visit here
            </a>
          </p>
        </div>
        <div>
          <h2
            class="e1byern-el-subtitle"
          >
            Other App Types
          </h2>
          <p
            class="e15ggth7-el-body-text"
          >
            If your use case does not fit into one of the other categories, you should consider a couple of points before proceeding.
          </p>
          <p
            class="e15ggth7-el-body-text"
          >
            Firstly, do you need to know about a logged in user for your integration and / or do you intend to fetch your data on the fly from our API when a user logs in. In this case, it is likely you need a client-side application using 
            <a>
              Reapit Connect.
            </a>
          </p>
          <p
            class="e15ggth7-el-body-text"
          >
            If you need a permenant feed, fetching your data on demand and / or you have no requirement for user information or a user-centric login flow, it is likely you need a server-side application using our
             
            <a>
              Client Credentials authentication flow.
            </a>
          </p>
        </div>
        <div>
          <h2
            class="e1byern-el-subtitle"
          >
            Client Side Apps
          </h2>
          <p
            class="e15ggth7-el-body-text"
          >
            Client Side Apps use our identity provider
             
            <a>
              Reapit Connect
            </a>
             to authenticate against our API. Your application will need to re-direct to Reapit Connect where we will handle user login and in turn, re-direct back to your app with a code in the url that you exchange for access and id JWTs, referred to as
             
            <a>
              Authorization Code flow.
            </a>
             You will need to provide us with uris to your application at the next step so we know where to return you to on login and on completion of this wizard, you will receive a Client Id you need to start the flow.
          </p>
          <p
            class="e15ggth7-el-body-text"
          >
            To make this process easier, we provide you with an authentication module for client-side apps,
             
            <a>
              Connect Session
            </a>
            , which comes bundled with our
             
            <a>
              Create React App Template
            </a>
             for quick start client-side development.
          </p>
        </div>
        <div>
          <h2
            class="e1byern-el-subtitle"
          >
            Server Side Apps
          </h2>
          <p
            class="e15ggth7-el-body-text"
          >
            Server-side applications authenticate against our API using the
             
            <a>
              Client Credentials authentication flow.
            </a>
             This process involves the exchange of a Client Id and Secret for a JWT access token to authenticate against all requests.
          </p>
          <p
            class="e15ggth7-el-body-text"
          >
            Unlike Client Side applications, you do not have to re-direct to Reapit Connect, nor do your users have to log into your application. Because of this, the flow must only be used on the Server Side to ensure the Client Secret you will be issued at the end of this wizard is held in a secure location.
          </p>
        </div>
        <div>
          <h2
            class="e2dm5rh-el-has-disabled-text e1byern-el-subtitle"
          >
            Reapit Connect Redirects
          </h2>
          <p
            class="e2dm5rh-el-has-disabled-text e15ggth7-el-body-text"
          >
            When using the Reapit Connect
             
            <a>
              Authorization Code flow,
            </a>
             you need to register both a re-direct uri and a logout uri. The former is the location in your app, you want Reapit Connect to re-direct to after a successful user login, the latter, after a succesful logout. Only uris that are registered here will be accepted as a location by Reapit Connect although, you can register multiple locations with a comma separated list.
          </p>
          <p
            class="e2dm5rh-el-has-disabled-text e15ggth7-el-body-text"
          >
            We have pre-populated the urls that you need when using our
             
            <a>
              Create React App Template
            </a>
             however, any localhost (for local development), or https uri is acceptable. Please note, the Uris must match those in your app exactly, inclusive of white space and trailing slashes.
          </p>
        </div>
        <div>
          <h2
            class="e2dm5rh-el-has-disabled-text e1byern-el-subtitle"
          >
            Permissions
          </h2>
          <p
            class="e2dm5rh-el-has-disabled-text e15ggth7-el-body-text"
          >
            Permissions are registered as scopes against the access token you receive back from one of our Authentication Flows. They map 1:1 and on a read/write basis to endpoints in our Foundations REST API. As such, it is worth looking at the
             
            <a
              href="/swagger"
              rel="noopener noreferrer"
              target="_blank"
            >
              API explorer here
               
            </a>
            before procceeding, to investigate which permissions you think you will need.
          </p>
          <p
            class="e2dm5rh-el-has-disabled-text e15ggth7-el-body-text"
          >
            For some flows we have pre-populated suggested permissions based on what you have said you wish to acheive with Foundations. These can be removed or added as you see fit and all permissions can be edited later if you wish to add or remove them before your app goes live.
          </p>
        </div>
      </div>
    </div>
  </body>,
  "container": <div>
    <div
      class="ecbqyq6-el-snack-holder"
    />
    <div
      class="hadvzab-helper-content-container"
    >
      <div>
        <h2
          class="e1byern-el-subtitle"
        >
          AgencyCloud Functionality
        </h2>
        <p
          class="e15ggth7-el-body-text"
        >
          For the greatest integration with our AgencyCloud desktop CRM, we support rendering client-side authenticated web applications using a Chromium Web View inside the CRM itself. Server side apps cannot be launched from within AgencyCloud.
        </p>
        <p
          class="e15ggth7-el-body-text"
        >
          You can either launch your application from the dedicated Apps menu in the AgencyCloud software, or you can launch your app from a series of menus embedded within other pages. Your app can receive contextual entity ids as global variables so it can launch with relevant data for your users. For more on our desktop API
           
          <a>
            see here.
          </a>
        </p>
        <p
          class="e15ggth7-el-body-text"
        >
          To ensure a consistent UI and UX, it is a requirement for AgencyCloud integrated apps to use our Elements UI library and Foundations Design System. If you want to familiarise yourself with this before moving on, you can
           
          <a>
            view the docs here.
          </a>
        </p>
        <p
          class="e15ggth7-el-body-text"
        >
          We do not support rendering of web applications that use a third party UI. You cannot simply link out from your integrated app, or render your pre-existing app in an iframe. Your app must be inegrated at an API level.
        </p>
      </div>
      <div>
        <h2
          class="e1byern-el-subtitle"
        >
          External Web Applications
        </h2>
        <p
          class="e15ggth7-el-body-text"
        >
          You should select this if you wish to integrate Foundations APIs with a pre-existing or future web application that you do not wish to launch from within the AgencyCloud desktop CRM.
        </p>
        <p
          class="e15ggth7-el-body-text"
        >
          Your application could be authenticated against Foundations either on the client-side or server-side. If you choose client-side authentication at the next step however, should you wish to upgrade to a full AgencyCloud integration in the future, you can do this. Server side apps cannot be launched from within AgencyCloud.
        </p>
      </div>
      <div>
        <h2
          class="e1byern-el-subtitle"
        >
          Data Portal and Reporting Feeds
        </h2>
        <p
          class="e15ggth7-el-body-text"
        >
          This is a server-side only data feed, using our
           
          <a>
            Client Credentials authentication flow.
          </a>
           You should select this if you have no requirement to render your application inside of the AgencyCloud desktop CRM and, you have no requirement for user-centric client side authentication.
        </p>
        <p
          class="e15ggth7-el-body-text"
        >
          Typically you will be pulling data to serve another application, to perform data processing or some other analytics function.
        </p>
        <p
          class="e15ggth7-el-body-text"
        >
          You should also select this option if you require a permenent connection to our APIs; to pull data on demand as opposed to on the fly, when a user logs in to your application.
        </p>
      </div>
      <div>
        <h2
          class="e1byern-el-subtitle"
        >
          Website Feeds
        </h2>
        <p
          class="e15ggth7-el-body-text"
        >
          When building a public website for a Reapit Customer, you will have no user authentication so your integration must be server-side, using our
           
          <a>
            Client Credentials authentication flow.
          </a>
        </p>
        <p
          class="e15ggth7-el-body-text"
        >
          Your application will be read-only and by selecting this option, we will pre-populate the typical API permissions your integration will need for most website development.
        </p>
      </div>
      <div>
        <h2
          class="e1byern-el-subtitle"
        >
          Web Services Migrations
        </h2>
        <p
          class="e15ggth7-el-body-text"
        >
          Select this option if you are migraiting from the legacy Reapit SOAP API, or web services. These services will soon be deprecated so it is important to start your migration to the Foundations Platform as soon as possible.
        </p>
        <p
          class="e15ggth7-el-body-text"
        >
          You will get options at the next steps to decide whether client or server-side authentication best serves your application needs however, in most cases web services applications are server-side using our
           
          <a>
            Client Credentials authentication flow.
          </a>
        </p>
        <p
          class="e15ggth7-el-body-text"
        >
          Please be aware there is not a 1:1 mapping between the SOAP and Foundations REST API. As such, we suggest reading the 
          <a>
            API docs here
          </a>
           and looking at the
           
          <a
            href="/swagger"
            rel="noopener noreferrer"
            target="_blank"
          >
            API explorer here
             
          </a>
          to investigate which data sets and permissions you will need before getting started.
        </p>
      </div>
      <div>
        <h2
          class="e1byern-el-subtitle"
        >
          Using Reapit Connect as an Itentity Provider
        </h2>
        <p
          class="e15ggth7-el-body-text"
        >
          We support using Reapit Connect, our client-side authentication solution, simply as an identity provider for your application.
        </p>
        <p
          class="e15ggth7-el-body-text"
        >
          In this case, your client side authenticated users will not have any data permissions however, you can access and validate their identity against your own application. For more on
           
          <a>
            Reapit Connect visit here
          </a>
           and if you are interested in using our Sign In With Reapit button to embed on your own site
           
          <a>
            visit here
          </a>
        </p>
      </div>
      <div>
        <h2
          class="e1byern-el-subtitle"
        >
          Other App Types
        </h2>
        <p
          class="e15ggth7-el-body-text"
        >
          If your use case does not fit into one of the other categories, you should consider a couple of points before proceeding.
        </p>
        <p
          class="e15ggth7-el-body-text"
        >
          Firstly, do you need to know about a logged in user for your integration and / or do you intend to fetch your data on the fly from our API when a user logs in. In this case, it is likely you need a client-side application using 
          <a>
            Reapit Connect.
          </a>
        </p>
        <p
          class="e15ggth7-el-body-text"
        >
          If you need a permenant feed, fetching your data on demand and / or you have no requirement for user information or a user-centric login flow, it is likely you need a server-side application using our
           
          <a>
            Client Credentials authentication flow.
          </a>
        </p>
      </div>
      <div>
        <h2
          class="e1byern-el-subtitle"
        >
          Client Side Apps
        </h2>
        <p
          class="e15ggth7-el-body-text"
        >
          Client Side Apps use our identity provider
           
          <a>
            Reapit Connect
          </a>
           to authenticate against our API. Your application will need to re-direct to Reapit Connect where we will handle user login and in turn, re-direct back to your app with a code in the url that you exchange for access and id JWTs, referred to as
           
          <a>
            Authorization Code flow.
          </a>
           You will need to provide us with uris to your application at the next step so we know where to return you to on login and on completion of this wizard, you will receive a Client Id you need to start the flow.
        </p>
        <p
          class="e15ggth7-el-body-text"
        >
          To make this process easier, we provide you with an authentication module for client-side apps,
           
          <a>
            Connect Session
          </a>
          , which comes bundled with our
           
          <a>
            Create React App Template
          </a>
           for quick start client-side development.
        </p>
      </div>
      <div>
        <h2
          class="e1byern-el-subtitle"
        >
          Server Side Apps
        </h2>
        <p
          class="e15ggth7-el-body-text"
        >
          Server-side applications authenticate against our API using the
           
          <a>
            Client Credentials authentication flow.
          </a>
           This process involves the exchange of a Client Id and Secret for a JWT access token to authenticate against all requests.
        </p>
        <p
          class="e15ggth7-el-body-text"
        >
          Unlike Client Side applications, you do not have to re-direct to Reapit Connect, nor do your users have to log into your application. Because of this, the flow must only be used on the Server Side to ensure the Client Secret you will be issued at the end of this wizard is held in a secure location.
        </p>
      </div>
      <div>
        <h2
          class="e2dm5rh-el-has-disabled-text e1byern-el-subtitle"
        >
          Reapit Connect Redirects
        </h2>
        <p
          class="e2dm5rh-el-has-disabled-text e15ggth7-el-body-text"
        >
          When using the Reapit Connect
           
          <a>
            Authorization Code flow,
          </a>
           you need to register both a re-direct uri and a logout uri. The former is the location in your app, you want Reapit Connect to re-direct to after a successful user login, the latter, after a succesful logout. Only uris that are registered here will be accepted as a location by Reapit Connect although, you can register multiple locations with a comma separated list.
        </p>
        <p
          class="e2dm5rh-el-has-disabled-text e15ggth7-el-body-text"
        >
          We have pre-populated the urls that you need when using our
           
          <a>
            Create React App Template
          </a>
           however, any localhost (for local development), or https uri is acceptable. Please note, the Uris must match those in your app exactly, inclusive of white space and trailing slashes.
        </p>
      </div>
      <div>
        <h2
          class="e2dm5rh-el-has-disabled-text e1byern-el-subtitle"
        >
          Permissions
        </h2>
        <p
          class="e2dm5rh-el-has-disabled-text e15ggth7-el-body-text"
        >
          Permissions are registered as scopes against the access token you receive back from one of our Authentication Flows. They map 1:1 and on a read/write basis to endpoints in our Foundations REST API. As such, it is worth looking at the
           
          <a
            href="/swagger"
            rel="noopener noreferrer"
            target="_blank"
          >
            API explorer here
             
          </a>
          before procceeding, to investigate which permissions you think you will need.
        </p>
        <p
          class="e2dm5rh-el-has-disabled-text e15ggth7-el-body-text"
        >
          For some flows we have pre-populated suggested permissions based on what you have said you wish to acheive with Foundations. These can be removed or added as you see fit and all permissions can be edited later if you wish to add or remove them before your app goes live.
        </p>
      </div>
    </div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;
