// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ProfileTab should match snapshot 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <Forms>
    <Section
      className="justify-between items-center"
      hasPadding={false}
      isFlex={true}
    >
      <section
        className="section is-flex has-margin has-background justify-between items-center"
        data-test=""
      >
        <H3
          className="mb-0"
        >
          <h3
            className="title is-3 mb-0"
            id=""
          >
            Settings
          </h3>
        </H3>
        <Button
          dataTest="logout-btn"
          onClick={[Function]}
          type="button"
          variant="primary"
        >
          <button
            className="button   is-primary "
            data-test="logout-btn"
            disabled={false}
            onClick={[Function]}
            type="button"
          >
            Logout
          </button>
        </Button>
      </section>
    </Section>
    <ContactInformationForm>
      <Formik
        initialValues={
          Object {
            "jobTitle": "Head of Platform",
            "name": "Craig Lorem",
          }
        }
        onSubmit={[Function]}
        validationSchema={
          ObjectSchema {
            "_blacklist": ReferenceSet {
              "list": Set {},
              "refs": Map {},
            },
            "_blacklistError": undefined,
            "_excludedEdges": Array [],
            "_nodes": Array [
              "jobTitle",
              "name",
            ],
            "_sortErrors": [Function],
            "_typeError": [Function],
            "_whitelist": ReferenceSet {
              "list": Set {},
              "refs": Map {},
            },
            "_whitelistError": undefined,
            "conditions": Array [],
            "deps": Array [],
            "exclusiveTests": Object {},
            "fields": Object {
              "jobTitle": StringSchema {
                "_blacklist": ReferenceSet {
                  "list": Set {},
                  "refs": Map {},
                },
                "_blacklistError": undefined,
                "_typeError": [Function],
                "_whitelist": ReferenceSet {
                  "list": Set {},
                  "refs": Map {},
                },
                "_whitelistError": undefined,
                "conditions": Array [],
                "deps": Array [],
                "exclusiveTests": Object {
                  "matches": false,
                  "max": true,
                  "required": true,
                  "trim": false,
                },
                "spec": Object {
                  "abortEarly": true,
                  "nullable": false,
                  "presence": "required",
                  "recursive": true,
                  "strict": false,
                  "strip": false,
                },
                "tests": Array [
                  [Function],
                  [Function],
                  [Function],
                  [Function],
                ],
                "transforms": Array [
                  [Function],
                  [Function],
                ],
                "type": "string",
              },
              "name": StringSchema {
                "_blacklist": ReferenceSet {
                  "list": Set {},
                  "refs": Map {},
                },
                "_blacklistError": undefined,
                "_typeError": [Function],
                "_whitelist": ReferenceSet {
                  "list": Set {},
                  "refs": Map {},
                },
                "_whitelistError": undefined,
                "conditions": Array [],
                "deps": Array [],
                "exclusiveTests": Object {
                  "matches": false,
                  "max": true,
                  "required": true,
                  "trim": false,
                },
                "spec": Object {
                  "abortEarly": true,
                  "nullable": false,
                  "presence": "required",
                  "recursive": true,
                  "strict": false,
                  "strip": false,
                },
                "tests": Array [
                  [Function],
                  [Function],
                  [Function],
                  [Function],
                ],
                "transforms": Array [
                  [Function],
                  [Function],
                ],
                "type": "string",
              },
            },
            "spec": Object {
              "abortEarly": true,
              "nullable": false,
              "presence": "optional",
              "recursive": true,
              "strict": false,
              "strip": false,
            },
            "tests": Array [],
            "transforms": Array [
              [Function],
            ],
            "type": "object",
          }
        }
      >
        <FormSection>
          <div
            className="form-section"
          >
            <Form>
              <form
                action="#"
                onReset={[Function]}
                onSubmit={[Function]}
              >
                <FadeIn>
                  <div
                    className="f1ohzb3j-fade-in"
                  >
                    <H5>
                      <h5
                        className="title is-5"
                        id=""
                      >
                        Contact Information
                      </h5>
                    </H5>
                    <FormSubHeading>
                      <div
                        className="form-subheading"
                      >
                        Please use the fields below to edit your contact information
                      </div>
                    </FormSubHeading>
                    <Grid>
                      <div
                        className="columns"
                        data-test=""
                      >
                        <GridItem>
                          <div
                            className="column"
                            data-test=""
                          >
                            <Input
                              dataTest="name"
                              disabled={false}
                              id="name"
                              labelText="Full Name"
                              name="name"
                              type="text"
                            >
                              <Field
                                name="name"
                                validate={[Function]}
                              >
                                <div
                                  className="field"
                                >
                                  <div
                                    className="control "
                                  >
                                    <label
                                      className="label inline-block "
                                      htmlFor="name"
                                    >
                                      Full Name
                                    </label>
                                    <input
                                      className="input is-primary"
                                      data-test="name"
                                      disabled={false}
                                      id="name"
                                      name="name"
                                      onBlur={[Function]}
                                      onChange={[Function]}
                                      placeholder=""
                                      type="text"
                                      value="Craig Lorem"
                                    />
                                  </div>
                                </div>
                              </Field>
                            </Input>
                          </div>
                        </GridItem>
                        <GridItem>
                          <div
                            className="column"
                            data-test=""
                          >
                            <Input
                              dataTest="job-title"
                              disabled={false}
                              id="jobTitle"
                              labelText="Job Title"
                              name="jobTitle"
                              type="text"
                            >
                              <Field
                                name="jobTitle"
                                validate={[Function]}
                              >
                                <div
                                  className="field"
                                >
                                  <div
                                    className="control "
                                  >
                                    <label
                                      className="label inline-block "
                                      htmlFor="jobTitle"
                                    >
                                      Job Title
                                    </label>
                                    <input
                                      className="input is-primary"
                                      data-test="job-title"
                                      disabled={false}
                                      id="jobTitle"
                                      name="jobTitle"
                                      onBlur={[Function]}
                                      onChange={[Function]}
                                      placeholder=""
                                      type="text"
                                      value="Head of Platform"
                                    />
                                  </div>
                                </div>
                              </Field>
                            </Input>
                          </div>
                        </GridItem>
                      </div>
                    </Grid>
                    <LevelRight>
                      <div
                        className="level-right"
                        data-test=""
                      >
                        <Button
                          dataTest="save-changes"
                          disabled={false}
                          loading={false}
                          type="submit"
                          variant="primary"
                        >
                          <button
                            className="button   is-primary "
                            data-test="save-changes"
                            disabled={false}
                            type="submit"
                          >
                            Save Changes
                          </button>
                        </Button>
                      </div>
                    </LevelRight>
                  </div>
                </FadeIn>
              </form>
            </Form>
          </div>
        </FormSection>
      </Formik>
    </ContactInformationForm>
    <ToggleCustomerDataForm />
    <ChangePasswordForm
      changePassword={[Function]}
    >
      <FormSection>
        <div
          className="form-section"
        >
          <Formik
            initialValues={
              Object {
                "confirmPassword": "",
                "currentPassword": "",
                "password": "",
              }
            }
            onSubmit={[Function]}
            validationSchema={
              ObjectSchema {
                "_blacklist": ReferenceSet {
                  "list": Set {},
                  "refs": Map {},
                },
                "_blacklistError": undefined,
                "_excludedEdges": Array [],
                "_nodes": Array [
                  "confirmPassword",
                  "password",
                  "currentPassword",
                ],
                "_sortErrors": [Function],
                "_typeError": [Function],
                "_whitelist": ReferenceSet {
                  "list": Set {},
                  "refs": Map {},
                },
                "_whitelistError": undefined,
                "conditions": Array [],
                "deps": Array [],
                "exclusiveTests": Object {},
                "fields": Object {
                  "confirmPassword": StringSchema {
                    "_blacklist": ReferenceSet {
                      "list": Set {},
                      "refs": Map {},
                    },
                    "_blacklistError": undefined,
                    "_typeError": [Function],
                    "_whitelist": ReferenceSet {
                      "list": Set {
                        "",
                      },
                      "refs": Map {
                        "password" => Reference {
                          "getter": [Function],
                          "isContext": false,
                          "isSibling": true,
                          "isValue": false,
                          "key": "password",
                          "map": undefined,
                          "path": "password",
                        },
                      },
                    },
                    "_whitelistError": [Function],
                    "conditions": Array [],
                    "deps": Array [],
                    "exclusiveTests": Object {
                      "required": true,
                      "trim": false,
                    },
                    "spec": Object {
                      "abortEarly": true,
                      "nullable": false,
                      "presence": "required",
                      "recursive": true,
                      "strict": false,
                      "strip": false,
                    },
                    "tests": Array [
                      [Function],
                      [Function],
                    ],
                    "transforms": Array [
                      [Function],
                      [Function],
                    ],
                    "type": "string",
                  },
                  "currentPassword": StringSchema {
                    "_blacklist": ReferenceSet {
                      "list": Set {},
                      "refs": Map {},
                    },
                    "_blacklistError": undefined,
                    "_mutate": undefined,
                    "_typeError": [Function],
                    "_whitelist": ReferenceSet {
                      "list": Set {},
                      "refs": Map {},
                    },
                    "_whitelistError": undefined,
                    "conditions": Array [],
                    "deps": Array [],
                    "exclusiveTests": Object {
                      "required": true,
                      "trim": false,
                    },
                    "spec": Object {
                      "abortEarly": true,
                      "nullable": false,
                      "presence": "required",
                      "recursive": true,
                      "strict": false,
                      "strip": false,
                    },
                    "tests": Array [
                      [Function],
                      [Function],
                    ],
                    "transforms": Array [
                      [Function],
                      [Function],
                    ],
                    "type": "string",
                  },
                  "password": StringSchema {
                    "_blacklist": ReferenceSet {
                      "list": Set {},
                      "refs": Map {},
                    },
                    "_blacklistError": undefined,
                    "_typeError": [Function],
                    "_whitelist": ReferenceSet {
                      "list": Set {},
                      "refs": Map {},
                    },
                    "_whitelistError": undefined,
                    "conditions": Array [],
                    "deps": Array [],
                    "exclusiveTests": Object {
                      "matches": false,
                      "required": true,
                      "trim": false,
                    },
                    "spec": Object {
                      "abortEarly": true,
                      "nullable": false,
                      "presence": "required",
                      "recursive": true,
                      "strict": false,
                      "strip": false,
                    },
                    "tests": Array [
                      [Function],
                      [Function],
                      [Function],
                    ],
                    "transforms": Array [
                      [Function],
                      [Function],
                    ],
                    "type": "string",
                  },
                },
                "spec": Object {
                  "abortEarly": true,
                  "nullable": false,
                  "presence": "optional",
                  "recursive": true,
                  "strict": false,
                  "strip": false,
                },
                "tests": Array [],
                "transforms": Array [
                  [Function],
                ],
                "type": "object",
              }
            }
          >
            <Form>
              <form
                action="#"
                onReset={[Function]}
                onSubmit={[Function]}
              >
                <FadeIn>
                  <div
                    className="f1ohzb3j-fade-in"
                  >
                    <H5>
                      <h5
                        className="title is-5"
                        id=""
                      >
                        Change password
                      </h5>
                    </H5>
                    <FormSubHeading>
                      <div
                        className="form-subheading"
                      >
                        Please complete the following fields to change your password. You will be automatically logged out for the changes to be applied
                      </div>
                    </FormSubHeading>
                    <Grid>
                      <div
                        className="columns"
                        data-test=""
                      >
                        <GridItem>
                          <div
                            className="column"
                            data-test=""
                          >
                            <Input
                              dataTest="current-password"
                              id="currentPassword"
                              labelText="Current Password"
                              name="currentPassword"
                              type="password"
                            >
                              <Field
                                name="currentPassword"
                                validate={[Function]}
                              >
                                <div
                                  className="field"
                                >
                                  <div
                                    className="control "
                                  >
                                    <label
                                      className="label inline-block "
                                      htmlFor="currentPassword"
                                    >
                                      Current Password
                                    </label>
                                    <input
                                      className="input is-primary"
                                      data-test="current-password"
                                      disabled={false}
                                      id="currentPassword"
                                      name="currentPassword"
                                      onBlur={[Function]}
                                      onChange={[Function]}
                                      placeholder=""
                                      type="password"
                                      value=""
                                    />
                                  </div>
                                </div>
                              </Field>
                            </Input>
                          </div>
                        </GridItem>
                        <GridItem>
                          <div
                            className="column"
                            data-test=""
                          >
                            <Input
                              dataTest="password"
                              id="password"
                              labelText="Password"
                              name="password"
                              type="password"
                            >
                              <Field
                                name="password"
                                validate={[Function]}
                              >
                                <div
                                  className="field"
                                >
                                  <div
                                    className="control "
                                  >
                                    <label
                                      className="label inline-block "
                                      htmlFor="password"
                                    >
                                      Password
                                    </label>
                                    <input
                                      className="input is-primary"
                                      data-test="password"
                                      disabled={false}
                                      id="password"
                                      name="password"
                                      onBlur={[Function]}
                                      onChange={[Function]}
                                      placeholder=""
                                      type="password"
                                      value=""
                                    />
                                  </div>
                                </div>
                              </Field>
                            </Input>
                          </div>
                        </GridItem>
                      </div>
                    </Grid>
                    <Grid>
                      <div
                        className="columns"
                        data-test=""
                      >
                        <GridItem
                          className="is-half"
                        >
                          <div
                            className="column is-half"
                            data-test=""
                          >
                            <Input
                              dataTest="confirmPassword"
                              id="confirmPassword"
                              labelText="Confirm Password"
                              name="confirmPassword"
                              type="password"
                            >
                              <Field
                                name="confirmPassword"
                                validate={[Function]}
                              >
                                <div
                                  className="field"
                                >
                                  <div
                                    className="control "
                                  >
                                    <label
                                      className="label inline-block "
                                      htmlFor="confirmPassword"
                                    >
                                      Confirm Password
                                    </label>
                                    <input
                                      className="input is-primary"
                                      data-test="confirmPassword"
                                      disabled={false}
                                      id="confirmPassword"
                                      name="confirmPassword"
                                      onBlur={[Function]}
                                      onChange={[Function]}
                                      placeholder=""
                                      type="password"
                                      value=""
                                    />
                                  </div>
                                </div>
                              </Field>
                            </Input>
                          </div>
                        </GridItem>
                      </div>
                    </Grid>
                    <LevelRight>
                      <div
                        className="level-right"
                        data-test=""
                      >
                        <Button
                          dataTest="button-change-password"
                          disabled={true}
                          loading={false}
                          type="submit"
                          variant="primary"
                        >
                          <button
                            className="button   is-primary "
                            data-test="button-change-password"
                            disabled={true}
                            type="submit"
                          >
                            Change Password
                          </button>
                        </Button>
                      </div>
                    </LevelRight>
                  </div>
                </FadeIn>
              </form>
            </Form>
          </Formik>
        </div>
      </FormSection>
    </ChangePasswordForm>
  </Forms>
</Provider>
`;
