// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ContactInformationForm should match snapshot 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <ContactInformationForm>
    <Formik
      initialValues={
        Object {
          "jobTitle": "",
          "name": "mockConstructor",
        }
      }
      onSubmit={[Function]}
      validationSchema={
        ObjectSchema {
          "_blacklist": ReferenceSet {
            "list": Set {},
            "refs": Map {},
          },
          "_blacklistError": undefined,
          "_excludedEdges": Array [],
          "_nodes": Array [
            "jobTitle",
            "name",
          ],
          "_sortErrors": [Function],
          "_typeError": [Function],
          "_whitelist": ReferenceSet {
            "list": Set {},
            "refs": Map {},
          },
          "_whitelistError": undefined,
          "conditions": Array [],
          "deps": Array [],
          "exclusiveTests": Object {},
          "fields": Object {
            "jobTitle": StringSchema {
              "_blacklist": ReferenceSet {
                "list": Set {},
                "refs": Map {},
              },
              "_blacklistError": undefined,
              "_typeError": [Function],
              "_whitelist": ReferenceSet {
                "list": Set {},
                "refs": Map {},
              },
              "_whitelistError": undefined,
              "conditions": Array [],
              "deps": Array [],
              "exclusiveTests": Object {
                "matches": false,
                "max": true,
                "required": true,
                "trim": false,
              },
              "spec": Object {
                "abortEarly": true,
                "nullable": false,
                "presence": "required",
                "recursive": true,
                "strict": false,
                "strip": false,
              },
              "tests": Array [
                [Function],
                [Function],
                [Function],
                [Function],
              ],
              "transforms": Array [
                [Function],
                [Function],
              ],
              "type": "string",
            },
            "name": StringSchema {
              "_blacklist": ReferenceSet {
                "list": Set {},
                "refs": Map {},
              },
              "_blacklistError": undefined,
              "_typeError": [Function],
              "_whitelist": ReferenceSet {
                "list": Set {},
                "refs": Map {},
              },
              "_whitelistError": undefined,
              "conditions": Array [],
              "deps": Array [],
              "exclusiveTests": Object {
                "matches": false,
                "max": true,
                "required": true,
                "trim": false,
              },
              "spec": Object {
                "abortEarly": true,
                "nullable": false,
                "presence": "required",
                "recursive": true,
                "strict": false,
                "strip": false,
              },
              "tests": Array [
                [Function],
                [Function],
                [Function],
                [Function],
              ],
              "transforms": Array [
                [Function],
                [Function],
              ],
              "type": "string",
            },
          },
          "spec": Object {
            "abortEarly": true,
            "nullable": false,
            "presence": "optional",
            "recursive": true,
            "strict": false,
            "strip": false,
          },
          "tests": Array [],
          "transforms": Array [
            [Function],
          ],
          "type": "object",
        }
      }
    >
      <FormSection>
        <div
          className="form-section"
        >
          <Form>
            <form
              action="#"
              onReset={[Function]}
              onSubmit={[Function]}
            >
              <FadeIn>
                <div
                  className="f1ohzb3j-fade-in"
                >
                  <H5>
                    <h5
                      className="title is-5"
                      id=""
                    >
                      Contact Information
                    </h5>
                  </H5>
                  <FormSubHeading>
                    <div
                      className="form-subheading"
                    >
                      Please use the fields below to edit your contact information
                    </div>
                  </FormSubHeading>
                  <Grid>
                    <div
                      className="columns"
                      data-test=""
                    >
                      <GridItem>
                        <div
                          className="column"
                          data-test=""
                        >
                          <Input
                            dataTest="name"
                            disabled={[MockFunction]}
                            id="name"
                            labelText="Full Name"
                            name="name"
                            type="text"
                          >
                            <Field
                              name="name"
                              validate={[Function]}
                            >
                              <div
                                className="field"
                              >
                                <div
                                  className="control "
                                >
                                  <label
                                    className="label inline-block "
                                    htmlFor="name"
                                  >
                                    Full Name
                                  </label>
                                  <input
                                    className="input is-primary"
                                    data-test="name"
                                    disabled={[MockFunction]}
                                    id="name"
                                    name="name"
                                    onBlur={[Function]}
                                    onChange={[Function]}
                                    placeholder=""
                                    type="text"
                                    value="mockConstructor"
                                  />
                                </div>
                              </div>
                            </Field>
                          </Input>
                        </div>
                      </GridItem>
                      <GridItem>
                        <div
                          className="column"
                          data-test=""
                        >
                          <Input
                            dataTest="job-title"
                            disabled={[MockFunction]}
                            id="jobTitle"
                            labelText="Job Title"
                            name="jobTitle"
                            type="text"
                          >
                            <Field
                              name="jobTitle"
                              validate={[Function]}
                            >
                              <div
                                className="field"
                              >
                                <div
                                  className="control "
                                >
                                  <label
                                    className="label inline-block "
                                    htmlFor="jobTitle"
                                  >
                                    Job Title
                                  </label>
                                  <input
                                    className="input is-primary"
                                    data-test="job-title"
                                    disabled={[MockFunction]}
                                    id="jobTitle"
                                    name="jobTitle"
                                    onBlur={[Function]}
                                    onChange={[Function]}
                                    placeholder=""
                                    type="text"
                                    value=""
                                  />
                                </div>
                              </div>
                            </Field>
                          </Input>
                        </div>
                      </GridItem>
                    </div>
                  </Grid>
                  <LevelRight>
                    <div
                      className="level-right"
                      data-test=""
                    >
                      <Button
                        dataTest="save-changes"
                        disabled={false}
                        loading={[MockFunction]}
                        type="submit"
                        variant="primary"
                      >
                        <button
                          className="button  is-loading is-primary "
                          data-test="save-changes"
                          disabled={false}
                          type="submit"
                        >
                          Save Changes
                        </button>
                      </Button>
                    </div>
                  </LevelRight>
                </div>
              </FadeIn>
            </form>
          </Form>
        </div>
      </FormSection>
    </Formik>
  </ContactInformationForm>
</Provider>
`;
