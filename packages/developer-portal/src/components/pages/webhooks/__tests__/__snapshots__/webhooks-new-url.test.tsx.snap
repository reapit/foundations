// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`WebhooksNewUrl should match a snapshot 1`] = `
Object {
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <div
        class="ecbqyq6-el-snack-holder"
      />
      <div
        class="e6p05ya-el-fade-in e1fwulnz-el-form-layout"
      >
        <div
          class="ee8eqmp-el-input-wrap-full"
        >
          <p
            class="e11jaxfn-el-has-grey-text ewfctk4-el-has-no-margin evblxhy-el-body-text"
          >
            Add a url to receive your webhook payload here. The url must be a secure https endpoint.
          </p>
        </div>
        <div
          class="e1ksxx4v-el-input-wrap-med"
        >
          <div
            class="e1979rmu-el-input-group"
          >
            <input
              class="e1urjlvd-el-input"
              id="test-static-id"
              placeholder="Enter secure https:// url"
            />
            <label
              class="e1nbkkrq-el-label"
              for="test-static-id"
            >
              Webhook Url
            </label>
          </div>
        </div>
      </div>
    </div>
  </body>,
  "container": <div>
    <div
      class="ecbqyq6-el-snack-holder"
    />
    <div
      class="e6p05ya-el-fade-in e1fwulnz-el-form-layout"
    >
      <div
        class="ee8eqmp-el-input-wrap-full"
      >
        <p
          class="e11jaxfn-el-has-grey-text ewfctk4-el-has-no-margin evblxhy-el-body-text"
        >
          Add a url to receive your webhook payload here. The url must be a secure https endpoint.
        </p>
      </div>
      <div
        class="e1ksxx4v-el-input-wrap-med"
      >
        <div
          class="e1979rmu-el-input-group"
        >
          <input
            class="e1urjlvd-el-input"
            id="test-static-id"
            placeholder="Enter secure https:// url"
          />
          <label
            class="e1nbkkrq-el-label"
            for="test-static-id"
          >
            Webhook Url
          </label>
        </div>
      </div>
    </div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;
