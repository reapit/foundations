// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Register should match a snapshot 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <MemoryRouter
    initialEntries={
      Array [
        Object {
          "key": "registerRoute",
          "pathname": "/register",
        },
      ]
    }
  >
    <Router
      history={
        Object {
          "action": "POP",
          "block": [Function],
          "canGo": [Function],
          "createHref": [Function],
          "entries": Array [
            Object {
              "hash": "",
              "key": "registerRoute",
              "pathname": "/register",
              "search": "",
            },
          ],
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "index": 0,
          "length": 1,
          "listen": [Function],
          "location": Object {
            "hash": "",
            "key": "registerRoute",
            "pathname": "/register",
            "search": "",
          },
          "push": [Function],
          "replace": [Function],
        }
      }
    >
      <Register>
        <div
          className="clgvn7z-container"
        >
          <div
            className="i1m3gui8-image-container"
          >
            <div
              className="l8alx8w-login-images"
            >
              <img
                className="lich6-login-image lawfo3s-login-image-visible"
                src={Object {}}
              />
            </div>
          </div>
          <div
            className="wj5na9i-wrapper"
          >
            <H1
              isCentered={true}
            >
              <h1
                className="title is-1 has-text-centered"
                id=""
              >
                Register
              </h1>
            </H1>
            <p
              className="mb-4"
            >
              Reapit Foundations developers
            </p>
            <Formik
              initialValues={
                Object {
                  "agreedTerms": "",
                  "companyName": "",
                  "email": "",
                  "name": "",
                  "telephone": "",
                }
              }
              onSubmit={[Function]}
              validationSchema={
                ObjectSchema {
                  "_blacklist": RefSet {
                    "list": Set {},
                    "refs": Map {},
                  },
                  "_conditions": Array [],
                  "_defaultDefault": [Function],
                  "_deps": Array [],
                  "_excludedEdges": Array [],
                  "_exclusive": Object {},
                  "_mutate": undefined,
                  "_nodes": Array [
                    "telephone",
                    "email",
                    "companyName",
                    "name",
                  ],
                  "_options": Object {
                    "abortEarly": true,
                    "recursive": true,
                  },
                  "_type": "object",
                  "_typeError": [Function],
                  "_whitelist": RefSet {
                    "list": Set {},
                    "refs": Map {},
                  },
                  "fields": Object {
                    "companyName": StringSchema {
                      "_blacklist": RefSet {
                        "list": Set {},
                        "refs": Map {},
                      },
                      "_conditions": Array [],
                      "_deps": Array [],
                      "_exclusive": Object {
                        "required": true,
                        "trim": false,
                      },
                      "_mutate": undefined,
                      "_options": Object {
                        "abortEarly": true,
                        "recursive": true,
                      },
                      "_type": "string",
                      "_typeError": [Function],
                      "_whitelist": RefSet {
                        "list": Set {},
                        "refs": Map {},
                      },
                      "tests": Array [
                        [Function],
                        [Function],
                      ],
                      "transforms": Array [
                        [Function],
                        [Function],
                      ],
                      "type": "string",
                    },
                    "email": StringSchema {
                      "_blacklist": RefSet {
                        "list": Set {},
                        "refs": Map {},
                      },
                      "_conditions": Array [],
                      "_deps": Array [],
                      "_exclusive": Object {
                        "matches": false,
                        "required": true,
                        "trim": false,
                      },
                      "_mutate": undefined,
                      "_options": Object {
                        "abortEarly": true,
                        "recursive": true,
                      },
                      "_type": "string",
                      "_typeError": [Function],
                      "_whitelist": RefSet {
                        "list": Set {},
                        "refs": Map {},
                      },
                      "tests": Array [
                        [Function],
                        [Function],
                        [Function],
                      ],
                      "transforms": Array [
                        [Function],
                        [Function],
                      ],
                      "type": "string",
                    },
                    "name": StringSchema {
                      "_blacklist": RefSet {
                        "list": Set {},
                        "refs": Map {},
                      },
                      "_conditions": Array [],
                      "_deps": Array [],
                      "_exclusive": Object {
                        "matches": false,
                        "required": true,
                        "trim": false,
                      },
                      "_mutate": undefined,
                      "_options": Object {
                        "abortEarly": true,
                        "recursive": true,
                      },
                      "_type": "string",
                      "_typeError": [Function],
                      "_whitelist": RefSet {
                        "list": Set {},
                        "refs": Map {},
                      },
                      "tests": Array [
                        [Function],
                        [Function],
                        [Function],
                      ],
                      "transforms": Array [
                        [Function],
                        [Function],
                      ],
                      "type": "string",
                    },
                    "telephone": StringSchema {
                      "_blacklist": RefSet {
                        "list": Set {},
                        "refs": Map {},
                      },
                      "_conditions": Array [],
                      "_deps": Array [],
                      "_exclusive": Object {
                        "matches": false,
                        "required": true,
                        "trim": false,
                      },
                      "_mutate": undefined,
                      "_options": Object {
                        "abortEarly": true,
                        "recursive": true,
                      },
                      "_type": "string",
                      "_typeError": [Function],
                      "_whitelist": RefSet {
                        "list": Set {},
                        "refs": Map {},
                      },
                      "tests": Array [
                        [Function],
                        [Function],
                        [Function],
                      ],
                      "transforms": Array [
                        [Function],
                        [Function],
                      ],
                      "type": "string",
                    },
                  },
                  "tests": Array [],
                  "transforms": Array [
                    [Function],
                  ],
                  "type": "object",
                }
              }
            >
              <Form
                data-test="register-form"
                noValidate={true}
              >
                <form
                  action="#"
                  data-test="register-form"
                  noValidate={true}
                  onReset={[Function]}
                  onSubmit={[Function]}
                >
                  <FormSection>
                    <div
                      className="form-section"
                    >
                      <FormHeading>
                        <div
                          className="form-heading"
                        >
                          Register for Foundations
                        </div>
                      </FormHeading>
                      <FormSubHeading>
                        <div
                          className="form-subheading"
                        >
                          By registering for the Foundations platform, you will get access to the Reapit developer portal and sandbox data. You will also get the opportunity to list apps in the Reapit Marketplace. We look forward to seeing what you build!
                        </div>
                      </FormSubHeading>
                      <Input
                        dataTest="register-name"
                        id="name"
                        labelText="Full name"
                        name="name"
                        placeholder="Joe Developer"
                        type="text"
                      >
                        <Field
                          name="name"
                          validate={[Function]}
                        >
                          <div
                            className="field"
                          >
                            <div
                              className="control "
                            >
                              <label
                                className="label inline-block "
                                htmlFor="name"
                              >
                                Full name
                              </label>
                              <input
                                className="input is-primary"
                                data-test="register-name"
                                disabled={false}
                                id="name"
                                name="name"
                                onBlur={[Function]}
                                onChange={[Function]}
                                placeholder="Joe Developer"
                                type="text"
                                value=""
                              />
                            </div>
                          </div>
                        </Field>
                      </Input>
                      <Input
                        dataTest="register-company-name"
                        id="companyName"
                        labelText="Company name"
                        name="companyName"
                        placeholder="Acme Industries Ltd"
                        type="text"
                      >
                        <Field
                          name="companyName"
                          validate={[Function]}
                        >
                          <div
                            className="field"
                          >
                            <div
                              className="control "
                            >
                              <label
                                className="label inline-block "
                                htmlFor="companyName"
                              >
                                Company name
                              </label>
                              <input
                                className="input is-primary"
                                data-test="register-company-name"
                                disabled={false}
                                id="companyName"
                                name="companyName"
                                onBlur={[Function]}
                                onChange={[Function]}
                                placeholder="Acme Industries Ltd"
                                type="text"
                                value=""
                              />
                            </div>
                          </div>
                        </Field>
                      </Input>
                      <Input
                        dataTest="register-email"
                        id="email"
                        labelText="Email"
                        name="email"
                        placeholder="name@address.com"
                        type="email"
                      >
                        <Field
                          name="email"
                          validate={[Function]}
                        >
                          <div
                            className="field"
                          >
                            <div
                              className="control "
                            >
                              <label
                                className="label inline-block "
                                htmlFor="email"
                              >
                                Email
                              </label>
                              <input
                                className="input is-primary"
                                data-test="register-email"
                                disabled={false}
                                id="email"
                                name="email"
                                onBlur={[Function]}
                                onChange={[Function]}
                                placeholder="name@address.com"
                                type="email"
                                value=""
                              />
                            </div>
                          </div>
                        </Field>
                      </Input>
                      <Input
                        dataTest="register-telephone"
                        id="telephone"
                        labelText="Telephone"
                        name="telephone"
                        placeholder="0800 800 800"
                        type="tel"
                      >
                        <Field
                          name="telephone"
                          validate={[Function]}
                        >
                          <div
                            className="field"
                          >
                            <div
                              className="control "
                            >
                              <label
                                className="label inline-block "
                                htmlFor="telephone"
                              >
                                Telephone
                              </label>
                              <input
                                className="input is-primary"
                                data-test="register-telephone"
                                disabled={false}
                                id="telephone"
                                name="telephone"
                                onBlur={[Function]}
                                onChange={[Function]}
                                placeholder="0800 800 800"
                                type="tel"
                                value=""
                              />
                            </div>
                          </div>
                        </Field>
                      </Input>
                    </div>
                  </FormSection>
                  <FormSection>
                    <div
                      className="form-section"
                    >
                      <Level>
                        <div
                          className="level"
                          data-test=""
                        >
                          <TermsAndConditionsModal
                            afterClose={[Function]}
                            isSubmitting={false}
                            onAccept={[Function]}
                            onDecline={[Function]}
                            visible={false}
                          >
                            <Modal
                              afterClose={[Function]}
                              className="mj13qo2-modal-width"
                              footerItems={
                                <React.Fragment>
                                  <Button
                                    onClick={[Function]}
                                    type="button"
                                    variant="secondary"
                                  >
                                    Decline
                                  </Button>
                                  <Button
                                    dataTest="buttonAcceptTermsAndConditions"
                                    loading={false}
                                    onClick={[Function]}
                                  >
                                    Accept
                                  </Button>
                                </React.Fragment>
                              }
                              size="medium"
                              tapOutsideToDissmiss={true}
                              title="Terms and Conditions"
                              visible={false}
                            />
                          </TermsAndConditionsModal>
                          <Button
                            dataTest="button-register"
                            fullWidth={true}
                            onClick={[Function]}
                          >
                            <button
                              className="button is-fullwidth  is-primary "
                              data-test="button-register"
                              disabled={false}
                              onClick={[Function]}
                              type="button"
                            >
                              Register
                            </button>
                          </Button>
                        </div>
                      </Level>
                      <Level>
                        <div
                          className="level"
                          data-test=""
                        >
                          Already have an account?
                          <Link
                            to="/login"
                          >
                            <LinkAnchor
                              href="/login"
                              navigate={[Function]}
                            >
                              <a
                                href="/login"
                                onClick={[Function]}
                              >
                                Login
                              </a>
                            </LinkAnchor>
                          </Link>
                        </div>
                      </Level>
                    </div>
                  </FormSection>
                </form>
              </Form>
            </Formik>
          </div>
        </div>
      </Register>
    </Router>
  </MemoryRouter>
</Provider>
`;
