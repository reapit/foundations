// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`DeveloperSubmitApp should match a snapshot when pendingRevisions = false 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <MemoryRouter
    initialEntries={
      Array [
        Object {
          "key": "registerRoute",
          "pathname": "/register",
        },
      ]
    }
  >
    <Router
      history={
        Object {
          "action": "POP",
          "block": [Function],
          "canGo": [Function],
          "createHref": [Function],
          "entries": Array [
            Object {
              "hash": "",
              "key": "registerRoute",
              "pathname": "/register",
              "search": "",
            },
          ],
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "index": 0,
          "length": 1,
          "listen": [Function],
          "location": Object {
            "hash": "",
            "key": "registerRoute",
            "pathname": "/register",
            "search": "",
          },
          "push": [Function],
          "replace": [Function],
        }
      }
    >
      <DeveloperEditApp>
        <H3>
          <h3
            className="title is-3"
            id=""
          >
            Edit App
          </h3>
        </H3>
        <Formik
          initialValues={
            Object {
              "authFlow": undefined,
              "categoryId": "",
              "description": undefined,
              "desktopIntegrationTypeIds": Array [],
              "developerId": undefined,
              "homePage": undefined,
              "iconImageUrl": "",
              "isDirectApi": undefined,
              "isFree": undefined,
              "isListed": undefined,
              "isPrivateApp": "no",
              "launchUri": undefined,
              "limitToClientIds": "",
              "name": undefined,
              "pricingUrl": undefined,
              "privacyPolicyUrl": undefined,
              "products": "",
              "redirectUris": "",
              "scopes": Array [],
              "screen1ImageUrl": "",
              "signoutUris": "",
              "summary": undefined,
              "supportEmail": undefined,
              "telephone": undefined,
              "termsAndConditionsUrl": undefined,
            }
          }
          onSubmit={[Function]}
          validationSchema={
            ObjectSchema {
              "_blacklist": ReferenceSet {
                "list": Set {},
                "refs": Map {},
              },
              "_blacklistError": undefined,
              "_excludedEdges": Array [],
              "_nodes": Array [
                "products",
                "isFree",
                "isListed",
                "pricingUrl",
                "privacyPolicyUrl",
                "termsAndConditionsUrl",
                "limitToClientIds",
                "authFlow",
                "signoutUris",
                "redirectUris",
                "scopes",
                "summary",
                "description",
                "homePage",
                "screen1ImageUrl",
                "iconImageUrl",
                "launchUri",
                "supportEmail",
                "telephone",
                "name",
              ],
              "_sortErrors": [Function],
              "_typeError": [Function],
              "_whitelist": ReferenceSet {
                "list": Set {},
                "refs": Map {},
              },
              "_whitelistError": undefined,
              "conditions": Array [],
              "deps": Array [],
              "exclusiveTests": Object {},
              "fields": Object {
                "authFlow": StringSchema {
                  "_blacklist": ReferenceSet {
                    "list": Set {},
                    "refs": Map {},
                  },
                  "_blacklistError": undefined,
                  "_typeError": [Function],
                  "_whitelist": ReferenceSet {
                    "list": Set {
                      "authorisationCode",
                      "clientCredentials",
                    },
                    "refs": Map {},
                  },
                  "_whitelistError": [Function],
                  "conditions": Array [],
                  "deps": Array [],
                  "exclusiveTests": Object {
                    "required": true,
                    "trim": false,
                  },
                  "spec": Object {
                    "abortEarly": true,
                    "nullable": false,
                    "presence": "required",
                    "recursive": true,
                    "strict": false,
                    "strip": false,
                  },
                  "tests": Array [
                    [Function],
                    [Function],
                  ],
                  "transforms": Array [
                    [Function],
                    [Function],
                  ],
                  "type": "string",
                },
                "description": StringSchema {
                  "_blacklist": ReferenceSet {
                    "list": Set {},
                    "refs": Map {},
                  },
                  "_blacklistError": undefined,
                  "_typeError": [Function],
                  "_whitelist": ReferenceSet {
                    "list": Set {},
                    "refs": Map {},
                  },
                  "_whitelistError": undefined,
                  "conditions": Array [
                    Condition {
                      "fn": [Function],
                      "refs": Array [
                        Reference {
                          "getter": [Function],
                          "isContext": false,
                          "isSibling": true,
                          "isValue": false,
                          "key": "isListed",
                          "map": undefined,
                          "path": "isListed",
                        },
                      ],
                    },
                  ],
                  "deps": Array [
                    "isListed",
                  ],
                  "exclusiveTests": Object {
                    "max": true,
                    "min": true,
                    "trim": false,
                  },
                  "spec": Object {
                    "abortEarly": true,
                    "nullable": false,
                    "presence": "optional",
                    "recursive": true,
                    "strict": false,
                    "strip": false,
                  },
                  "tests": Array [
                    [Function],
                    [Function],
                    [Function],
                  ],
                  "transforms": Array [
                    [Function],
                    [Function],
                  ],
                  "type": "string",
                },
                "homePage": StringSchema {
                  "_blacklist": ReferenceSet {
                    "list": Set {},
                    "refs": Map {},
                  },
                  "_blacklistError": undefined,
                  "_typeError": [Function],
                  "_whitelist": ReferenceSet {
                    "list": Set {},
                    "refs": Map {},
                  },
                  "_whitelistError": undefined,
                  "conditions": Array [
                    Condition {
                      "fn": [Function],
                      "refs": Array [
                        Reference {
                          "getter": [Function],
                          "isContext": false,
                          "isSibling": true,
                          "isValue": false,
                          "key": "isListed",
                          "map": undefined,
                          "path": "isListed",
                        },
                      ],
                    },
                  ],
                  "deps": Array [
                    "isListed",
                  ],
                  "exclusiveTests": Object {
                    "isValidHomePage": false,
                    "trim": false,
                  },
                  "spec": Object {
                    "abortEarly": true,
                    "nullable": false,
                    "presence": "optional",
                    "recursive": true,
                    "strict": false,
                    "strip": false,
                  },
                  "tests": Array [
                    [Function],
                    [Function],
                  ],
                  "transforms": Array [
                    [Function],
                    [Function],
                  ],
                  "type": "string",
                },
                "iconImageUrl": StringSchema {
                  "_blacklist": ReferenceSet {
                    "list": Set {},
                    "refs": Map {},
                  },
                  "_blacklistError": undefined,
                  "_typeError": [Function],
                  "_whitelist": ReferenceSet {
                    "list": Set {},
                    "refs": Map {},
                  },
                  "_whitelistError": undefined,
                  "conditions": Array [
                    Condition {
                      "fn": [Function],
                      "refs": Array [
                        Reference {
                          "getter": [Function],
                          "isContext": false,
                          "isSibling": true,
                          "isValue": false,
                          "key": "isListed",
                          "map": undefined,
                          "path": "isListed",
                        },
                      ],
                    },
                  ],
                  "deps": Array [
                    "isListed",
                  ],
                  "exclusiveTests": Object {},
                  "spec": Object {
                    "abortEarly": true,
                    "nullable": false,
                    "presence": "optional",
                    "recursive": true,
                    "strict": false,
                    "strip": false,
                  },
                  "tests": Array [],
                  "transforms": Array [
                    [Function],
                  ],
                  "type": "string",
                },
                "isListed": BooleanSchema {
                  "_blacklist": ReferenceSet {
                    "list": Set {},
                    "refs": Map {},
                  },
                  "_mutate": undefined,
                  "_typeError": [Function],
                  "_whitelist": ReferenceSet {
                    "list": Set {},
                    "refs": Map {},
                  },
                  "conditions": Array [],
                  "deps": Array [],
                  "exclusiveTests": Object {},
                  "spec": Object {
                    "abortEarly": true,
                    "nullable": false,
                    "presence": "optional",
                    "recursive": true,
                    "strict": false,
                    "strip": false,
                  },
                  "tests": Array [],
                  "transforms": Array [
                    [Function],
                  ],
                  "type": "boolean",
                },
                "launchUri": StringSchema {
                  "_blacklist": ReferenceSet {
                    "list": Set {},
                    "refs": Map {},
                  },
                  "_blacklistError": undefined,
                  "_typeError": [Function],
                  "_whitelist": ReferenceSet {
                    "list": Set {},
                    "refs": Map {},
                  },
                  "_whitelistError": undefined,
                  "conditions": Array [
                    Condition {
                      "fn": [Function],
                      "refs": Array [
                        Reference {
                          "getter": [Function],
                          "isContext": false,
                          "isSibling": true,
                          "isValue": false,
                          "key": "isListed",
                          "map": undefined,
                          "path": "isListed",
                        },
                      ],
                    },
                  ],
                  "deps": Array [
                    "isListed",
                  ],
                  "exclusiveTests": Object {
                    "isValidLaunchUri": false,
                    "trim": false,
                  },
                  "spec": Object {
                    "abortEarly": true,
                    "nullable": false,
                    "presence": "optional",
                    "recursive": true,
                    "strict": false,
                    "strip": false,
                  },
                  "tests": Array [
                    [Function],
                    [Function],
                  ],
                  "transforms": Array [
                    [Function],
                    [Function],
                  ],
                  "type": "string",
                },
                "limitToClientIds": StringSchema {
                  "_blacklist": ReferenceSet {
                    "list": Set {},
                    "refs": Map {},
                  },
                  "_blacklistError": undefined,
                  "_typeError": [Function],
                  "_whitelist": ReferenceSet {
                    "list": Set {},
                    "refs": Map {},
                  },
                  "_whitelistError": undefined,
                  "conditions": Array [],
                  "deps": Array [],
                  "exclusiveTests": Object {
                    "isValidLimitToClientIds": false,
                    "trim": false,
                  },
                  "spec": Object {
                    "abortEarly": true,
                    "nullable": false,
                    "presence": "optional",
                    "recursive": true,
                    "strict": false,
                    "strip": false,
                  },
                  "tests": Array [
                    [Function],
                    [Function],
                  ],
                  "transforms": Array [
                    [Function],
                    [Function],
                  ],
                  "type": "string",
                },
                "name": StringSchema {
                  "_blacklist": ReferenceSet {
                    "list": Set {},
                    "refs": Map {},
                  },
                  "_blacklistError": undefined,
                  "_typeError": [Function],
                  "_whitelist": ReferenceSet {
                    "list": Set {},
                    "refs": Map {},
                  },
                  "_whitelistError": undefined,
                  "conditions": Array [],
                  "deps": Array [],
                  "exclusiveTests": Object {
                    "matches": false,
                    "max": true,
                    "required": true,
                    "trim": false,
                  },
                  "spec": Object {
                    "abortEarly": true,
                    "nullable": false,
                    "presence": "required",
                    "recursive": true,
                    "strict": false,
                    "strip": false,
                  },
                  "tests": Array [
                    [Function],
                    [Function],
                    [Function],
                    [Function],
                  ],
                  "transforms": Array [
                    [Function],
                    [Function],
                  ],
                  "type": "string",
                },
                "pricingUrl": StringSchema {
                  "_blacklist": ReferenceSet {
                    "list": Set {},
                    "refs": Map {},
                  },
                  "_blacklistError": undefined,
                  "_typeError": [Function],
                  "_whitelist": ReferenceSet {
                    "list": Set {},
                    "refs": Map {},
                  },
                  "_whitelistError": undefined,
                  "conditions": Array [
                    Condition {
                      "fn": [Function],
                      "refs": Array [
                        Reference {
                          "getter": [Function],
                          "isContext": false,
                          "isSibling": true,
                          "isValue": false,
                          "key": "isFree",
                          "map": undefined,
                          "path": "isFree",
                        },
                        Reference {
                          "getter": [Function],
                          "isContext": false,
                          "isSibling": true,
                          "isValue": false,
                          "key": "isListed",
                          "map": undefined,
                          "path": "isListed",
                        },
                      ],
                    },
                  ],
                  "deps": Array [
                    "isFree",
                    "isListed",
                  ],
                  "exclusiveTests": Object {
                    "isValidPricingUrl": false,
                    "trim": false,
                  },
                  "spec": Object {
                    "abortEarly": true,
                    "nullable": false,
                    "presence": "optional",
                    "recursive": true,
                    "strict": false,
                    "strip": false,
                  },
                  "tests": Array [
                    [Function],
                    [Function],
                  ],
                  "transforms": Array [
                    [Function],
                    [Function],
                  ],
                  "type": "string",
                },
                "privacyPolicyUrl": StringSchema {
                  "_blacklist": ReferenceSet {
                    "list": Set {},
                    "refs": Map {},
                  },
                  "_blacklistError": undefined,
                  "_typeError": [Function],
                  "_whitelist": ReferenceSet {
                    "list": Set {},
                    "refs": Map {},
                  },
                  "_whitelistError": undefined,
                  "conditions": Array [
                    Condition {
                      "fn": [Function],
                      "refs": Array [
                        Reference {
                          "getter": [Function],
                          "isContext": false,
                          "isSibling": true,
                          "isValue": false,
                          "key": "isListed",
                          "map": undefined,
                          "path": "isListed",
                        },
                      ],
                    },
                  ],
                  "deps": Array [
                    "isListed",
                  ],
                  "exclusiveTests": Object {
                    "isValidPrivacyPolicyUrl": false,
                    "trim": false,
                  },
                  "spec": Object {
                    "abortEarly": true,
                    "nullable": false,
                    "presence": "optional",
                    "recursive": true,
                    "strict": false,
                    "strip": false,
                  },
                  "tests": Array [
                    [Function],
                    [Function],
                  ],
                  "transforms": Array [
                    [Function],
                    [Function],
                  ],
                  "type": "string",
                },
                "products": StringSchema {
                  "_blacklist": ReferenceSet {
                    "list": Set {},
                    "refs": Map {},
                  },
                  "_blacklistError": undefined,
                  "_mutate": undefined,
                  "_typeError": [Function],
                  "_whitelist": ReferenceSet {
                    "list": Set {},
                    "refs": Map {},
                  },
                  "_whitelistError": undefined,
                  "conditions": Array [],
                  "deps": Array [],
                  "exclusiveTests": Object {
                    "required": true,
                  },
                  "spec": Object {
                    "abortEarly": true,
                    "nullable": false,
                    "presence": "required",
                    "recursive": true,
                    "strict": false,
                    "strip": false,
                  },
                  "tests": Array [
                    [Function],
                  ],
                  "transforms": Array [
                    [Function],
                  ],
                  "type": "string",
                },
                "redirectUris": StringSchema {
                  "_blacklist": ReferenceSet {
                    "list": Set {},
                    "refs": Map {},
                  },
                  "_blacklistError": undefined,
                  "_typeError": [Function],
                  "_whitelist": ReferenceSet {
                    "list": Set {},
                    "refs": Map {},
                  },
                  "_whitelistError": undefined,
                  "conditions": Array [
                    Condition {
                      "fn": [Function],
                      "refs": Array [
                        Reference {
                          "getter": [Function],
                          "isContext": false,
                          "isSibling": true,
                          "isValue": false,
                          "key": "authFlow",
                          "map": undefined,
                          "path": "authFlow",
                        },
                      ],
                    },
                  ],
                  "deps": Array [
                    "authFlow",
                  ],
                  "exclusiveTests": Object {
                    "trim": false,
                  },
                  "spec": Object {
                    "abortEarly": true,
                    "nullable": false,
                    "presence": "optional",
                    "recursive": true,
                    "strict": false,
                    "strip": false,
                  },
                  "tests": Array [
                    [Function],
                  ],
                  "transforms": Array [
                    [Function],
                    [Function],
                  ],
                  "type": "string",
                },
                "scopes": ArraySchema {
                  "_blacklist": ReferenceSet {
                    "list": Set {},
                    "refs": Map {},
                  },
                  "_blacklistError": undefined,
                  "_typeError": [Function],
                  "_whitelist": ReferenceSet {
                    "list": Set {},
                    "refs": Map {},
                  },
                  "_whitelistError": undefined,
                  "conditions": Array [
                    Condition {
                      "fn": [Function],
                      "refs": Array [
                        Reference {
                          "getter": [Function],
                          "isContext": false,
                          "isSibling": true,
                          "isValue": false,
                          "key": "authFlow",
                          "map": undefined,
                          "path": "authFlow",
                        },
                      ],
                    },
                  ],
                  "deps": Array [
                    "authFlow",
                  ],
                  "exclusiveTests": Object {},
                  "innerType": undefined,
                  "spec": Object {
                    "abortEarly": true,
                    "nullable": false,
                    "presence": "optional",
                    "recursive": true,
                    "strict": false,
                    "strip": false,
                  },
                  "tests": Array [],
                  "transforms": Array [
                    [Function],
                  ],
                  "type": "array",
                },
                "screen1ImageUrl": StringSchema {
                  "_blacklist": ReferenceSet {
                    "list": Set {},
                    "refs": Map {},
                  },
                  "_blacklistError": undefined,
                  "_typeError": [Function],
                  "_whitelist": ReferenceSet {
                    "list": Set {},
                    "refs": Map {},
                  },
                  "_whitelistError": undefined,
                  "conditions": Array [
                    Condition {
                      "fn": [Function],
                      "refs": Array [
                        Reference {
                          "getter": [Function],
                          "isContext": false,
                          "isSibling": true,
                          "isValue": false,
                          "key": "isListed",
                          "map": undefined,
                          "path": "isListed",
                        },
                      ],
                    },
                  ],
                  "deps": Array [
                    "isListed",
                  ],
                  "exclusiveTests": Object {},
                  "spec": Object {
                    "abortEarly": true,
                    "nullable": false,
                    "presence": "optional",
                    "recursive": true,
                    "strict": false,
                    "strip": false,
                  },
                  "tests": Array [],
                  "transforms": Array [
                    [Function],
                  ],
                  "type": "string",
                },
                "signoutUris": StringSchema {
                  "_blacklist": ReferenceSet {
                    "list": Set {},
                    "refs": Map {},
                  },
                  "_blacklistError": undefined,
                  "_typeError": [Function],
                  "_whitelist": ReferenceSet {
                    "list": Set {},
                    "refs": Map {},
                  },
                  "_whitelistError": undefined,
                  "conditions": Array [
                    Condition {
                      "fn": [Function],
                      "refs": Array [
                        Reference {
                          "getter": [Function],
                          "isContext": false,
                          "isSibling": true,
                          "isValue": false,
                          "key": "authFlow",
                          "map": undefined,
                          "path": "authFlow",
                        },
                      ],
                    },
                  ],
                  "deps": Array [
                    "authFlow",
                  ],
                  "exclusiveTests": Object {
                    "trim": false,
                  },
                  "spec": Object {
                    "abortEarly": true,
                    "nullable": false,
                    "presence": "optional",
                    "recursive": true,
                    "strict": false,
                    "strip": false,
                  },
                  "tests": Array [
                    [Function],
                  ],
                  "transforms": Array [
                    [Function],
                    [Function],
                  ],
                  "type": "string",
                },
                "summary": StringSchema {
                  "_blacklist": ReferenceSet {
                    "list": Set {},
                    "refs": Map {},
                  },
                  "_blacklistError": undefined,
                  "_typeError": [Function],
                  "_whitelist": ReferenceSet {
                    "list": Set {},
                    "refs": Map {},
                  },
                  "_whitelistError": undefined,
                  "conditions": Array [
                    Condition {
                      "fn": [Function],
                      "refs": Array [
                        Reference {
                          "getter": [Function],
                          "isContext": false,
                          "isSibling": true,
                          "isValue": false,
                          "key": "isListed",
                          "map": undefined,
                          "path": "isListed",
                        },
                      ],
                    },
                  ],
                  "deps": Array [
                    "isListed",
                  ],
                  "exclusiveTests": Object {
                    "max": true,
                    "min": true,
                    "trim": false,
                  },
                  "spec": Object {
                    "abortEarly": true,
                    "nullable": false,
                    "presence": "optional",
                    "recursive": true,
                    "strict": false,
                    "strip": false,
                  },
                  "tests": Array [
                    [Function],
                    [Function],
                    [Function],
                  ],
                  "transforms": Array [
                    [Function],
                    [Function],
                  ],
                  "type": "string",
                },
                "supportEmail": StringSchema {
                  "_blacklist": ReferenceSet {
                    "list": Set {},
                    "refs": Map {},
                  },
                  "_blacklistError": undefined,
                  "_typeError": [Function],
                  "_whitelist": ReferenceSet {
                    "list": Set {},
                    "refs": Map {},
                  },
                  "_whitelistError": undefined,
                  "conditions": Array [
                    Condition {
                      "fn": [Function],
                      "refs": Array [
                        Reference {
                          "getter": [Function],
                          "isContext": false,
                          "isSibling": true,
                          "isValue": false,
                          "key": "isListed",
                          "map": undefined,
                          "path": "isListed",
                        },
                      ],
                    },
                  ],
                  "deps": Array [
                    "isListed",
                  ],
                  "exclusiveTests": Object {
                    "matches": false,
                    "trim": false,
                  },
                  "spec": Object {
                    "abortEarly": true,
                    "nullable": false,
                    "presence": "optional",
                    "recursive": true,
                    "strict": false,
                    "strip": false,
                  },
                  "tests": Array [
                    [Function],
                    [Function],
                  ],
                  "transforms": Array [
                    [Function],
                    [Function],
                  ],
                  "type": "string",
                },
                "telephone": StringSchema {
                  "_blacklist": ReferenceSet {
                    "list": Set {},
                    "refs": Map {},
                  },
                  "_blacklistError": undefined,
                  "_typeError": [Function],
                  "_whitelist": ReferenceSet {
                    "list": Set {},
                    "refs": Map {},
                  },
                  "_whitelistError": undefined,
                  "conditions": Array [
                    Condition {
                      "fn": [Function],
                      "refs": Array [
                        Reference {
                          "getter": [Function],
                          "isContext": false,
                          "isSibling": true,
                          "isValue": false,
                          "key": "isListed",
                          "map": undefined,
                          "path": "isListed",
                        },
                      ],
                    },
                  ],
                  "deps": Array [
                    "isListed",
                  ],
                  "exclusiveTests": Object {
                    "matches": false,
                    "max": true,
                  },
                  "spec": Object {
                    "abortEarly": true,
                    "nullable": false,
                    "presence": "optional",
                    "recursive": true,
                    "strict": false,
                    "strip": false,
                  },
                  "tests": Array [
                    [Function],
                    [Function],
                  ],
                  "transforms": Array [
                    [Function],
                  ],
                  "type": "string",
                },
                "termsAndConditionsUrl": StringSchema {
                  "_blacklist": ReferenceSet {
                    "list": Set {},
                    "refs": Map {},
                  },
                  "_blacklistError": undefined,
                  "_typeError": [Function],
                  "_whitelist": ReferenceSet {
                    "list": Set {},
                    "refs": Map {},
                  },
                  "_whitelistError": undefined,
                  "conditions": Array [
                    Condition {
                      "fn": [Function],
                      "refs": Array [
                        Reference {
                          "getter": [Function],
                          "isContext": false,
                          "isSibling": true,
                          "isValue": false,
                          "key": "isListed",
                          "map": undefined,
                          "path": "isListed",
                        },
                      ],
                    },
                  ],
                  "deps": Array [
                    "isListed",
                  ],
                  "exclusiveTests": Object {
                    "isValidTermsAndConditionsUrl": false,
                    "trim": false,
                  },
                  "spec": Object {
                    "abortEarly": true,
                    "nullable": false,
                    "presence": "optional",
                    "recursive": true,
                    "strict": false,
                    "strip": false,
                  },
                  "tests": Array [
                    [Function],
                    [Function],
                  ],
                  "transforms": Array [
                    [Function],
                    [Function],
                  ],
                  "type": "string",
                },
              },
              "spec": Object {
                "abortEarly": true,
                "nullable": false,
                "presence": "optional",
                "recursive": true,
                "strict": false,
                "strip": false,
              },
              "tests": Array [],
              "transforms": Array [
                [Function],
              ],
              "type": "object",
            }
          }
        >
          <Form
            noValidate={true}
          >
            <form
              action="#"
              noValidate={true}
              onReset={[Function]}
              onSubmit={[Function]}
            >
              <GeneralInformationSection
                isListed={false}
              >
                <FormSection
                  data-test="submit-app-form"
                >
                  <div
                    className="form-section"
                  >
                    <Helper>
                      <div
                        className="notification helper-wrap helper-info"
                      >
                        For more information on how to complete this form, please view our "Step-by-step" guide 
                        <a
                          className="l3gjl5x-link"
                          href="https://foundations-documentation.reapit.cloud/developer-portal"
                          rel="noopener noreferrer"
                          target="_blank"
                        >
                          here
                        </a>
                      </div>
                    </Helper>
                    <FormHeading>
                      <div
                        className="form-heading"
                      >
                        App Listing
                      </div>
                    </FormHeading>
                    <FormSubHeading>
                      <div
                        className="form-subheading"
                      >
                        The section below relates to the fields that comprise the listing of your application as it will appear to a user in the Marketplace. It also includes details we will use to enable us to contact you about your submitted application, how best to make your app discoverable to users and to determine where to launch it from the marketplace. When you have done your initial app setup and you are ready to list your app in the Marketplace, please return here and select “Submit for Approval”.
                      </div>
                    </FormSubHeading>
                    <Grid
                      isMultiLine={true}
                    >
                      <div
                        className="columns is-multiline"
                        data-test=""
                      >
                        <GridItem>
                          <div
                            className="column"
                            data-test=""
                          >
                            <Input
                              dataTest="submit-app-name"
                              id="name"
                              labelText="Name"
                              name="name"
                              placeholder="The name of your app as it will appear to users"
                              required={true}
                              type="text"
                            >
                              <Field
                                name="name"
                                validate={[Function]}
                              >
                                <div
                                  className="field"
                                >
                                  <div
                                    className="control "
                                  >
                                    <label
                                      className="label inline-block required-label"
                                      htmlFor="name"
                                    >
                                      Name
                                    </label>
                                    <input
                                      className="input is-primary"
                                      data-test="submit-app-name"
                                      disabled={false}
                                      id="name"
                                      name="name"
                                      onBlur={[Function]}
                                      onChange={[Function]}
                                      placeholder="The name of your app as it will appear to users"
                                      type="text"
                                      value=""
                                    />
                                  </div>
                                </div>
                              </Field>
                            </Input>
                          </div>
                        </GridItem>
                        <GridItem>
                          <div
                            className="column"
                            data-test=""
                          >
                            <div
                              className="control"
                            >
                              <div
                                className="ctlfpkh-checkbox"
                              >
                                <Checkbox
                                  id="isListed"
                                  labelText="Submit for approval"
                                  name="isListed"
                                >
                                  <div
                                    className="field "
                                  >
                                    <div
                                      className="control"
                                    >
                                      <Field
                                        name="isListed"
                                        type="checkbox"
                                      >
                                        <div
                                          className="field field-checkbox"
                                        >
                                          <input
                                            checked={false}
                                            className="checkbox"
                                            data-test=""
                                            disabled={false}
                                            id="isListed"
                                            onChange={[Function]}
                                            type="checkbox"
                                            value=""
                                          />
                                          <label
                                            className="label"
                                            htmlFor="isListed"
                                          >
                                            Submit for approval
                                          </label>
                                        </div>
                                      </Field>
                                    </div>
                                  </div>
                                </Checkbox>
                              </div>
                            </div>
                          </div>
                        </GridItem>
                      </div>
                    </Grid>
                    <Grid>
                      <div
                        className="columns"
                        data-test=""
                      >
                        <GridItem>
                          <div
                            className="column"
                            data-test=""
                          >
                            <SelectBox
                              id="categoryId"
                              labelText="Category"
                              name="categoryId"
                              options={Array []}
                            >
                              <Field
                                name="categoryId"
                                validate={null}
                              >
                                <div
                                  className="field"
                                >
                                  <div
                                    className="control"
                                  >
                                    <label
                                      className="label "
                                      htmlFor="categoryId"
                                    >
                                      Category
                                    </label>
                                    <select
                                      className="input is-primary "
                                      data-test=""
                                      name="categoryId"
                                      onBlur={[Function]}
                                      onChange={[Function]}
                                      value=""
                                    >
                                      <option
                                        disabled={true}
                                        hidden={true}
                                        value=""
                                      >
                                        Please select
                                      </option>
                                    </select>
                                  </div>
                                </div>
                              </Field>
                            </SelectBox>
                          </div>
                        </GridItem>
                        <GridItem>
                          <div
                            className="column"
                            data-test=""
                          >
                            <Input
                              dataTest="submit-app-home-page"
                              id="homePage"
                              labelText="Home page"
                              name="homePage"
                              placeholder="Your company homepage. HTTP:// or HTTPS://"
                              required={false}
                              type="text"
                            >
                              <Field
                                name="homePage"
                                validate={[Function]}
                              >
                                <div
                                  className="field"
                                >
                                  <div
                                    className="control "
                                  >
                                    <label
                                      className="label inline-block "
                                      htmlFor="homePage"
                                    >
                                      Home page
                                    </label>
                                    <input
                                      className="input is-primary"
                                      data-test="submit-app-home-page"
                                      disabled={false}
                                      id="homePage"
                                      name="homePage"
                                      onBlur={[Function]}
                                      onChange={[Function]}
                                      placeholder="Your company homepage. HTTP:// or HTTPS://"
                                      type="text"
                                      value=""
                                    />
                                  </div>
                                </div>
                              </Field>
                            </Input>
                          </div>
                        </GridItem>
                      </div>
                    </Grid>
                    <Grid>
                      <div
                        className="columns"
                        data-test=""
                      >
                        <GridItem>
                          <div
                            className="column"
                            data-test=""
                          >
                            <Input
                              dataTest="submit-app-support-email"
                              id="supportEmail"
                              labelText="Support email"
                              name="supportEmail"
                              placeholder="The contact to your support team if your users have a problem"
                              required={false}
                              type="email"
                            >
                              <Field
                                name="supportEmail"
                                validate={[Function]}
                              >
                                <div
                                  className="field"
                                >
                                  <div
                                    className="control "
                                  >
                                    <label
                                      className="label inline-block "
                                      htmlFor="supportEmail"
                                    >
                                      Support email
                                    </label>
                                    <input
                                      className="input is-primary"
                                      data-test="submit-app-support-email"
                                      disabled={false}
                                      id="supportEmail"
                                      name="supportEmail"
                                      onBlur={[Function]}
                                      onChange={[Function]}
                                      placeholder="The contact to your support team if your users have a problem"
                                      type="email"
                                      value=""
                                    />
                                  </div>
                                </div>
                              </Field>
                            </Input>
                          </div>
                        </GridItem>
                        <GridItem>
                          <div
                            className="column"
                            data-test=""
                          >
                            <Input
                              dataTest="submit-app-launch-uri"
                              id="launchUri"
                              labelText="Launch URI"
                              name="launchUri"
                              placeholder="The launch page for your app. HTTPS only other than for http://localhost"
                              required={false}
                              type="text"
                            >
                              <Field
                                name="launchUri"
                                validate={[Function]}
                              >
                                <div
                                  className="field"
                                >
                                  <div
                                    className="control "
                                  >
                                    <label
                                      className="label inline-block "
                                      htmlFor="launchUri"
                                    >
                                      Launch URI
                                    </label>
                                    <input
                                      className="input is-primary"
                                      data-test="submit-app-launch-uri"
                                      disabled={false}
                                      id="launchUri"
                                      name="launchUri"
                                      onBlur={[Function]}
                                      onChange={[Function]}
                                      placeholder="The launch page for your app. HTTPS only other than for http://localhost"
                                      type="text"
                                      value=""
                                    />
                                  </div>
                                </div>
                              </Field>
                            </Input>
                          </div>
                        </GridItem>
                      </div>
                    </Grid>
                    <Grid>
                      <div
                        className="columns"
                        data-test=""
                      >
                        <GridItem>
                          <div
                            className="column"
                            data-test=""
                          >
                            <div
                              className="pb-4"
                            >
                              <Input
                                dataTest="submit-app-phone"
                                id="telephone"
                                labelText="Telephone"
                                name="telephone"
                                placeholder="Should one of our developers need to contact you about your app"
                                required={false}
                                type="tel"
                              >
                                <Field
                                  name="telephone"
                                  validate={[Function]}
                                >
                                  <div
                                    className="field"
                                  >
                                    <div
                                      className="control "
                                    >
                                      <label
                                        className="label inline-block "
                                        htmlFor="telephone"
                                      >
                                        Telephone
                                      </label>
                                      <input
                                        className="input is-primary"
                                        data-test="submit-app-phone"
                                        disabled={false}
                                        id="telephone"
                                        name="telephone"
                                        onBlur={[Function]}
                                        onChange={[Function]}
                                        placeholder="Should one of our developers need to contact you about your app"
                                        type="tel"
                                        value=""
                                      />
                                    </div>
                                  </div>
                                </Field>
                              </Input>
                            </div>
                            <TextArea
                              dataTest="submit-app-summary"
                              id="summary"
                              labelText="Summary"
                              name="summary"
                              placeholder="A short strapline summary for your app listing. Must be between 50 and 150 characters"
                              required={false}
                            >
                              <Field
                                name="summary"
                                validate={[Function]}
                              >
                                <div
                                  className="field"
                                >
                                  <div
                                    className="control"
                                  >
                                    <label
                                      className="label mb-2"
                                      htmlFor="summary"
                                    >
                                      Summary
                                    </label>
                                    <textarea
                                      className="textarea is-primary"
                                      data-test="submit-app-summary"
                                      id="summary"
                                      name="summary"
                                      onBlur={[Function]}
                                      onChange={[Function]}
                                      placeholder="A short strapline summary for your app listing. Must be between 50 and 150 characters"
                                    />
                                  </div>
                                </div>
                              </Field>
                            </TextArea>
                          </div>
                        </GridItem>
                        <GridItem
                          className="is-half-desktop"
                        >
                          <div
                            className="column is-half-desktop"
                            data-test=""
                          >
                            <TextAreaEditor
                              actions={
                                Array [
                                  "bold",
                                  "italic",
                                  "paragraph",
                                  "olist",
                                  "ulist",
                                  "link",
                                  Object {
                                    "icon": "<b>H<sub>5</sub></b>",
                                    "name": "test",
                                    "result": [Function],
                                    "title": "Add heading 5",
                                  },
                                ]
                              }
                              containerClass="e1pmlq1f-editor"
                              dataTest="submit-app-description"
                              id="description"
                              labelText="Description"
                              name="description"
                              placeholder="A detailed description for your app listing. Must be between 150 and 1500 characters. Please note: As this field supports HTML, special characters will be included in the character count"
                              required={false}
                            >
                              <div
                                className="field"
                              >
                                <div
                                  className="control"
                                >
                                  <label
                                    className="label mb-2 "
                                    htmlFor="description"
                                  >
                                    Description
                                  </label>
                                  <Editor
                                    actions={
                                      Array [
                                        "bold",
                                        "italic",
                                        "paragraph",
                                        "olist",
                                        "ulist",
                                        "link",
                                        Object {
                                          "icon": "<b>H<sub>5</sub></b>",
                                          "name": "test",
                                          "result": [Function],
                                          "title": "Add heading 5",
                                        },
                                      ]
                                    }
                                    containerClass="e1pmlq1f-editor"
                                    dataTest="submit-app-description"
                                    hasError={false}
                                    onBlur={[Function]}
                                    onChange={[Function]}
                                    onPaste={[Function]}
                                    placeholder="A detailed description for your app listing. Must be between 150 and 1500 characters. Please note: As this field supports HTML, special characters will be included in the character count"
                                  >
                                    <div
                                      className="pell false e1pmlq1f-editor"
                                      data-test="submit-app-description"
                                      onBlur={[Function]}
                                      onPaste={[Function]}
                                    />
                                  </Editor>
                                </div>
                              </div>
                            </TextAreaEditor>
                          </div>
                        </GridItem>
                      </div>
                    </Grid>
                    <Grid>
                      <div
                        className="columns"
                        data-test=""
                      >
                        <GridItem>
                          <div
                            className="column"
                            data-test=""
                          >
                            <Input
                              dataTest="submit-app-terms-conditions"
                              id="termsAndConditionsUrl"
                              labelText="Terms and Conditions"
                              name="termsAndConditionsUrl"
                              placeholder="URL to link to your Terms and Conditions"
                              required={false}
                              type="text"
                            >
                              <Field
                                name="termsAndConditionsUrl"
                                validate={[Function]}
                              >
                                <div
                                  className="field"
                                >
                                  <div
                                    className="control "
                                  >
                                    <label
                                      className="label inline-block "
                                      htmlFor="termsAndConditionsUrl"
                                    >
                                      Terms and Conditions
                                    </label>
                                    <input
                                      className="input is-primary"
                                      data-test="submit-app-terms-conditions"
                                      disabled={false}
                                      id="termsAndConditionsUrl"
                                      name="termsAndConditionsUrl"
                                      onBlur={[Function]}
                                      onChange={[Function]}
                                      placeholder="URL to link to your Terms and Conditions"
                                      type="text"
                                      value=""
                                    />
                                  </div>
                                </div>
                              </Field>
                            </Input>
                          </div>
                        </GridItem>
                        <GridItem>
                          <div
                            className="column"
                            data-test=""
                          >
                            <Input
                              dataTest="submit-app-privacy-policy"
                              id="privacyPolicyUrl"
                              labelText="Privacy Policy"
                              name="privacyPolicyUrl"
                              placeholder="URL to link to your Privacy Policy"
                              required={false}
                              type="text"
                            >
                              <Field
                                name="privacyPolicyUrl"
                                validate={[Function]}
                              >
                                <div
                                  className="field"
                                >
                                  <div
                                    className="control "
                                  >
                                    <label
                                      className="label inline-block "
                                      htmlFor="privacyPolicyUrl"
                                    >
                                      Privacy Policy
                                    </label>
                                    <input
                                      className="input is-primary"
                                      data-test="submit-app-privacy-policy"
                                      disabled={false}
                                      id="privacyPolicyUrl"
                                      name="privacyPolicyUrl"
                                      onBlur={[Function]}
                                      onChange={[Function]}
                                      placeholder="URL to link to your Privacy Policy"
                                      type="text"
                                      value=""
                                    />
                                  </div>
                                </div>
                              </Field>
                            </Input>
                          </div>
                        </GridItem>
                      </div>
                    </Grid>
                    <Grid>
                      <div
                        className="columns"
                        data-test=""
                      >
                        <GridItem>
                          <div
                            className="column"
                            data-test=""
                          >
                            <Input
                              dataTest="submit-app-terms-conditions"
                              id="pricingUrl"
                              labelText="Pricing Info"
                              name="pricingUrl"
                              placeholder="URL to link to your Pricing Info"
                              type="text"
                            >
                              <Field
                                name="pricingUrl"
                                validate={[Function]}
                              >
                                <div
                                  className="field"
                                >
                                  <div
                                    className="control "
                                  >
                                    <label
                                      className="label inline-block "
                                      htmlFor="pricingUrl"
                                    >
                                      Pricing Info
                                    </label>
                                    <input
                                      className="input is-primary"
                                      data-test="submit-app-terms-conditions"
                                      disabled={false}
                                      id="pricingUrl"
                                      name="pricingUrl"
                                      onBlur={[Function]}
                                      onChange={[Function]}
                                      placeholder="URL to link to your Pricing Info"
                                      type="text"
                                      value=""
                                    />
                                  </div>
                                </div>
                              </Field>
                            </Input>
                          </div>
                        </GridItem>
                        <GridItem>
                          <div
                            className="column"
                            data-test=""
                          >
                            <label
                              className="label inline-block"
                            >
                               
                            </label>
                            <Checkbox
                              id="isFree"
                              labelText="This application is free"
                              name="isFree"
                            >
                              <div
                                className="field "
                              >
                                <div
                                  className="control"
                                >
                                  <Field
                                    name="isFree"
                                    type="checkbox"
                                  >
                                    <div
                                      className="field field-checkbox"
                                    >
                                      <input
                                        checked={false}
                                        className="checkbox"
                                        data-test=""
                                        disabled={false}
                                        id="isFree"
                                        onChange={[Function]}
                                        type="checkbox"
                                        value=""
                                      />
                                      <label
                                        className="label"
                                        htmlFor="isFree"
                                      >
                                        This application is free
                                      </label>
                                    </div>
                                  </Field>
                                </div>
                              </div>
                            </Checkbox>
                          </div>
                        </GridItem>
                      </div>
                    </Grid>
                  </div>
                </FormSection>
              </GeneralInformationSection>
              <AgencyCloudIntegrationSection>
                <FormSection>
                  <div
                    className="form-section"
                  >
                    <FormHeading>
                      <div
                        className="form-heading"
                      >
                        Agency Cloud Integration
                      </div>
                    </FormHeading>
                    <FormSubHeading>
                      <div
                        className="form-subheading"
                      >
                        To be able to associate your application with an action in Agency Cloud the application will need to be given a desktop type. Please select the type of integration your app requires from the list below. For more information on Desktop Types, please
                         
                        <a
                          className="l3gjl5x-link"
                          href="https://foundations-documentation.reapit.cloud/api/desktop-api#desktop-types"
                          rel="noopener noreferrer"
                          target="_blank"
                        >
                          click here
                        </a>
                      </div>
                    </FormSubHeading>
                    <Grid>
                      <div
                        className="columns"
                        data-test=""
                      >
                        <GridItem>
                          <div
                            className="column"
                            data-test=""
                          >
                            <DropdownSelect
                              fixedPosition={true}
                              id="desktopIntegrationTypeIds"
                              labelText="Integration Type"
                              mode="multiple"
                              name="desktopIntegrationTypeIds"
                              options={Array []}
                              placeholder="Please select"
                            >
                              <div
                                className="field"
                              >
                                <div
                                  className="control"
                                >
                                  <Field
                                    name="desktopIntegrationTypeIds"
                                    validate={null}
                                  >
                                    <div
                                      className="field field-dropdown-select"
                                    >
                                      <label
                                        className="label "
                                      >
                                        Integration Type
                                      </label>
                                      <Select
                                        className="is-primary input"
                                        dropdownStyle={
                                          Object {
                                            "zIndex": 999,
                                          }
                                        }
                                        id="desktopIntegrationTypeIds"
                                        mode="multiple"
                                        onBlur={[Function]}
                                        onChange={[Function]}
                                        placeholder="Please select"
                                        tagRender={[Function]}
                                        value={Array []}
                                      >
                                        <ForwardRef(Select)
                                          className="is-primary input"
                                          dropdownStyle={
                                            Object {
                                              "zIndex": 999,
                                            }
                                          }
                                          id="desktopIntegrationTypeIds"
                                          mode="multiple"
                                          onBlur={[Function]}
                                          onChange={[Function]}
                                          placeholder="Please select"
                                          tagRender={[Function]}
                                          value={Array []}
                                        >
                                          <div
                                            className="rc-select is-primary input rc-select-multiple rc-select-show-search"
                                            onBlur={[Function]}
                                            onFocus={[Function]}
                                            onKeyDown={[Function]}
                                            onKeyUp={[Function]}
                                            onMouseDown={[Function]}
                                          >
                                            <SelectTrigger
                                              containerWidth={null}
                                              dropdownStyle={
                                                Object {
                                                  "zIndex": 999,
                                                }
                                              }
                                              empty={true}
                                              getTriggerDOMNode={[Function]}
                                              popupElement={
                                                <OptionList
                                                  childrenAsData={true}
                                                  defaultActiveFirstOption={true}
                                                  flattenOptions={Array []}
                                                  height={200}
                                                  id="desktopIntegrationTypeIds"
                                                  itemHeight={20}
                                                  multiple={true}
                                                  notFoundContent="Not Found"
                                                  onActiveValue={[Function]}
                                                  onSelect={[Function]}
                                                  onToggleOpen={[Function]}
                                                  options={Array []}
                                                  prefixCls="rc-select"
                                                  searchValue=""
                                                  values={Set {}}
                                                  virtual={true}
                                                />
                                              }
                                              prefixCls="rc-select"
                                            >
                                              <Trigger
                                                action={Array []}
                                                afterPopupVisibleChange={[Function]}
                                                autoDestroy={false}
                                                blurDelay={0.15}
                                                builtinPlacements={
                                                  Object {
                                                    "bottomLeft": Object {
                                                      "offset": Array [
                                                        0,
                                                        4,
                                                      ],
                                                      "overflow": Object {
                                                        "adjustX": 0,
                                                        "adjustY": 1,
                                                      },
                                                      "points": Array [
                                                        "tl",
                                                        "bl",
                                                      ],
                                                    },
                                                    "bottomRight": Object {
                                                      "offset": Array [
                                                        0,
                                                        4,
                                                      ],
                                                      "overflow": Object {
                                                        "adjustX": 0,
                                                        "adjustY": 1,
                                                      },
                                                      "points": Array [
                                                        "tr",
                                                        "br",
                                                      ],
                                                    },
                                                    "topLeft": Object {
                                                      "offset": Array [
                                                        0,
                                                        -4,
                                                      ],
                                                      "overflow": Object {
                                                        "adjustX": 0,
                                                        "adjustY": 1,
                                                      },
                                                      "points": Array [
                                                        "bl",
                                                        "tl",
                                                      ],
                                                    },
                                                    "topRight": Object {
                                                      "offset": Array [
                                                        0,
                                                        -4,
                                                      ],
                                                      "overflow": Object {
                                                        "adjustX": 0,
                                                        "adjustY": 1,
                                                      },
                                                      "points": Array [
                                                        "br",
                                                        "tr",
                                                      ],
                                                    },
                                                  }
                                                }
                                                defaultPopupVisible={false}
                                                destroyPopupOnHide={false}
                                                focusDelay={0}
                                                getDocument={[Function]}
                                                getPopupClassNameFromAlign={[Function]}
                                                getTriggerDOMNode={[Function]}
                                                hideAction={Array []}
                                                mask={false}
                                                maskClosable={true}
                                                mouseEnterDelay={0}
                                                mouseLeaveDelay={0.1}
                                                onPopupAlign={[Function]}
                                                onPopupVisibleChange={[Function]}
                                                popup={
                                                  <div>
                                                    <OptionList
                                                      childrenAsData={true}
                                                      defaultActiveFirstOption={true}
                                                      flattenOptions={Array []}
                                                      height={200}
                                                      id="desktopIntegrationTypeIds"
                                                      itemHeight={20}
                                                      multiple={true}
                                                      notFoundContent="Not Found"
                                                      onActiveValue={[Function]}
                                                      onSelect={[Function]}
                                                      onToggleOpen={[Function]}
                                                      options={Array []}
                                                      prefixCls="rc-select"
                                                      searchValue=""
                                                      values={Set {}}
                                                      virtual={true}
                                                    />
                                                  </div>
                                                }
                                                popupAlign={Object {}}
                                                popupClassName="rc-select-dropdown-empty"
                                                popupPlacement="bottomLeft"
                                                popupStyle={
                                                  Object {
                                                    "minWidth": null,
                                                    "width": null,
                                                    "zIndex": 999,
                                                  }
                                                }
                                                prefixCls="rc-select-dropdown"
                                                showAction={Array []}
                                              >
                                                <Selector
                                                  accessibilityIndex={0}
                                                  activeValue={null}
                                                  className="is-primary input"
                                                  domRef={
                                                    Object {
                                                      "current": <div
                                                        class="rc-select-selector"
                                                      >
                                                        <span
                                                          class="rc-select-selection-search"
                                                          style="width: 0px;"
                                                        >
                                                          <input
                                                            aria-activedescendant="desktopIntegrationTypeIds_list_0"
                                                            aria-autocomplete="list"
                                                            aria-controls="desktopIntegrationTypeIds_list"
                                                            aria-haspopup="listbox"
                                                            aria-owns="desktopIntegrationTypeIds_list"
                                                            autocomplete="off"
                                                            class="rc-select-selection-search-input"
                                                            id="desktopIntegrationTypeIds"
                                                            readonly=""
                                                            role="combobox"
                                                            style="opacity: 0;"
                                                            unselectable="on"
                                                            value=""
                                                          />
                                                          <span
                                                            aria-hidden="true"
                                                            class="rc-select-selection-search-mirror"
                                                          >
                                                            
                                                             
                                                          </span>
                                                        </span>
                                                        <span
                                                          class="rc-select-selection-placeholder"
                                                        >
                                                          Please select
                                                        </span>
                                                      </div>,
                                                    }
                                                  }
                                                  dropdownStyle={
                                                    Object {
                                                      "zIndex": 999,
                                                    }
                                                  }
                                                  id="desktopIntegrationTypeIds"
                                                  inputElement={null}
                                                  key="trigger"
                                                  mode="multiple"
                                                  multiple={true}
                                                  onBlur={[Function]}
                                                  onChange={[Function]}
                                                  onSearch={[Function]}
                                                  onSelect={[Function]}
                                                  onToggleOpen={[Function]}
                                                  placeholder="Please select"
                                                  prefixCls="rc-select"
                                                  searchValue=""
                                                  showSearch={true}
                                                  tagRender={[Function]}
                                                  value={Array []}
                                                  values={Array []}
                                                >
                                                  <div
                                                    className="rc-select-selector"
                                                    onClick={[Function]}
                                                    onMouseDown={[Function]}
                                                  >
                                                    <SelectSelector
                                                      accessibilityIndex={0}
                                                      activeValue={null}
                                                      className="is-primary input"
                                                      domRef={
                                                        Object {
                                                          "current": <div
                                                            class="rc-select-selector"
                                                          >
                                                            <span
                                                              class="rc-select-selection-search"
                                                              style="width: 0px;"
                                                            >
                                                              <input
                                                                aria-activedescendant="desktopIntegrationTypeIds_list_0"
                                                                aria-autocomplete="list"
                                                                aria-controls="desktopIntegrationTypeIds_list"
                                                                aria-haspopup="listbox"
                                                                aria-owns="desktopIntegrationTypeIds_list"
                                                                autocomplete="off"
                                                                class="rc-select-selection-search-input"
                                                                id="desktopIntegrationTypeIds"
                                                                readonly=""
                                                                role="combobox"
                                                                style="opacity: 0;"
                                                                unselectable="on"
                                                                value=""
                                                              />
                                                              <span
                                                                aria-hidden="true"
                                                                class="rc-select-selection-search-mirror"
                                                              >
                                                                
                                                                 
                                                              </span>
                                                            </span>
                                                            <span
                                                              class="rc-select-selection-placeholder"
                                                            >
                                                              Please select
                                                            </span>
                                                          </div>,
                                                        }
                                                      }
                                                      dropdownStyle={
                                                        Object {
                                                          "zIndex": 999,
                                                        }
                                                      }
                                                      id="desktopIntegrationTypeIds"
                                                      inputElement={null}
                                                      inputRef={
                                                        Object {
                                                          "current": <input
                                                            aria-activedescendant="desktopIntegrationTypeIds_list_0"
                                                            aria-autocomplete="list"
                                                            aria-controls="desktopIntegrationTypeIds_list"
                                                            aria-haspopup="listbox"
                                                            aria-owns="desktopIntegrationTypeIds_list"
                                                            autocomplete="off"
                                                            class="rc-select-selection-search-input"
                                                            id="desktopIntegrationTypeIds"
                                                            readonly=""
                                                            role="combobox"
                                                            style="opacity: 0;"
                                                            unselectable="on"
                                                            value=""
                                                          />,
                                                        }
                                                      }
                                                      mode="multiple"
                                                      multiple={true}
                                                      onBlur={[Function]}
                                                      onChange={[Function]}
                                                      onInputChange={[Function]}
                                                      onInputKeyDown={[Function]}
                                                      onInputMouseDown={[Function]}
                                                      onInputPaste={[Function]}
                                                      onSearch={[Function]}
                                                      onSelect={[Function]}
                                                      onToggleOpen={[Function]}
                                                      placeholder="Please select"
                                                      prefixCls="rc-select"
                                                      searchValue=""
                                                      showSearch={true}
                                                      tagRender={[Function]}
                                                      value={Array []}
                                                      values={Array []}
                                                    >
                                                      <CSSMotionList
                                                        component={false}
                                                        keys={Array []}
                                                        motionAppear={true}
                                                      />
                                                      <span
                                                        className="rc-select-selection-search"
                                                        style={
                                                          Object {
                                                            "width": 0,
                                                          }
                                                        }
                                                      >
                                                        <Input
                                                          accessibilityIndex={0}
                                                          attrs={Object {}}
                                                          id="desktopIntegrationTypeIds"
                                                          inputElement={null}
                                                          onChange={[Function]}
                                                          onKeyDown={[Function]}
                                                          onMouseDown={[Function]}
                                                          onPaste={[Function]}
                                                          prefixCls="rc-select"
                                                          value=""
                                                        >
                                                          <input
                                                            aria-activedescendant="desktopIntegrationTypeIds_list_0"
                                                            aria-autocomplete="list"
                                                            aria-controls="desktopIntegrationTypeIds_list"
                                                            aria-haspopup="listbox"
                                                            aria-owns="desktopIntegrationTypeIds_list"
                                                            autoComplete="off"
                                                            className="rc-select-selection-search-input"
                                                            id="desktopIntegrationTypeIds"
                                                            onChange={[Function]}
                                                            onKeyDown={[Function]}
                                                            onMouseDown={[Function]}
                                                            onPaste={[Function]}
                                                            readOnly={true}
                                                            role="combobox"
                                                            style={
                                                              Object {
                                                                "opacity": 0,
                                                              }
                                                            }
                                                            unselectable="on"
                                                            value=""
                                                          />
                                                        </Input>
                                                        <span
                                                          aria-hidden={true}
                                                          className="rc-select-selection-search-mirror"
                                                        >
                                                           
                                                        </span>
                                                      </span>
                                                      <span
                                                        className="rc-select-selection-placeholder"
                                                      >
                                                        Please select
                                                      </span>
                                                    </SelectSelector>
                                                  </div>
                                                </Selector>
                                              </Trigger>
                                            </SelectTrigger>
                                          </div>
                                        </ForwardRef(Select)>
                                      </Select>
                                    </div>
                                  </Field>
                                </div>
                              </div>
                              <div />
                            </DropdownSelect>
                          </div>
                        </GridItem>
                      </div>
                    </Grid>
                  </div>
                </FormSection>
              </AgencyCloudIntegrationSection>
              <RedirectUriSection
                isPrivateApp="no"
                setFieldValue={[Function]}
              >
                <FormSection>
                  <div
                    className="form-section"
                  >
                    <Grid>
                      <div
                        className="columns"
                        data-test=""
                      >
                        <GridItem>
                          <div
                            className="column"
                            data-test=""
                          >
                            <FormHeading>
                              <div
                                className="form-heading"
                              >
                                Redirect URI(s)
                                 
                                *
                              </div>
                            </FormHeading>
                            <FormSubHeading>
                              <div
                                className="form-subheading"
                              >
                                Please enter a Redirect URI(s) to define the route Reapit Connect is permitted to redirect to after a successful authentication. The following formats are supported: https://, http:// (for localhost only) or your own custom URI schemes such as myapp://login. For multiple URI’s, separate using a comma.
                              </div>
                            </FormSubHeading>
                            <Input
                              dataTest="submit-app-redirect-uri"
                              disabled={false}
                              id="redirectUris"
                              name="redirectUris"
                              placeholder="Enter your Redirect URI(s)"
                              required={true}
                              type="text"
                            >
                              <Field
                                name="redirectUris"
                                validate={[Function]}
                              >
                                <div
                                  className="field"
                                >
                                  <div
                                    className="control "
                                  >
                                    <input
                                      className="input is-primary"
                                      data-test="submit-app-redirect-uri"
                                      disabled={false}
                                      id="redirectUris"
                                      name="redirectUris"
                                      onBlur={[Function]}
                                      onChange={[Function]}
                                      placeholder="Enter your Redirect URI(s)"
                                      type="text"
                                      value=""
                                    />
                                  </div>
                                </div>
                              </Field>
                            </Input>
                          </div>
                        </GridItem>
                      </div>
                    </Grid>
                    <Grid>
                      <div
                        className="columns"
                        data-test=""
                      >
                        <GridItem>
                          <div
                            className="column"
                            data-test=""
                          >
                            <FormHeading>
                              <div
                                className="form-heading"
                              >
                                Sign Out URI(s)
                                 
                                *
                              </div>
                            </FormHeading>
                            <FormSubHeading>
                              <div
                                className="form-subheading"
                              >
                                Please enter a Sign Out URI(s) to define the route Reapit Connect is permitted to redirect to after successfully logging out. The following formats are supported: https://, http:// (for localhost only) or your own custom URI schemes such as myapp://login. For multiple URI’s, separate using a comma.
                              </div>
                            </FormSubHeading>
                            <Input
                              dataTest="submit-app-signout-uris"
                              disabled={false}
                              id="signoutUris"
                              name="signoutUris"
                              placeholder="Enter your Sign Out URI(s)"
                              required={true}
                              type="text"
                            >
                              <Field
                                name="signoutUris"
                                validate={[Function]}
                              >
                                <div
                                  className="field"
                                >
                                  <div
                                    className="control "
                                  >
                                    <input
                                      className="input is-primary"
                                      data-test="submit-app-signout-uris"
                                      disabled={false}
                                      id="signoutUris"
                                      name="signoutUris"
                                      onBlur={[Function]}
                                      onChange={[Function]}
                                      placeholder="Enter your Sign Out URI(s)"
                                      type="text"
                                      value=""
                                    />
                                  </div>
                                </div>
                              </Field>
                            </Input>
                          </div>
                        </GridItem>
                      </div>
                    </Grid>
                    <Grid>
                      <div
                        className="columns"
                        data-test=""
                      >
                        <GridItem>
                          <div
                            className="column"
                            data-test=""
                          >
                            <FormHeading>
                              <div
                                className="form-heading"
                              >
                                Private Apps
                              </div>
                            </FormHeading>
                            <FormSubHeading>
                              <div
                                className="form-subheading"
                              >
                                If your App is a Private App and you would like it to only be visible to certain customers, please select ‘Yes’ below. You should then enter the ‘Customer ID’ of the customer(s) you wish to share your app with. If you select ‘No’, your App will be visible to all on the Marketplace. For multiple customers, please separate the Customer IDs using a comma, e.g. ABC, DEF.
                              </div>
                            </FormSubHeading>
                            <RadioSelect
                              id="isPrivateApp"
                              name="isPrivateApp"
                              options={
                                Array [
                                  Object {
                                    "label": "YES",
                                    "value": "yes",
                                  },
                                  Object {
                                    "label": "NO",
                                    "value": "no",
                                  },
                                ]
                              }
                              setFieldValue={[Function]}
                              state="no"
                            >
                              <Field
                                name="isPrivateApp"
                                type="radio"
                              >
                                <div
                                  className="field pb-2 "
                                >
                                  <div
                                    className="control"
                                  >
                                    <label
                                      className="label"
                                      htmlFor="isPrivateApp"
                                    />
                                    <Grid
                                      className="is-gapless"
                                      isMultiLine={true}
                                    >
                                      <div
                                        className="columns is-multiline is-gapless"
                                        data-test=""
                                      >
                                        <GridItem
                                          className="is-full"
                                          key="0"
                                        >
                                          <div
                                            className="column is-full"
                                            data-test=""
                                          >
                                            <div
                                              className="radio-wrap"
                                            >
                                              <input
                                                checked={false}
                                                className="checkbox "
                                                disabled={false}
                                                id="isPrivateAppYES"
                                                key="yes"
                                                name="isPrivateApp"
                                                onChange={[Function]}
                                                type="radio"
                                                value="yes"
                                              />
                                              <label
                                                className="label"
                                                htmlFor="isPrivateAppYES"
                                              >
                                                YES
                                              </label>
                                            </div>
                                          </div>
                                        </GridItem>
                                        <GridItem
                                          className="is-full"
                                          key="1"
                                        >
                                          <div
                                            className="column is-full"
                                            data-test=""
                                          >
                                            <div
                                              className="radio-wrap"
                                            >
                                              <input
                                                checked={true}
                                                className="checkbox "
                                                disabled={false}
                                                id="isPrivateAppNO"
                                                key="no"
                                                name="isPrivateApp"
                                                onChange={[Function]}
                                                type="radio"
                                                value="no"
                                              />
                                              <label
                                                className="label"
                                                htmlFor="isPrivateAppNO"
                                              >
                                                NO
                                              </label>
                                            </div>
                                          </div>
                                        </GridItem>
                                      </div>
                                    </Grid>
                                  </div>
                                </div>
                              </Field>
                            </RadioSelect>
                            <Input
                              dataTest="submit-app-limited-to-client-ids"
                              disabled={true}
                              id="limitToClientIds"
                              name="limitToClientIds"
                              placeholder="Please enter the Customer ID. For multiple Customer ID’s, please separate using a comma"
                              type="text"
                            >
                              <Field
                                name="limitToClientIds"
                                validate={[Function]}
                              >
                                <div
                                  className="field"
                                >
                                  <div
                                    className="control "
                                  >
                                    <input
                                      className="input is-primary"
                                      data-test="submit-app-limited-to-client-ids"
                                      disabled={true}
                                      id="limitToClientIds"
                                      name="limitToClientIds"
                                      onBlur={[Function]}
                                      onChange={[Function]}
                                      placeholder="Please enter the Customer ID. For multiple Customer ID’s, please separate using a comma"
                                      type="text"
                                      value=""
                                    />
                                  </div>
                                </div>
                              </Field>
                            </Input>
                          </div>
                        </GridItem>
                      </div>
                    </Grid>
                  </div>
                </FormSection>
              </RedirectUriSection>
              <UploadImageSection
                isListed={false}
              >
                <FormSection>
                  <div
                    className="form-section"
                  >
                    <FormHeading>
                      <div
                        className="form-heading"
                      >
                        Images
                      </div>
                    </FormHeading>
                    <FormSubHeading>
                      <div
                        className="form-subheading"
                      >
                        The icon field will appear as the main brand representation of your app in marketplace listings and installed apps pages. You can also select a minimum of one and up to five screenshots of your application, that will appear in a carousel in the details view of your app listing.
                      </div>
                    </FormSubHeading>
                    <GridFourCol>
                      <div
                        className="columns is-multiline"
                        data-test=""
                      >
                        <GridFourColItem>
                          <div
                            className="column is-multiline is-full-mobile is-half-tablet is-one-third-widescreen is-one-quarter-fullhd"
                            data-test=""
                          >
                            <div
                              className="control"
                            >
                              <label
                                className="label"
                              >
                                Icon 
                              </label>
                              <ImageCropperWithInput
                                allowClear={true}
                                aspect={1}
                                dataTest="submit-app-icon"
                                id="iconImageUrl"
                                labelText="Upload Image"
                                name="iconImageUrl"
                                required={false}
                                resizeDimensions={
                                  Object {
                                    "height": 96,
                                    "width": 96,
                                  }
                                }
                              >
                                <ImageCropper
                                  aspect={1}
                                  croppedImage={null}
                                  onClose={[Function]}
                                  onCropClick={[Function]}
                                  resizeDimensions={
                                    Object {
                                      "height": 96,
                                      "width": 96,
                                    }
                                  }
                                  setCroppedImage={[Function]}
                                  setUpImg={[Function]}
                                  setVisible={[Function]}
                                  upImg=""
                                  visible={false}
                                >
                                  <div>
                                    <ImageInput
                                      afterLoadedImage={[Function]}
                                      allowClear={true}
                                      croppedImage={null}
                                      dataTest="submit-app-icon"
                                      id="iconImageUrl"
                                      key=".0"
                                      labelText="Upload Image"
                                      name="iconImageUrl"
                                      required={false}
                                    >
                                      <FileInput
                                        accept="image/*"
                                        afterLoadedFile={[Function]}
                                        allowClear={true}
                                        croppedImage={null}
                                        dataTest="submit-app-icon"
                                        id="iconImageUrl"
                                        labelText="Upload Image"
                                        name="iconImageUrl"
                                        required={false}
                                      >
                                        <Field
                                          name="iconImageUrl"
                                        >
                                          <div
                                            className="file is-primary  field pb-2"
                                          >
                                            <div
                                              className="control file-input-container is-full-width"
                                            >
                                              <label
                                                className="file-label"
                                                data-test="file-input-label"
                                                htmlFor="iconImageUrl"
                                              >
                                                <input
                                                  accept="image/*"
                                                  className="file-input"
                                                  data-test="submit-app-icon"
                                                  id="iconImageUrl"
                                                  onChange={[Function]}
                                                  type="file"
                                                />
                                                <span
                                                  className="file-cta "
                                                >
                                                  Upload Image
                                                </span>
                                              </label>
                                            </div>
                                          </div>
                                        </Field>
                                      </FileInput>
                                    </ImageInput>
                                  </div>
                                </ImageCropper>
                              </ImageCropperWithInput>
                            </div>
                          </div>
                        </GridFourColItem>
                        <GridFourColItem>
                          <div
                            className="column is-multiline is-full-mobile is-half-tablet is-one-third-widescreen is-one-quarter-fullhd"
                            data-test=""
                          >
                            <div
                              className="control mb-4"
                            >
                              <label
                                className="label"
                              >
                                Feature Image 
                              </label>
                              <ImageCropperWithInput
                                allowClear={true}
                                aspect={2.22972972972973}
                                dataTest="submit-app-screenshot1"
                                id="screen1ImageUrl"
                                labelText="Upload Image"
                                name="screen1ImageUrl"
                                required={false}
                                resizeDimensions={
                                  Object {
                                    "height": 222,
                                    "width": 495,
                                  }
                                }
                              >
                                <ImageCropper
                                  aspect={2.22972972972973}
                                  croppedImage={null}
                                  onClose={[Function]}
                                  onCropClick={[Function]}
                                  resizeDimensions={
                                    Object {
                                      "height": 222,
                                      "width": 495,
                                    }
                                  }
                                  setCroppedImage={[Function]}
                                  setUpImg={[Function]}
                                  setVisible={[Function]}
                                  upImg=""
                                  visible={false}
                                >
                                  <div>
                                    <ImageInput
                                      afterLoadedImage={[Function]}
                                      allowClear={true}
                                      croppedImage={null}
                                      dataTest="submit-app-screenshot1"
                                      id="screen1ImageUrl"
                                      key=".0"
                                      labelText="Upload Image"
                                      name="screen1ImageUrl"
                                      required={false}
                                    >
                                      <FileInput
                                        accept="image/*"
                                        afterLoadedFile={[Function]}
                                        allowClear={true}
                                        croppedImage={null}
                                        dataTest="submit-app-screenshot1"
                                        id="screen1ImageUrl"
                                        labelText="Upload Image"
                                        name="screen1ImageUrl"
                                        required={false}
                                      >
                                        <Field
                                          name="screen1ImageUrl"
                                        >
                                          <div
                                            className="file is-primary  field pb-2"
                                          >
                                            <div
                                              className="control file-input-container is-full-width"
                                            >
                                              <label
                                                className="file-label"
                                                data-test="file-input-label"
                                                htmlFor="screen1ImageUrl"
                                              >
                                                <input
                                                  accept="image/*"
                                                  className="file-input"
                                                  data-test="submit-app-screenshot1"
                                                  id="screen1ImageUrl"
                                                  onChange={[Function]}
                                                  type="file"
                                                />
                                                <span
                                                  className="file-cta "
                                                >
                                                  Upload Image
                                                </span>
                                              </label>
                                            </div>
                                          </div>
                                        </Field>
                                      </FileInput>
                                    </ImageInput>
                                  </div>
                                </ImageCropper>
                              </ImageCropperWithInput>
                            </div>
                          </div>
                        </GridFourColItem>
                        <GridFourColItem>
                          <div
                            className="column is-multiline is-full-mobile is-half-tablet is-one-third-widescreen is-one-quarter-fullhd"
                            data-test=""
                          >
                            <div
                              className="control mb-4"
                            >
                              <label
                                className="label"
                              >
                                Screenshot 1
                              </label>
                              <ImageCropperWithInput
                                allowClear={true}
                                aspect={1.3085339168490153}
                                dataTest="submit-app-screenshot2"
                                id="screen2ImageUrl"
                                labelText="Upload Image"
                                name="screen2ImageUrl"
                                resizeDimensions={
                                  Object {
                                    "height": 457,
                                    "width": 598,
                                  }
                                }
                              >
                                <ImageCropper
                                  aspect={1.3085339168490153}
                                  croppedImage={null}
                                  onClose={[Function]}
                                  onCropClick={[Function]}
                                  resizeDimensions={
                                    Object {
                                      "height": 457,
                                      "width": 598,
                                    }
                                  }
                                  setCroppedImage={[Function]}
                                  setUpImg={[Function]}
                                  setVisible={[Function]}
                                  upImg=""
                                  visible={false}
                                >
                                  <div>
                                    <ImageInput
                                      afterLoadedImage={[Function]}
                                      allowClear={true}
                                      croppedImage={null}
                                      dataTest="submit-app-screenshot2"
                                      id="screen2ImageUrl"
                                      key=".0"
                                      labelText="Upload Image"
                                      name="screen2ImageUrl"
                                    >
                                      <FileInput
                                        accept="image/*"
                                        afterLoadedFile={[Function]}
                                        allowClear={true}
                                        croppedImage={null}
                                        dataTest="submit-app-screenshot2"
                                        id="screen2ImageUrl"
                                        labelText="Upload Image"
                                        name="screen2ImageUrl"
                                      >
                                        <Field
                                          name="screen2ImageUrl"
                                        >
                                          <div
                                            className="file is-primary  field pb-2"
                                          >
                                            <div
                                              className="control file-input-container is-full-width"
                                            >
                                              <label
                                                className="file-label"
                                                data-test="file-input-label"
                                                htmlFor="screen2ImageUrl"
                                              >
                                                <input
                                                  accept="image/*"
                                                  className="file-input"
                                                  data-test="submit-app-screenshot2"
                                                  id="screen2ImageUrl"
                                                  onChange={[Function]}
                                                  type="file"
                                                />
                                                <span
                                                  className="file-cta "
                                                >
                                                  Upload Image
                                                </span>
                                              </label>
                                            </div>
                                          </div>
                                        </Field>
                                      </FileInput>
                                    </ImageInput>
                                  </div>
                                </ImageCropper>
                              </ImageCropperWithInput>
                            </div>
                          </div>
                        </GridFourColItem>
                        <GridFourColItem>
                          <div
                            className="column is-multiline is-full-mobile is-half-tablet is-one-third-widescreen is-one-quarter-fullhd"
                            data-test=""
                          >
                            <div
                              className="control mb-4"
                            >
                              <label
                                className="label"
                              >
                                Screenshot 2
                              </label>
                              <ImageCropperWithInput
                                allowClear={true}
                                aspect={1.3085339168490153}
                                dataTest="submit-app-screenshot3"
                                id="screen3ImageUrl"
                                labelText="Upload Image"
                                name="screen3ImageUrl"
                                resizeDimensions={
                                  Object {
                                    "height": 457,
                                    "width": 598,
                                  }
                                }
                              >
                                <ImageCropper
                                  aspect={1.3085339168490153}
                                  croppedImage={null}
                                  onClose={[Function]}
                                  onCropClick={[Function]}
                                  resizeDimensions={
                                    Object {
                                      "height": 457,
                                      "width": 598,
                                    }
                                  }
                                  setCroppedImage={[Function]}
                                  setUpImg={[Function]}
                                  setVisible={[Function]}
                                  upImg=""
                                  visible={false}
                                >
                                  <div>
                                    <ImageInput
                                      afterLoadedImage={[Function]}
                                      allowClear={true}
                                      croppedImage={null}
                                      dataTest="submit-app-screenshot3"
                                      id="screen3ImageUrl"
                                      key=".0"
                                      labelText="Upload Image"
                                      name="screen3ImageUrl"
                                    >
                                      <FileInput
                                        accept="image/*"
                                        afterLoadedFile={[Function]}
                                        allowClear={true}
                                        croppedImage={null}
                                        dataTest="submit-app-screenshot3"
                                        id="screen3ImageUrl"
                                        labelText="Upload Image"
                                        name="screen3ImageUrl"
                                      >
                                        <Field
                                          name="screen3ImageUrl"
                                        >
                                          <div
                                            className="file is-primary  field pb-2"
                                          >
                                            <div
                                              className="control file-input-container is-full-width"
                                            >
                                              <label
                                                className="file-label"
                                                data-test="file-input-label"
                                                htmlFor="screen3ImageUrl"
                                              >
                                                <input
                                                  accept="image/*"
                                                  className="file-input"
                                                  data-test="submit-app-screenshot3"
                                                  id="screen3ImageUrl"
                                                  onChange={[Function]}
                                                  type="file"
                                                />
                                                <span
                                                  className="file-cta "
                                                >
                                                  Upload Image
                                                </span>
                                              </label>
                                            </div>
                                          </div>
                                        </Field>
                                      </FileInput>
                                    </ImageInput>
                                  </div>
                                </ImageCropper>
                              </ImageCropperWithInput>
                            </div>
                          </div>
                        </GridFourColItem>
                        <GridFourColItem>
                          <div
                            className="column is-multiline is-full-mobile is-half-tablet is-one-third-widescreen is-one-quarter-fullhd"
                            data-test=""
                          >
                            <div
                              className="control mb-4"
                            >
                              <label
                                className="label"
                              >
                                Screenshot 3
                              </label>
                              <ImageCropperWithInput
                                allowClear={true}
                                aspect={1.3085339168490153}
                                dataTest="submit-app-screenshot4"
                                id="screen4ImageUrl"
                                labelText="Upload Image"
                                name="screen4ImageUrl"
                                resizeDimensions={
                                  Object {
                                    "height": 457,
                                    "width": 598,
                                  }
                                }
                              >
                                <ImageCropper
                                  aspect={1.3085339168490153}
                                  croppedImage={null}
                                  onClose={[Function]}
                                  onCropClick={[Function]}
                                  resizeDimensions={
                                    Object {
                                      "height": 457,
                                      "width": 598,
                                    }
                                  }
                                  setCroppedImage={[Function]}
                                  setUpImg={[Function]}
                                  setVisible={[Function]}
                                  upImg=""
                                  visible={false}
                                >
                                  <div>
                                    <ImageInput
                                      afterLoadedImage={[Function]}
                                      allowClear={true}
                                      croppedImage={null}
                                      dataTest="submit-app-screenshot4"
                                      id="screen4ImageUrl"
                                      key=".0"
                                      labelText="Upload Image"
                                      name="screen4ImageUrl"
                                    >
                                      <FileInput
                                        accept="image/*"
                                        afterLoadedFile={[Function]}
                                        allowClear={true}
                                        croppedImage={null}
                                        dataTest="submit-app-screenshot4"
                                        id="screen4ImageUrl"
                                        labelText="Upload Image"
                                        name="screen4ImageUrl"
                                      >
                                        <Field
                                          name="screen4ImageUrl"
                                        >
                                          <div
                                            className="file is-primary  field pb-2"
                                          >
                                            <div
                                              className="control file-input-container is-full-width"
                                            >
                                              <label
                                                className="file-label"
                                                data-test="file-input-label"
                                                htmlFor="screen4ImageUrl"
                                              >
                                                <input
                                                  accept="image/*"
                                                  className="file-input"
                                                  data-test="submit-app-screenshot4"
                                                  id="screen4ImageUrl"
                                                  onChange={[Function]}
                                                  type="file"
                                                />
                                                <span
                                                  className="file-cta "
                                                >
                                                  Upload Image
                                                </span>
                                              </label>
                                            </div>
                                          </div>
                                        </Field>
                                      </FileInput>
                                    </ImageInput>
                                  </div>
                                </ImageCropper>
                              </ImageCropperWithInput>
                            </div>
                          </div>
                        </GridFourColItem>
                        <GridFourColItem>
                          <div
                            className="column is-multiline is-full-mobile is-half-tablet is-one-third-widescreen is-one-quarter-fullhd"
                            data-test=""
                          >
                            <div
                              className="control mb-4"
                            >
                              <label
                                className="label"
                              >
                                Screenshot 4
                              </label>
                              <ImageCropperWithInput
                                allowClear={true}
                                aspect={1.3085339168490153}
                                dataTest="submit-app-screenshot5"
                                id="screen5ImageUrl"
                                labelText="Upload Image"
                                name="screen5ImageUrl"
                                resizeDimensions={
                                  Object {
                                    "height": 457,
                                    "width": 598,
                                  }
                                }
                              >
                                <ImageCropper
                                  aspect={1.3085339168490153}
                                  croppedImage={null}
                                  onClose={[Function]}
                                  onCropClick={[Function]}
                                  resizeDimensions={
                                    Object {
                                      "height": 457,
                                      "width": 598,
                                    }
                                  }
                                  setCroppedImage={[Function]}
                                  setUpImg={[Function]}
                                  setVisible={[Function]}
                                  upImg=""
                                  visible={false}
                                >
                                  <div>
                                    <ImageInput
                                      afterLoadedImage={[Function]}
                                      allowClear={true}
                                      croppedImage={null}
                                      dataTest="submit-app-screenshot5"
                                      id="screen5ImageUrl"
                                      key=".0"
                                      labelText="Upload Image"
                                      name="screen5ImageUrl"
                                    >
                                      <FileInput
                                        accept="image/*"
                                        afterLoadedFile={[Function]}
                                        allowClear={true}
                                        croppedImage={null}
                                        dataTest="submit-app-screenshot5"
                                        id="screen5ImageUrl"
                                        labelText="Upload Image"
                                        name="screen5ImageUrl"
                                      >
                                        <Field
                                          name="screen5ImageUrl"
                                        >
                                          <div
                                            className="file is-primary  field pb-2"
                                          >
                                            <div
                                              className="control file-input-container is-full-width"
                                            >
                                              <label
                                                className="file-label"
                                                data-test="file-input-label"
                                                htmlFor="screen5ImageUrl"
                                              >
                                                <input
                                                  accept="image/*"
                                                  className="file-input"
                                                  data-test="submit-app-screenshot5"
                                                  id="screen5ImageUrl"
                                                  onChange={[Function]}
                                                  type="file"
                                                />
                                                <span
                                                  className="file-cta "
                                                >
                                                  Upload Image
                                                </span>
                                              </label>
                                            </div>
                                          </div>
                                        </Field>
                                      </FileInput>
                                    </ImageInput>
                                  </div>
                                </ImageCropper>
                              </ImageCropperWithInput>
                            </div>
                          </div>
                        </GridFourColItem>
                      </div>
                    </GridFourCol>
                  </div>
                </FormSection>
              </UploadImageSection>
              <MarketplaceStatusSection>
                <FormSection>
                  <div
                    className="form-section"
                  >
                    <FormHeading>
                      <div
                        className="form-heading"
                      >
                        Marketplace Status
                      </div>
                    </FormHeading>
                    <FormSubHeading>
                      <div
                        className="form-subheading"
                      >
                        This section refers to the listing status in the Marketplace. If your App is an external application i.e. it is just an API feed app or is a web application that exists out of the Marketplace ecosystem, please select, “Integration”. Your app will still need to be listed in the Marketplace and installed by clients so they can grant permissions however, it will not appear as a launchable app for users from the Marketplace. It is a hard requirement that launchable apps conform closely to our “Elements”, brand guidelines so if your app does not, please also select “Integration”.
                      </div>
                    </FormSubHeading>
                    <Grid>
                      <div
                        className="columns"
                        data-test=""
                      >
                        <GridItem>
                          <div
                            className="column"
                            data-test=""
                          >
                            <Checkbox
                              id="isDirectApi"
                              labelText="Integration"
                              name="isDirectApi"
                            >
                              <div
                                className="field "
                              >
                                <div
                                  className="control"
                                >
                                  <Field
                                    name="isDirectApi"
                                    type="checkbox"
                                  >
                                    <div
                                      className="field field-checkbox"
                                    >
                                      <input
                                        checked={false}
                                        className="checkbox"
                                        data-test=""
                                        disabled={false}
                                        id="isDirectApi"
                                        onChange={[Function]}
                                        type="checkbox"
                                        value=""
                                      />
                                      <label
                                        className="label"
                                        htmlFor="isDirectApi"
                                      >
                                        Integration
                                      </label>
                                    </div>
                                  </Field>
                                </div>
                              </div>
                            </Checkbox>
                          </div>
                        </GridItem>
                      </div>
                    </Grid>
                  </div>
                </FormSection>
              </MarketplaceStatusSection>
              <ReapitProductsSection
                app={Object {}}
              >
                <FormSection>
                  <div
                    className="form-section"
                  >
                    <FormHeading>
                      <div
                        className="form-heading"
                      >
                        Reapit Products
                      </div>
                    </FormHeading>
                    <FormSubHeading>
                      <div
                        className="form-subheading"
                      >
                        This section refers to products that are available within the Reapit Group of Companies. For UK based developers, this will typically default to Agency Cloud however, as we launch the Reapit AppMarket in other countries and with different products, you may wish for your application to list in these alternative AppMarkets. You can select more than one option but at least one option must be selected.
                      </div>
                    </FormSubHeading>
                    <Grid>
                      <div
                        className="columns"
                        data-test=""
                      >
                        <GridItem>
                          <div
                            className="column"
                            data-test=""
                          >
                            <Field
                              name="products"
                              type="input"
                            >
                              <ForwardRef
                                defaultValues={Array []}
                                id="react-example"
                                name="products"
                                noneSelectedLabel="Select at least one product fom below"
                                onBlur={[Function]}
                                onChange={[Function]}
                                options={Array []}
                                value=""
                              >
                                <ElMultiSelectInputWrapper>
                                  <div
                                    className="eooz7jy-el-multi-select-input-wrapper"
                                  >
                                    <ElMultiSelectInput
                                      id="react-example"
                                      name="products"
                                      onBlur={[Function]}
                                      onChange={[Function]}
                                      value=""
                                    >
                                      <input
                                        className="eg4njbl-el-multi-select-input"
                                        id="react-example"
                                        name="products"
                                        onBlur={[Function]}
                                        onChange={[Function]}
                                        value=""
                                      />
                                    </ElMultiSelectInput>
                                    <MultiSelectSelected>
                                      <ElMultiSelectSelected
                                        className=""
                                      >
                                        <div
                                          className="e12c6sou-el-multi-select-selected"
                                        >
                                          <Icon
                                            className="e1el4z3b-el-ml2"
                                            icon="selectInfographic"
                                            iconSize="medium"
                                          >
                                            <ElIcon
                                              className="e1el4z3b-el-ml2 emw1q1w-el-icon-size-medium"
                                              style={
                                                Object {
                                                  "fontSize": undefined,
                                                }
                                              }
                                            >
                                              <span
                                                className="e1el4z3b-el-ml2 emw1q1w-el-icon-size-medium ej9yrfo-el-icon"
                                                style={
                                                  Object {
                                                    "fontSize": undefined,
                                                  }
                                                }
                                              >
                                                <Memo()>
                                                  <svg
                                                    fill="none"
                                                    height="1em"
                                                    viewBox="0 0 40 40"
                                                    width="1em"
                                                    xmlns="http://www.w3.org/2000/svg"
                                                  >
                                                    <rect
                                                      fill="#0061A8"
                                                      height="34.1736"
                                                      width="19.3482"
                                                      x="11.1089"
                                                      y="2.56079"
                                                    />
                                                    <path
                                                      d="M24.2112 4.354H20.4706C19.9537 4.354 19.5354 4.7645 19.5354 5.27163C19.5354 5.77876 19.9537 6.18925 20.4706 6.18925H24.2112C24.728 6.18925 25.1464 5.77876 25.1464 5.27163C25.1464 4.7645 24.728 4.354 24.2112 4.354Z"
                                                      fill="#23A4DE"
                                                    />
                                                    <path
                                                      d="M28.2628 1.29517H13.3002C11.2379 1.29517 9.55957 2.94201 9.55957 4.96566V34.3296C9.55957 36.3533 11.2379 38.0001 13.3002 38.0001H28.2628C30.3251 38.0001 32.0034 36.3533 32.0034 34.3296V4.96566C32.0034 2.94201 30.3251 1.29517 28.2628 1.29517ZM30.1331 34.3296C30.1331 35.3433 29.2959 36.1649 28.2628 36.1649H13.3002C12.2672 36.1649 11.4299 35.3433 11.4299 34.3296V4.96566C11.4299 3.95197 12.2672 3.13041 13.3002 3.13041H28.2628C29.2959 3.13041 30.1331 3.95197 30.1331 4.96566V34.3296Z"
                                                      fill="#0061A8"
                                                    />
                                                    <path
                                                      d="M20.78 34.9412C21.8129 34.9412 22.6503 34.1196 22.6503 33.106C22.6503 32.0924 21.8129 31.2708 20.78 31.2708C19.747 31.2708 18.9097 32.0924 18.9097 33.106C18.9097 34.1196 19.747 34.9412 20.78 34.9412Z"
                                                      fill="#23A4DE"
                                                    />
                                                    <path
                                                      d="M17.3509 6.18925C17.8674 6.18925 18.2861 5.77842 18.2861 5.27163C18.2861 4.76484 17.8674 4.354 17.3509 4.354C16.8345 4.354 16.4158 4.76484 16.4158 5.27163C16.4158 5.77842 16.8345 6.18925 17.3509 6.18925Z"
                                                      fill="#23A4DE"
                                                    />
                                                    <rect
                                                      fill="white"
                                                      height="10"
                                                      rx="5"
                                                      width="23"
                                                      x="17"
                                                      y="10"
                                                    />
                                                    <g
                                                      clipPath="url(#clip1)"
                                                    >
                                                      <path
                                                        d="M37.2176 19.5746C36.9467 18.5733 35.8688 17.998 34.8684 18.4C34.6105 17.447 33.6057 16.8422 32.587 17.2044V14.7472C32.5861 12.4194 29.064 12.4158 29.0632 14.7472V23.8099C28.1718 22.9185 27.3744 22.1211 27.3724 22.1192C26.6858 21.4317 25.5673 21.4317 24.8808 22.1192C24.1946 22.8042 24.1922 23.9226 24.8808 24.6107C25.0511 24.7809 29.3682 29.0981 29.5384 29.2683C30.6477 30.3776 32.1516 31 33.7201 30.9999V31C36.9869 30.9996 39.6344 28.3521 39.6348 25.0853C39.6348 23.9107 39.6348 24.0998 39.6348 21.2075C39.6342 19.9692 38.3836 19.106 37.2176 19.5746Z"
                                                        fill="#FFB71B"
                                                      />
                                                    </g>
                                                    <path
                                                      d="M7 24L7 14.8485C7 14.3797 7.41997 14 7.93848 14L14.0615 14C14.58 14 15 14.3797 15 14.8485L15 24L7 24Z"
                                                      fill="#23A4DE"
                                                    />
                                                    <path
                                                      d="M1.95185 23L19.0481 23C19.8316 23 20.2786 23.8097 19.8073 24.3761L11.2597 34.6571C10.8796 35.1143 10.1209 35.1143 9.74082 34.6571L1.19267 24.3761C0.721385 23.8097 1.16844 23 1.95185 23Z"
                                                      fill="#7BC9EB"
                                                    />
                                                  </svg>
                                                </Memo()>
                                              </span>
                                            </ElIcon>
                                          </Icon>
                                          <p>
                                            Select at least one product fom below
                                          </p>
                                        </div>
                                      </ElMultiSelectSelected>
                                    </MultiSelectSelected>
                                  </div>
                                </ElMultiSelectInputWrapper>
                              </ForwardRef>
                            </Field>
                          </div>
                        </GridItem>
                      </div>
                    </Grid>
                  </div>
                </FormSection>
              </ReapitProductsSection>
              <PermissionSection
                errors={Object {}}
                isListed={false}
                scopes={Array []}
              >
                <FormSection>
                  <div
                    className="form-section"
                  >
                    <FormHeading>
                      <div
                        className="form-heading"
                      >
                        Permissions *
                      </div>
                    </FormHeading>
                    <FormSubHeading>
                      <div
                        className="form-subheading"
                      >
                        To access a client's data, you will need to specify the entities you need access to on a read or write basis. You should be familiar with these entities from the sandbox. When the user installs your application, they will have to consent to your usage based on these permissions. If you do not have the correct permissions on an entity basis, your app will receive a 403 error.
                      </div>
                    </FormSubHeading>
                    <GridFourCol>
                      <div
                        className="columns is-multiline"
                        data-test=""
                      />
                    </GridFourCol>
                  </div>
                </FormSection>
              </PermissionSection>
              <Section>
                <section
                  className="section has-padding has-margin has-background"
                  data-test=""
                >
                  <LevelRight>
                    <div
                      className="level-right"
                      data-test=""
                    >
                      <ButtonGroup
                        hasSpacing={true}
                      >
                        <div
                          className="is-centered buttons"
                        >
                          <Button
                            onClick={[Function]}
                            type="button"
                            variant="danger"
                          >
                            <button
                              className="button   is-danger "
                              data-test=""
                              disabled={false}
                              onClick={[Function]}
                              type="button"
                            >
                              Back To Apps
                            </button>
                          </Button>
                          <Button
                            onClick={[Function]}
                            type="button"
                            variant="secondary"
                          >
                            <button
                              className="button   is-secondary "
                              data-test=""
                              disabled={false}
                              onClick={[Function]}
                              type="button"
                            >
                              Preview
                            </button>
                          </Button>
                          <Button
                            dataTest="submit-app-button"
                            disabled={false}
                            loading={false}
                            type="submit"
                            variant="primary"
                          >
                            <button
                              className="button   is-primary "
                              data-test="submit-app-button"
                              disabled={false}
                              type="submit"
                            >
                              Submit App
                            </button>
                          </Button>
                        </div>
                      </ButtonGroup>
                    </div>
                  </LevelRight>
                </section>
              </Section>
              <Input
                dataTest="submit-app-developer-id"
                id="developerId"
                labelText="Developer ID"
                name="developerId"
                type="hidden"
              >
                <Field
                  name="developerId"
                  validate={[Function]}
                >
                  <div
                    className="field"
                  >
                    <div
                      className="control "
                    >
                      <input
                        className="input is-primary"
                        data-test="submit-app-developer-id"
                        disabled={false}
                        id="developerId"
                        name="developerId"
                        onBlur={[Function]}
                        onChange={[Function]}
                        placeholder=""
                        type="hidden"
                        value=""
                      />
                    </div>
                  </div>
                </Field>
              </Input>
            </form>
          </Form>
        </Formik>
        <ModalV2
          footer={
            Array [
              <Button
                onClick={[Function]}
              >
                Close
              </Button>,
            ]
          }
          isCentered={true}
          onClose={[Function]}
          title="Account Information Required"
          visible={false}
        >
          <Dialog
            className="m36ncwu-modal-container"
            closeIcon={
              <span
                aria-label="close"
                className="delete"
              />
            }
            destroyOnClose={true}
            footer={
              Array [
                <Button
                  onClick={[Function]}
                >
                  Close
                </Button>,
              ]
            }
            onClose={[Function]}
            title={
              <ModalHeaderV2>
                Account Information Required
              </ModalHeaderV2>
            }
            visible={false}
            wrapClassName="m140lwlu-modal-centered"
          />
        </ModalV2>
      </DeveloperEditApp>
    </Router>
  </MemoryRouter>
</Provider>
`;

exports[`DeveloperSubmitApp should match a snapshot when pendingRevisions = true 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <MemoryRouter
    initialEntries={
      Array [
        Object {
          "key": "what",
          "pathname": "/register",
        },
      ]
    }
    keyLength={0}
  >
    <Router
      history={
        Object {
          "action": "REPLACE",
          "block": [Function],
          "canGo": [Function],
          "createHref": [Function],
          "entries": Array [
            Object {
              "hash": "",
              "pathname": "/apps/undefined",
              "search": "",
              "state": undefined,
            },
          ],
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "index": 0,
          "length": 1,
          "listen": [Function],
          "location": Object {
            "hash": "",
            "pathname": "/apps/undefined",
            "search": "",
            "state": undefined,
          },
          "push": [Function],
          "replace": [Function],
        }
      }
    >
      <DeveloperEditApp>
        <Redirect
          to="/apps/undefined"
        >
          <Lifecycle
            onMount={[Function]}
            onUpdate={[Function]}
            to="/apps/undefined"
          />
        </Redirect>
      </DeveloperEditApp>
    </Router>
  </MemoryRouter>
</Provider>
`;
