// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Swagger should match a snapshot 1`] = `
{
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <div
        class="mocked-styled-93 el-snack-holder"
      />
      <div
        class="el-is-full-page el-loader-container"
      >
        <div
          class="mocked-styled-46 el-loader"
        >
          <div
            class="mocked-styled-47 el-loader-moving-bar"
          />
        </div>
      </div>
      <div
        class="el-intent-primary el-is-active el-persistent-notification"
        role="status"
      >
        <div
          class="el-pn-icon"
          data-testid="close-icon"
        >
          <span
            class="el-icon-new el-icon"
            style="font-size: 1.25rem;"
          >
            <svg
              fill="none"
              height="1em"
              role="img"
              style="font-size: 1.25rem;"
              title="Icon image with name info"
              viewBox="0 0 24 24"
              width="1em"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                d="M12 2C6.477 2 2 6.477 2 12s4.477 10 10 10 10-4.477 10-10A10 10 0 0 0 12 2m1.143 15.714h-2.286v-6h2.286zm-1.143-8a1.714 1.714 0 1 1 0-3.428 1.714 1.714 0 0 1 0 3.428"
                fill="currentColor"
              />
            </svg>
          </span>
        </div>
        <div
          aria-live="polite"
          class="el-pn-content"
        >
          This is a sandbox environment, with anonymised test data and isolated from production
        </div>
      </div>
      <div
        class="mock-css.
  // Can't reset the global scrollbar to default styles
  // Need to write custom styles
  *::-webkit-scrollbar {
    display: block;
    width: 12px;
    background-color: #f2f4f6;
  }

  *::-webkit-scrollbar-track {
    border-radius: 10px;
    background-color: #f2f4f6;
  }

  *::-webkit-scrollbar-thumb {
    border-radius: 10px;
    background-color: #f2f4f6;
  }

  *::-webkit-scrollbar-thumb:hover {
    background-color: #f2f4f6;
  }

  height: 100vh;
  width: 100%;
  background: #fff;

  .swagger-ui {
    width: 100%;

    p,
    a,
    .info,
    .markdown {
      font-family: 'Inter', Helvetica, sans-serif;
      font-size: 1rem;
    }

    h1,
    h2,
    h3,
    h4,
    h5,
    h6,
    .title,
    .model-title {
      font-family: 'Inter', Helvetica, sans-serif;
    }

    .info a {
      color: #4e56ea;
    }

    .info table {
      font-family: 'Inter', Helvetica, sans-serif;
      font-size: 1rem;
    }

    a {
      color: #4e56ea;
    }

    .loading,
    .scheme-container {
      display: none;
    }

    hgroup.main {
      pre.base-url {
        display: none;
      }
    }

    h2,
    .info h2 {
      font-family: 'Inter', Helvetica, sans-serif;
      font-size: 2rem;
      font-weight: bold;
    }

    .info h2 {
      margin-bottom: 1rem;
    }

    code,
    .prop-format {
      font-family: 'Source Code Pro', monospace;
      font-size: 1rem;
      color: unset;
      background: unset;
    }

    .auth-wrapper {
      padding-right: 1.5rem;
    }

    .wrapper {
      padding: 0;
      max-width: 100%;
    }

    .wrapper .block {
      background: #fff;
    }

    .information-container {
      display: none;
    }

    section.models {
      border: none;
      border-radius: none;

      .model-container {
        background: #f2f4f6;
        margin: 1rem 0;
      }
    }

    .model {
      td,
      .prop-type {
        font-family: 'Source Code Pro', monospace;
      }

      .prop-type {
        color: #607890;
      }
    }

    .opblock-tag,
    .opblock-summary-path {
      font-size: 1rem;
      font-weight: bold;
    }

    .opblock-tag {
      padding: 0.5rem 1rem;

      .markdown p {
        margin: 0;
      }

      small {
        font-size: 1rem;
        font-family: 'Inter', Helvetica, sans-serif;
      }
    }

    p,
    .markdown,
    .opblock-summary-description {
      font-family: 'Inter', Helvetica, sans-serif;
      color: #607890;
    }
  }
 mock-css.
  display: none;
"
      >
        <h1
          class="el-text-base el-title"
        >
          Foundations API
        </h1>
        <p
          class="el-text-base el-body-text el-has-grey-text"
        >
          This tool is interactive and provides instant access to data hosted in our sandbox environment with authentication and versioning headers pre-populated. Example requests and responses are shown by default but you can switch to view a fully documented schema - look for the model link.
        </p>
      </div>
    </div>
  </body>,
  "container": <div>
    <div
      class="mocked-styled-93 el-snack-holder"
    />
    <div
      class="el-is-full-page el-loader-container"
    >
      <div
        class="mocked-styled-46 el-loader"
      >
        <div
          class="mocked-styled-47 el-loader-moving-bar"
        />
      </div>
    </div>
    <div
      class="el-intent-primary el-is-active el-persistent-notification"
      role="status"
    >
      <div
        class="el-pn-icon"
        data-testid="close-icon"
      >
        <span
          class="el-icon-new el-icon"
          style="font-size: 1.25rem;"
        >
          <svg
            fill="none"
            height="1em"
            role="img"
            style="font-size: 1.25rem;"
            title="Icon image with name info"
            viewBox="0 0 24 24"
            width="1em"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              d="M12 2C6.477 2 2 6.477 2 12s4.477 10 10 10 10-4.477 10-10A10 10 0 0 0 12 2m1.143 15.714h-2.286v-6h2.286zm-1.143-8a1.714 1.714 0 1 1 0-3.428 1.714 1.714 0 0 1 0 3.428"
              fill="currentColor"
            />
          </svg>
        </span>
      </div>
      <div
        aria-live="polite"
        class="el-pn-content"
      >
        This is a sandbox environment, with anonymised test data and isolated from production
      </div>
    </div>
    <div
      class="mock-css.
  // Can't reset the global scrollbar to default styles
  // Need to write custom styles
  *::-webkit-scrollbar {
    display: block;
    width: 12px;
    background-color: #f2f4f6;
  }

  *::-webkit-scrollbar-track {
    border-radius: 10px;
    background-color: #f2f4f6;
  }

  *::-webkit-scrollbar-thumb {
    border-radius: 10px;
    background-color: #f2f4f6;
  }

  *::-webkit-scrollbar-thumb:hover {
    background-color: #f2f4f6;
  }

  height: 100vh;
  width: 100%;
  background: #fff;

  .swagger-ui {
    width: 100%;

    p,
    a,
    .info,
    .markdown {
      font-family: 'Inter', Helvetica, sans-serif;
      font-size: 1rem;
    }

    h1,
    h2,
    h3,
    h4,
    h5,
    h6,
    .title,
    .model-title {
      font-family: 'Inter', Helvetica, sans-serif;
    }

    .info a {
      color: #4e56ea;
    }

    .info table {
      font-family: 'Inter', Helvetica, sans-serif;
      font-size: 1rem;
    }

    a {
      color: #4e56ea;
    }

    .loading,
    .scheme-container {
      display: none;
    }

    hgroup.main {
      pre.base-url {
        display: none;
      }
    }

    h2,
    .info h2 {
      font-family: 'Inter', Helvetica, sans-serif;
      font-size: 2rem;
      font-weight: bold;
    }

    .info h2 {
      margin-bottom: 1rem;
    }

    code,
    .prop-format {
      font-family: 'Source Code Pro', monospace;
      font-size: 1rem;
      color: unset;
      background: unset;
    }

    .auth-wrapper {
      padding-right: 1.5rem;
    }

    .wrapper {
      padding: 0;
      max-width: 100%;
    }

    .wrapper .block {
      background: #fff;
    }

    .information-container {
      display: none;
    }

    section.models {
      border: none;
      border-radius: none;

      .model-container {
        background: #f2f4f6;
        margin: 1rem 0;
      }
    }

    .model {
      td,
      .prop-type {
        font-family: 'Source Code Pro', monospace;
      }

      .prop-type {
        color: #607890;
      }
    }

    .opblock-tag,
    .opblock-summary-path {
      font-size: 1rem;
      font-weight: bold;
    }

    .opblock-tag {
      padding: 0.5rem 1rem;

      .markdown p {
        margin: 0;
      }

      small {
        font-size: 1rem;
        font-family: 'Inter', Helvetica, sans-serif;
      }
    }

    p,
    .markdown,
    .opblock-summary-description {
      font-family: 'Inter', Helvetica, sans-serif;
      color: #607890;
    }
  }
 mock-css.
  display: none;
"
    >
      <h1
        class="el-text-base el-title"
      >
        Foundations API
      </h1>
      <p
        class="el-text-base el-body-text el-has-grey-text"
      >
        This tool is interactive and provides instant access to data hosted in our sandbox environment with authentication and versioning headers pre-populated. Example requests and responses are shown by default but you can switch to view a fully documented schema - look for the model link.
      </p>
    </div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;
