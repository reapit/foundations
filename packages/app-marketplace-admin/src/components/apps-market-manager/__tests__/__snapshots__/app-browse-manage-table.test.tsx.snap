// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`AppBrowseManageTable should match a snapshot 1`] = `
{
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <mock-styled.div />
      <div
        class="mock-css.
  margin-bottom: 2.5rem;
"
      >
        <mock-styled.h2
          classname="mock-css."
        >
          featured apps
        </mock-styled.h2>
        <mock-styled.p
          classname="mock-css."
        >
          Featured apps are lists of apps, grouped as a collection that sit below the filter collections typically. They have slightly larger tiles and slightly greater prominence than Simple Apps.
        </mock-styled.p>
        <mock-styled.p
          classname="mock-css."
        >
          You can add as many to a collection as you like however, the list will be paginatied by the UI at some resolutions in line with the design. All apps selected will be returned when hitting the See All link.
        </mock-styled.p>
        <mock-styled.div />
        <br />
        <mock-styled.button
          classname="mock-css."
        >
          <mock-styled.div />
          Add
        </mock-styled.button>
      </div>
    </div>
  </body>,
  "container": <div>
    <mock-styled.div />
    <div
      class="mock-css.
  margin-bottom: 2.5rem;
"
    >
      <mock-styled.h2
        classname="mock-css."
      >
        featured apps
      </mock-styled.h2>
      <mock-styled.p
        classname="mock-css."
      >
        Featured apps are lists of apps, grouped as a collection that sit below the filter collections typically. They have slightly larger tiles and slightly greater prominence than Simple Apps.
      </mock-styled.p>
      <mock-styled.p
        classname="mock-css."
      >
        You can add as many to a collection as you like however, the list will be paginatied by the UI at some resolutions in line with the design. All apps selected will be returned when hitting the See All link.
      </mock-styled.p>
      <mock-styled.div />
      <br />
      <mock-styled.button
        classname="mock-css."
      >
        <mock-styled.div />
        Add
      </mock-styled.button>
    </div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;
