// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`AppBrowseManageUpsert should match a snapshot 1`] = `
{
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <mock-styled.div />
      <mock-styled.div
        classname="mock-css.
  flex: 1 1 auto;
"
      >
        <mock-styled.aside
          classname=""
        >
          <mock-styled.span
            classname="mock-css.
  margin-bottom: 0.5rem;
 mock-css.
  font-size: 5rem;
"
          >
            <svg />
          </mock-styled.span>
          <mock-styled.p
            classname=""
          >
            Getting Started
          </mock-styled.p>
          <mock-styled.p
            classname="mock-css."
          >
            The AppMarket does not render anything on the browse page without this dashboard. Each section on the page is configured by type and differing information is required for each confg item type.
          </mock-styled.p>
          <mock-styled.p
            classname="mock-css."
          >
            All config items can be configured to go live bettween given dates using the config options provided, or can be toggled on or off in live time.
          </mock-styled.p>
          <mock-styled.button
            classname="mock-css."
          >
            <mock-styled.div />
            View Docs
          </mock-styled.button>
        </mock-styled.aside>
        <mock-styled.section
          classname=""
        >
          <mock-styled.h1
            classname=""
          >
            AppMarket Configuration Table
          </mock-styled.h1>
          <div
            class="mock-css.
  margin-bottom: 2.5rem;
"
          >
            <mock-styled.h2
              classname="mock-css."
            >
              featured hero apps
            </mock-styled.h2>
            <mock-styled.p
              classname="mock-css."
            >
              Featured Hero apps are the first thing you will see in on the browse apps page and therefore the most prominant and important. There should be only 1 Featured Hero set to live at any given time.
            </mock-styled.p>
            <mock-styled.div />
            <br />
            <mock-styled.button
              classname="mock-css."
            >
              <mock-styled.div />
              Add
            </mock-styled.button>
          </div>
          <div
            class="mock-css.
  margin-bottom: 2.5rem;
"
          >
            <mock-styled.h2
              classname="mock-css."
            >
              hero apps
            </mock-styled.h2>
            <mock-styled.p
              classname="mock-css."
            >
              Hero apps are of secondary prominance to the Featured Hero. There should only be 2 Heros set to live at any given time
            </mock-styled.p>
            <mock-styled.div />
            <br />
            <mock-styled.button
              classname="mock-css."
            >
              <mock-styled.div />
              Add
            </mock-styled.button>
          </div>
          <div
            class="mock-css.
  margin-bottom: 2.5rem;
"
          >
            <mock-styled.h2
              classname="mock-css."
            >
              apps filters
            </mock-styled.h2>
            <mock-styled.p
              classname="mock-css."
            >
              App Filters are tiles that on the user clicking, set a pre-defined set of filters is applied to the page which will then render the filtered results as a related collection.
            </mock-styled.p>
            <mock-styled.p
              classname="mock-css."
            >
              You can have any number of Filter Collections live however, 6 is advised in line with the design.
            </mock-styled.p>
            <mock-styled.div />
            <br />
            <mock-styled.button
              classname="mock-css."
            >
              <mock-styled.div />
              Add
            </mock-styled.button>
          </div>
          <div
            class="mock-css.
  margin-bottom: 2.5rem;
"
          >
            <mock-styled.h2
              classname="mock-css."
            >
              featured apps
            </mock-styled.h2>
            <mock-styled.p
              classname="mock-css."
            >
              Featured apps are lists of apps, grouped as a collection that sit below the filter collections typically. They have slightly larger tiles and slightly greater prominence than Simple Apps.
            </mock-styled.p>
            <mock-styled.p
              classname="mock-css."
            >
              You can add as many to a collection as you like however, the list will be paginatied by the UI at some resolutions in line with the design. All apps selected will be returned when hitting the See All link.
            </mock-styled.p>
            <mock-styled.div />
            <br />
            <mock-styled.button
              classname="mock-css."
            >
              <mock-styled.div />
              Add
            </mock-styled.button>
          </div>
          <div
            class="mock-css.
  margin-bottom: 2.5rem;
"
          >
            <mock-styled.h2
              classname="mock-css."
            >
              simple apps
            </mock-styled.h2>
            <mock-styled.p
              classname="mock-css."
            >
              Simple apps behave almost identically to featured apps however, they are of slightly less prominence on the page.
            </mock-styled.p>
            <mock-styled.p
              classname="mock-css."
            />
            <mock-styled.div />
            <br />
            <mock-styled.button
              classname="mock-css."
            >
              <mock-styled.div />
              Add
            </mock-styled.button>
          </div>
        </mock-styled.section>
      </mock-styled.div>
    </div>
  </body>,
  "container": <div>
    <mock-styled.div />
    <mock-styled.div
      classname="mock-css.
  flex: 1 1 auto;
"
    >
      <mock-styled.aside
        classname=""
      >
        <mock-styled.span
          classname="mock-css.
  margin-bottom: 0.5rem;
 mock-css.
  font-size: 5rem;
"
        >
          <svg />
        </mock-styled.span>
        <mock-styled.p
          classname=""
        >
          Getting Started
        </mock-styled.p>
        <mock-styled.p
          classname="mock-css."
        >
          The AppMarket does not render anything on the browse page without this dashboard. Each section on the page is configured by type and differing information is required for each confg item type.
        </mock-styled.p>
        <mock-styled.p
          classname="mock-css."
        >
          All config items can be configured to go live bettween given dates using the config options provided, or can be toggled on or off in live time.
        </mock-styled.p>
        <mock-styled.button
          classname="mock-css."
        >
          <mock-styled.div />
          View Docs
        </mock-styled.button>
      </mock-styled.aside>
      <mock-styled.section
        classname=""
      >
        <mock-styled.h1
          classname=""
        >
          AppMarket Configuration Table
        </mock-styled.h1>
        <div
          class="mock-css.
  margin-bottom: 2.5rem;
"
        >
          <mock-styled.h2
            classname="mock-css."
          >
            featured hero apps
          </mock-styled.h2>
          <mock-styled.p
            classname="mock-css."
          >
            Featured Hero apps are the first thing you will see in on the browse apps page and therefore the most prominant and important. There should be only 1 Featured Hero set to live at any given time.
          </mock-styled.p>
          <mock-styled.div />
          <br />
          <mock-styled.button
            classname="mock-css."
          >
            <mock-styled.div />
            Add
          </mock-styled.button>
        </div>
        <div
          class="mock-css.
  margin-bottom: 2.5rem;
"
        >
          <mock-styled.h2
            classname="mock-css."
          >
            hero apps
          </mock-styled.h2>
          <mock-styled.p
            classname="mock-css."
          >
            Hero apps are of secondary prominance to the Featured Hero. There should only be 2 Heros set to live at any given time
          </mock-styled.p>
          <mock-styled.div />
          <br />
          <mock-styled.button
            classname="mock-css."
          >
            <mock-styled.div />
            Add
          </mock-styled.button>
        </div>
        <div
          class="mock-css.
  margin-bottom: 2.5rem;
"
        >
          <mock-styled.h2
            classname="mock-css."
          >
            apps filters
          </mock-styled.h2>
          <mock-styled.p
            classname="mock-css."
          >
            App Filters are tiles that on the user clicking, set a pre-defined set of filters is applied to the page which will then render the filtered results as a related collection.
          </mock-styled.p>
          <mock-styled.p
            classname="mock-css."
          >
            You can have any number of Filter Collections live however, 6 is advised in line with the design.
          </mock-styled.p>
          <mock-styled.div />
          <br />
          <mock-styled.button
            classname="mock-css."
          >
            <mock-styled.div />
            Add
          </mock-styled.button>
        </div>
        <div
          class="mock-css.
  margin-bottom: 2.5rem;
"
        >
          <mock-styled.h2
            classname="mock-css."
          >
            featured apps
          </mock-styled.h2>
          <mock-styled.p
            classname="mock-css."
          >
            Featured apps are lists of apps, grouped as a collection that sit below the filter collections typically. They have slightly larger tiles and slightly greater prominence than Simple Apps.
          </mock-styled.p>
          <mock-styled.p
            classname="mock-css."
          >
            You can add as many to a collection as you like however, the list will be paginatied by the UI at some resolutions in line with the design. All apps selected will be returned when hitting the See All link.
          </mock-styled.p>
          <mock-styled.div />
          <br />
          <mock-styled.button
            classname="mock-css."
          >
            <mock-styled.div />
            Add
          </mock-styled.button>
        </div>
        <div
          class="mock-css.
  margin-bottom: 2.5rem;
"
        >
          <mock-styled.h2
            classname="mock-css."
          >
            simple apps
          </mock-styled.h2>
          <mock-styled.p
            classname="mock-css."
          >
            Simple apps behave almost identically to featured apps however, they are of slightly less prominence on the page.
          </mock-styled.p>
          <mock-styled.p
            classname="mock-css."
          />
          <mock-styled.div />
          <br />
          <mock-styled.button
            classname="mock-css."
          >
            <mock-styled.div />
            Add
          </mock-styled.button>
        </div>
      </mock-styled.section>
    </mock-styled.div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;
