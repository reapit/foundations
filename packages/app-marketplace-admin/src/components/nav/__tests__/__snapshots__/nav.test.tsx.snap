// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Nav should match a snapshot 1`] = `
{
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <mock-styled.div />
      <mock-styled.div
        classname=""
      />
      <mock-styled.nav
        classname=""
      >
        <mock-styled.a
          classname=""
        >
          <mock-styled.div>
            <mock-styled.span
              classname=""
            >
              <svg />
            </mock-styled.span>
          </mock-styled.div>
          <mock-styled.span
            classname=""
            style="height: 24px; width: 100px;"
          >
            <svg
              style="height: 24px; width: 100px;"
            />
          </mock-styled.span>
          <mock-styled.span
            classname="mock-css.
  margin-left: auto;
 mock-css.
  margin-right: 0.625rem;
 mock-css.
  @media screen and (min-width: 768px) {
    height: 0;
    width: 0;
    visibility: hidden;
    padding: 0 !important;
    margin: 0 !important;
  }

  svg {
    height: 1.2rem;
  }
 mock-css."
            style="font-size: 1.2rem;"
          >
            <svg
              style="font-size: 1.2rem;"
            />
          </mock-styled.span>
          <mock-styled.div
            classname="mock-css.
  display: none;
"
          >
            <mock-styled.div
              classname="mock-css.
  margin-right: 0.375rem;
"
            />
            <mock-styled.span
              classname=""
              style="height: 16px; width: 16px;"
            >
              <svg
                style="height: 16px; width: 16px;"
              />
            </mock-styled.span>
          </mock-styled.div>
        </mock-styled.a>
        <mock-styled.a
          classname="mock-css.
  &:not(:first-child) {
    background-color: var(--color-purple-50);
    border-left: 3px solid var(--color-purple-500);
    color: var(--color-purple-500);
  }

  @media screen and (min-width: 768px) {
    &:not(:first-child) {
      --nav-menu-icon-primary-accent: var(--color-purple-500);
      --nav-menu-icon-secondary-accent: var(--color-purple-300);
      padding: 0.375rem 0.75rem;
      border-radius: 0.25rem;
      background-color: var(--color-grey-100);
      border-left: none;
      height: 2rem;
    }
  }
"
        >
          Home
        </mock-styled.a>
        <mock-styled.div
          classname=""
        >
          <mock-styled.div
            classname="mock-css.
  margin-right: 0.375rem;
"
          />
          <mock-styled.span
            classname=""
            style="height: 16px; width: 16px;"
          >
            <svg
              style="height: 16px; width: 16px;"
            />
          </mock-styled.span>
        </mock-styled.div>
      </mock-styled.nav>
    </div>
  </body>,
  "container": <div>
    <mock-styled.div />
    <mock-styled.div
      classname=""
    />
    <mock-styled.nav
      classname=""
    >
      <mock-styled.a
        classname=""
      >
        <mock-styled.div>
          <mock-styled.span
            classname=""
          >
            <svg />
          </mock-styled.span>
        </mock-styled.div>
        <mock-styled.span
          classname=""
          style="height: 24px; width: 100px;"
        >
          <svg
            style="height: 24px; width: 100px;"
          />
        </mock-styled.span>
        <mock-styled.span
          classname="mock-css.
  margin-left: auto;
 mock-css.
  margin-right: 0.625rem;
 mock-css.
  @media screen and (min-width: 768px) {
    height: 0;
    width: 0;
    visibility: hidden;
    padding: 0 !important;
    margin: 0 !important;
  }

  svg {
    height: 1.2rem;
  }
 mock-css."
          style="font-size: 1.2rem;"
        >
          <svg
            style="font-size: 1.2rem;"
          />
        </mock-styled.span>
        <mock-styled.div
          classname="mock-css.
  display: none;
"
        >
          <mock-styled.div
            classname="mock-css.
  margin-right: 0.375rem;
"
          />
          <mock-styled.span
            classname=""
            style="height: 16px; width: 16px;"
          >
            <svg
              style="height: 16px; width: 16px;"
            />
          </mock-styled.span>
        </mock-styled.div>
      </mock-styled.a>
      <mock-styled.a
        classname="mock-css.
  &:not(:first-child) {
    background-color: var(--color-purple-50);
    border-left: 3px solid var(--color-purple-500);
    color: var(--color-purple-500);
  }

  @media screen and (min-width: 768px) {
    &:not(:first-child) {
      --nav-menu-icon-primary-accent: var(--color-purple-500);
      --nav-menu-icon-secondary-accent: var(--color-purple-300);
      padding: 0.375rem 0.75rem;
      border-radius: 0.25rem;
      background-color: var(--color-grey-100);
      border-left: none;
      height: 2rem;
    }
  }
"
      >
        Home
      </mock-styled.a>
      <mock-styled.div
        classname=""
      >
        <mock-styled.div
          classname="mock-css.
  margin-right: 0.375rem;
"
        />
        <mock-styled.span
          classname=""
          style="height: 16px; width: 16px;"
        >
          <svg
            style="height: 16px; width: 16px;"
          />
        </mock-styled.span>
      </mock-styled.div>
    </mock-styled.nav>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;
