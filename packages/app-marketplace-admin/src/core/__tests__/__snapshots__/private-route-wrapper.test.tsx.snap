// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`PrivateRouter should match a snapshot 1`] = `
{
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <mock-styled.div />
      <mock-styled.main>
        <mock-styled.section>
          <mock-styled.div
            classname="mock-css. mock-css. mock-css. mock-css."
          >
            <div
              class="mock-css.
  padding: 0 1rem;
  display: flex;
  align-items: center;
  border-radius: var(--default-border-radius) 0 0 var(--default-border-radius);
  cursor: pointer;

  , {
    color: var(--color-white);
  }
"
              data-testid="close-icon"
            >
              <mock-styled.span
                classname=""
              >
                <svg />
              </mock-styled.span>
            </div>
            <div
              class="mock-css.
  padding: 1rem;
  opacity: 0;
  transition: 0.5s;
  width: 100%;
"
            >
              You do not have permission to view this page.
            </div>
          </mock-styled.div>
        </mock-styled.section>
      </mock-styled.main>
    </div>
  </body>,
  "container": <div>
    <mock-styled.div />
    <mock-styled.main>
      <mock-styled.section>
        <mock-styled.div
          classname="mock-css. mock-css. mock-css. mock-css."
        >
          <div
            class="mock-css.
  padding: 0 1rem;
  display: flex;
  align-items: center;
  border-radius: var(--default-border-radius) 0 0 var(--default-border-radius);
  cursor: pointer;

  , {
    color: var(--color-white);
  }
"
            data-testid="close-icon"
          >
            <mock-styled.span
              classname=""
            >
              <svg />
            </mock-styled.span>
          </div>
          <div
            class="mock-css.
  padding: 1rem;
  opacity: 0;
  transition: 0.5s;
  width: 100%;
"
          >
            You do not have permission to view this page.
          </div>
        </mock-styled.div>
      </mock-styled.section>
    </mock-styled.main>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`PrivateRouter should match a snapshot if an employee 1`] = `
{
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <mock-styled.div />
      <mock-styled.main>
        <mock-styled.nav
          classname=""
        >
          <mock-styled.a
            classname="mock-css.
  &:not(:first-child) {
    background-color: var(--color-purple-50);
    border-left: 3px solid var(--color-purple-500);
    color: var(--color-purple-500);
  }

  @media screen and (min-width: 768px) {
    &:not(:first-child) {
      --nav-menu-icon-primary-accent: var(--color-purple-500);
      --nav-menu-icon-secondary-accent: var(--color-purple-300);
      padding: 0.375rem 0.75rem;
      border-radius: 0.25rem;
      background-color: var(--color-grey-100);
      border-left: none;
      height: 2rem;

      &., {
        background-color: var(--color-white);
      }
    }
  }
"
          >
            <mock-styled.span
              classname="mock-css.
  margin-right: 0.375rem;
"
              style="font-size: 1.5rem;"
            >
              <svg
                style="font-size: 1.5rem;"
              />
            </mock-styled.span>
            <mock-styled.span
              classname=""
              style="height: 24px; width: 100px;"
            >
              <svg
                style="height: 24px; width: 100px;"
              />
            </mock-styled.span>
            <mock-styled.span
              classname="mock-css.
  margin-left: auto;
 mock-css.
  margin-right: 0.375rem;
 mock-css.
  @media screen and (min-width: 768px) {
    height: 0;
    width: 0;
    visibility: hidden;
    padding: 0 !important;
    margin: 0 !important;
  }

  svg {
    height: 1.2rem;
  }
 mock-css."
              style="font-size: 1.2rem;"
            >
              <svg
                style="font-size: 1.2rem;"
              />
            </mock-styled.span>
          </mock-styled.a>
          <mock-styled.a
            classname=""
          >
            Home
          </mock-styled.a>
          <mock-styled.a
            classname="mock-css.
  @media screen and (min-width: 768px) {
    margin-left: auto;

    &:last-child {
      margin-right: 0;
    }
  }
"
          >
            <mock-styled.span
              classname=""
              style="font-size: 32px;"
            >
              <svg
                style="font-size: 32px;"
              />
            </mock-styled.span>
          </mock-styled.a>
        </mock-styled.nav>
        <div />
      </mock-styled.main>
    </div>
  </body>,
  "container": <div>
    <mock-styled.div />
    <mock-styled.main>
      <mock-styled.nav
        classname=""
      >
        <mock-styled.a
          classname="mock-css.
  &:not(:first-child) {
    background-color: var(--color-purple-50);
    border-left: 3px solid var(--color-purple-500);
    color: var(--color-purple-500);
  }

  @media screen and (min-width: 768px) {
    &:not(:first-child) {
      --nav-menu-icon-primary-accent: var(--color-purple-500);
      --nav-menu-icon-secondary-accent: var(--color-purple-300);
      padding: 0.375rem 0.75rem;
      border-radius: 0.25rem;
      background-color: var(--color-grey-100);
      border-left: none;
      height: 2rem;

      &., {
        background-color: var(--color-white);
      }
    }
  }
"
        >
          <mock-styled.span
            classname="mock-css.
  margin-right: 0.375rem;
"
            style="font-size: 1.5rem;"
          >
            <svg
              style="font-size: 1.5rem;"
            />
          </mock-styled.span>
          <mock-styled.span
            classname=""
            style="height: 24px; width: 100px;"
          >
            <svg
              style="height: 24px; width: 100px;"
            />
          </mock-styled.span>
          <mock-styled.span
            classname="mock-css.
  margin-left: auto;
 mock-css.
  margin-right: 0.375rem;
 mock-css.
  @media screen and (min-width: 768px) {
    height: 0;
    width: 0;
    visibility: hidden;
    padding: 0 !important;
    margin: 0 !important;
  }

  svg {
    height: 1.2rem;
  }
 mock-css."
            style="font-size: 1.2rem;"
          >
            <svg
              style="font-size: 1.2rem;"
            />
          </mock-styled.span>
        </mock-styled.a>
        <mock-styled.a
          classname=""
        >
          Home
        </mock-styled.a>
        <mock-styled.a
          classname="mock-css.
  @media screen and (min-width: 768px) {
    margin-left: auto;

    &:last-child {
      margin-right: 0;
    }
  }
"
        >
          <mock-styled.span
            classname=""
            style="font-size: 32px;"
          >
            <svg
              style="font-size: 32px;"
            />
          </mock-styled.span>
        </mock-styled.a>
      </mock-styled.nav>
      <div />
    </mock-styled.main>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;
