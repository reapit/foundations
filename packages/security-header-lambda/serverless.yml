service: cloud-security-header-lambda
plugins:
  - serverless-offline
  - serverless-deployment-bucket
  - serverless-lambda-edge-pre-existing-cloudfront
  - serverless-plugin-log-retention

custom:
  env: ${file(./config.json)}
  logRetentionInDays: 30

provider:
  name: aws
  runtime: ${opt:runtime, 'nodejs14.x' }
  stage: ${opt:stage, 'dev'}
  region: 'us-east-1'
  lambdaHashingVersion: '20201221'
  deploymentBucket:
    name: cloud-security-header-lambda-${opt:stage, 'dev'}
    blockPublicAccess: false

resources:
  Resources:
    IamRoleLambdaExecution:
      Type: 'AWS::IAM::Role'
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
                  - edgelambda.amazonaws.com
              Action: sts:AssumeRole

package:
  artifact: './dist/index.zip'

functions:
  securityHeaderLambda:
    handler: src/index.securityHeaderLambda
    events:
      - preExistingCloudFront:
          distributionId: ${self:custom.env.developerPortalCfDistId}
          eventType: origin-response
          pathPattern: '*'
          includeBody: false
          stage: ${opt:stage, 'dev'}
      - preExistingCloudFront:
          distributionId: ${self:custom.env.marketplaceCfDistId}
          eventType: origin-response
          pathPattern: '*'
          includeBody: false
          stage: ${opt:stage, 'dev'}
      - preExistingCloudFront:
          distributionId: ${self:custom.env.geoDiaryCfDistId}
          eventType: origin-response
          pathPattern: '*'
          includeBody: false
          stage: ${opt:stage, 'dev'}
      - preExistingCloudFront:
          distributionId: ${self:custom.env.amlCheckListCfDistId}
          eventType: origin-response
          pathPattern: '*'
          includeBody: false
          stage: ${opt:stage, 'dev'}
      - preExistingCloudFront:
          distributionId: ${self:custom.env.marketplaceManagementCfDistId}
          eventType: origin-response
          pathPattern: '*'
          includeBody: false
          stage: ${opt:stage, 'dev'}
      - preExistingCloudFront:
          distributionId: ${self:custom.env.developerAdminCfDistId}
          eventType: origin-response
          pathPattern: '*'
          includeBody: false
          stage: ${opt:stage, 'dev'}
      - preExistingCloudFront:
          distributionId: ${self:custom.env.dataWarehouseCfDistId}
          eventType: origin-response
          pathPattern: '*'
          includeBody: false
          stage: ${opt:stage, 'dev'}
      - preExistingCloudFront:
          distributionId: ${self:custom.env.paymentsCfDistId}
          eventType: origin-response
          pathPattern: '*'
          includeBody: false
          stage: ${opt:stage, 'dev'}
      - preExistingCloudFront:
          distributionId: ${self:custom.env.reapitConnectCfDistId}
          eventType: origin-response
          pathPattern: '*'
          includeBody: false
          stage: ${opt:stage, 'dev'}
      - preExistingCloudFront:
          distributionId: ${self:custom.env.insightsCfDistId}
          eventType: origin-response
          pathPattern: '*'
          includeBody: false
          stage: ${opt:stage, 'dev'}
      - preExistingCloudFront:
          distributionId: ${self:custom.env.paymentsPortalCfDistId}
          eventType: origin-response
          pathPattern: '*'
          includeBody: false
          stage: ${opt:stage, 'dev'}
      - preExistingCloudFront:
          distributionId: ${self:custom.env.mfaConfigCfDistId}
          eventType: origin-response
          pathPattern: '*'
          includeBody: false
          stage: ${opt:stage, 'dev'}
      - preExistingCloudFront:
          distributionId: ${self:custom.env.marketplaceAdminCfDistId}
          eventType: origin-response
          pathPattern: '*'
          includeBody: false
          stage: ${opt:stage, 'dev'}
