// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ImageCropperWithInput should match snapshots with multiple conditions 1`] = `
{
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <div
        class="mocked-styled-140 el-file-input-wrap"
      >
        <div
          class="el-flex-container el-flex-align-center"
        >
          <button
            class="el-mr4 el-intent-neutral el-button"
            type="button"
          >
            <div
              class="mocked-styled-0 el-button-loader"
            />
            Upload
          </button>
          <input
            class="mocked-styled-139 el-file-input"
            type="file"
          />
          <input
            class="mocked-styled-142 el-file-input-hidden"
            id="test-static-id"
            name="inputImage"
            value=""
          />
          <small
            class="el-text-base el-small-text el-has-grey-text el-has-no-margin"
          >
            Upload File
          </small>
        </div>
      </div>
    </div>
  </body>,
  "container": <div>
    <div
      class="mocked-styled-140 el-file-input-wrap"
    >
      <div
        class="el-flex-container el-flex-align-center"
      >
        <button
          class="el-mr4 el-intent-neutral el-button"
          type="button"
        >
          <div
            class="mocked-styled-0 el-button-loader"
          />
          Upload
        </button>
        <input
          class="mocked-styled-139 el-file-input"
          type="file"
        />
        <input
          class="mocked-styled-142 el-file-input-hidden"
          id="test-static-id"
          name="inputImage"
          value=""
        />
        <small
          class="el-text-base el-small-text el-has-grey-text el-has-no-margin"
        >
          Upload File
        </small>
      </div>
    </div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`ImageCropperWithInput should match snapshots with multiple conditions 2`] = `
{
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <div
        class="mocked-styled-140 el-file-input-wrap"
      >
        <div
          class="el-flex-container el-flex-align-center"
        >
          <button
            class="el-mr4 el-intent-neutral el-button"
            type="button"
          >
            <div
              class="mocked-styled-0 el-button-loader"
            />
            Upload
          </button>
          <input
            class="mocked-styled-139 el-file-input"
            type="file"
          />
          <input
            class="mocked-styled-142 el-file-input-hidden"
            id="test-static-id"
            name="inputImage"
            value=""
          />
          <small
            class="el-text-base el-small-text el-has-grey-text el-has-no-margin"
          >
            Upload File
          </small>
        </div>
      </div>
    </div>
    <div>
      <div
        class="mocked-styled-140 el-file-input-wrap"
      >
        <div
          class="el-flex-container el-flex-align-center"
        >
          <button
            class="el-mr4 el-intent-neutral el-button"
            type="button"
          >
            <div
              class="mocked-styled-0 el-button-loader"
            />
            Upload
          </button>
          <input
            class="mocked-styled-139 el-file-input"
            type="file"
          />
          <input
            class="mocked-styled-142 el-file-input-hidden"
            id="test-static-id"
            name="inputImage"
            value=""
          />
          <small
            class="el-text-base el-small-text el-has-grey-text el-has-no-margin"
          >
            Upload File
          </small>
        </div>
      </div>
    </div>
  </body>,
  "container": <div>
    <div
      class="mocked-styled-140 el-file-input-wrap"
    >
      <div
        class="el-flex-container el-flex-align-center"
      >
        <button
          class="el-mr4 el-intent-neutral el-button"
          type="button"
        >
          <div
            class="mocked-styled-0 el-button-loader"
          />
          Upload
        </button>
        <input
          class="mocked-styled-139 el-file-input"
          type="file"
        />
        <input
          class="mocked-styled-142 el-file-input-hidden"
          id="test-static-id"
          name="inputImage"
          value=""
        />
        <small
          class="el-text-base el-small-text el-has-grey-text el-has-no-margin"
        >
          Upload File
        </small>
      </div>
    </div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;
