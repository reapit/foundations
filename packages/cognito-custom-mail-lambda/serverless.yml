service: cloud-custom-mailer
plugins:
  - serverless-webpack
  - serverless-offline
  - serverless-deployment-bucket
  - serverless-plugin-log-retention

custom:
  s3CloudFormBucket: cloud-custom-mailer-${opt:stage, 'dev'}
  env: ${file(./config.json)}
  webpack:
    webpackConfig: 'webpack.config.js'
    includeModules: true
    packager: 'yarn'
    packagerOptions:
      noFrozenLockfile: false
    excludeFiles: src/**/*.test.ts
    keepOutputDirectory: true
  logRetentionInDays: 30

provider:
  name: aws
  runtime: 'nodejs18.x'
  stage: ${opt:stage, 'dev'}
  region: eu-west-2
  deploymentBucket:
    name: ${self:custom.s3CloudFormBucket}
  vpc:
    securityGroupIds:
      - Fn::ImportValue:
          Fn::Join:
            - ""
            -  - 'rpt-paas-'
               - ${self:provider.stage}
               - '-sg-LambdaSecurityGroup'
    subnetIds:
      - Fn::ImportValue:
          Fn::Join:
            - ""
            -  - 'rpt-paas-'
               - ${self:provider.stage}
               - '-vpc-PrivateSubnet1'
      - Fn::ImportValue:
          Fn::Join:
            - ""
            -  - 'rpt-paas-'
               - ${self:provider.stage}
               - '-vpc-PrivateSubnet2'
      - Fn::ImportValue:
          Fn::Join:
            - ""
            -  - 'rpt-paas-'
               - ${self:provider.stage}
               - '-vpc-PrivateSubnet3'
  environment:
    COGNITO_USERPOOL_ID: ${self:custom.env.COGNITO_USERPOOL_ID}
    MARKET_PLACE_URL: ${self:custom.env.MARKET_PLACE_URL}
    INTERNAL_ORG_SERVICE_URL: ${self:custom.env.INTERNAL_ORG_SERVICE_URL}
    AGENTBOX_URL: ${self:custom.env.AGENTBOX_URL}

package:
  include:
    - dist/**
  exclude:
    - .git/**
    - .github/**
    - .serverless/**
    - src/**
    - coverage/**
    - .gitignore
    - package.json
    - jest.config.js
    - README.md
    - serverless.yml
    - config.example.json
    - tsconfig.json
    - yarn.lock
    - .snyk

functions:
  cognitoCustomMailerHandler:
    handler: src/app.cognitoCustomMailerHandler
    events:
      - CognitoUserPool:
        pool: ${self:custom.env.COGNITO_USERPOOL_ID}
        trigger: CustomMessage
        existing: true
