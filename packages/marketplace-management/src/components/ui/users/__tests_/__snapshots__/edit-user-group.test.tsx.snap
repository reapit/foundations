// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`EditUserGroupForm should match a snapshot where there is data 1`] = `
{
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <form
        class="el-p8"
      >
        <mock-styled.h2
          classname="el-text-base"
        >
          Edit User Group
        </mock-styled.h2>
        <mock-styled.p
          classname="el-text-base el-has-grey-text el-has-section-margin"
        >
          The list below contains all available member groups for your organisation. You can manage users associated to each group by selecting them from the list below.
        </mock-styled.p>
        <mock-styled.div
          classname="el-form-layout-has-margin el-fade-in"
        >
          <mock-styled.div>
            <mock-styled.div
              classname="el-mb3"
            >
              <mock-styled.input
                classname=""
                id="test-static-id"
                placeholder="Search"
              />
              <mock-styled.span
                classname=""
                role="img"
                style="font-size: 1rem;"
              >
                <svg
                  fill="none"
                  height="1em"
                  style="font-size: 1rem;"
                  viewBox="0 0 20 20"
                  width="1em"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <path
                    d="m19.756 18.578-5.688-5.687a7.88 7.88 0 0 0 1.765-4.973C15.833 3.553 12.281 0 7.917 0S0 3.553 0 7.918s3.552 7.916 7.917 7.916a7.88 7.88 0 0 0 4.973-1.765l5.687 5.688a.83.83 0 0 0 1.179 0 .83.83 0 0 0 0-1.179m-11.84-4.41a6.256 6.256 0 0 1-6.25-6.25 6.256 6.256 0 0 1 6.25-6.25 6.256 6.256 0 0 1 6.25 6.25 6.256 6.256 0 0 1-6.25 6.25"
                    fill="currentColor"
                  />
                </svg>
              </mock-styled.span>
              <mock-styled.label
                htmlfor="test-static-id"
              >
                Users
              </mock-styled.label>
            </mock-styled.div>
            <mock-styled.div
              aria-controls=":r0:"
              aria-haspopup="listbox"
              role="combobox"
            >
              <mock-styled.input
                id="user-groups-ids-MarketplaceAdmin"
                name="userIds"
              />
              <mock-styled.div
                classname=""
              >
                <mock-styled.input
                  id="test-static-id"
                  type="checkbox"
                />
                <mock-styled.label
                  classname=""
                  htmlfor="test-static-id"
                />
                <mock-styled.input
                  id="test-static-id"
                  type="checkbox"
                />
                <mock-styled.label
                  classname=""
                  htmlfor="test-static-id"
                />
                <mock-styled.input
                  id="test-static-id"
                  type="checkbox"
                />
                <mock-styled.label
                  classname=""
                  htmlfor="test-static-id"
                />
              </mock-styled.div>
            </mock-styled.div>
          </mock-styled.div>
        </mock-styled.div>
        <mock-styled.div>
          <mock-styled.div
            classname="el-button-group-align-right"
          >
            <mock-styled.button
              classname="el-intent-neutral"
              type="button"
            >
              <mock-styled.div />
              Cancel
            </mock-styled.button>
            <mock-styled.button
              classname="el-intent-primary"
              type="submit"
            >
              <mock-styled.div />
              Submit
            </mock-styled.button>
          </mock-styled.div>
        </mock-styled.div>
      </form>
    </div>
  </body>,
  "container": <div>
    <form
      class="el-p8"
    >
      <mock-styled.h2
        classname="el-text-base"
      >
        Edit User Group
      </mock-styled.h2>
      <mock-styled.p
        classname="el-text-base el-has-grey-text el-has-section-margin"
      >
        The list below contains all available member groups for your organisation. You can manage users associated to each group by selecting them from the list below.
      </mock-styled.p>
      <mock-styled.div
        classname="el-form-layout-has-margin el-fade-in"
      >
        <mock-styled.div>
          <mock-styled.div
            classname="el-mb3"
          >
            <mock-styled.input
              classname=""
              id="test-static-id"
              placeholder="Search"
            />
            <mock-styled.span
              classname=""
              role="img"
              style="font-size: 1rem;"
            >
              <svg
                fill="none"
                height="1em"
                style="font-size: 1rem;"
                viewBox="0 0 20 20"
                width="1em"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="m19.756 18.578-5.688-5.687a7.88 7.88 0 0 0 1.765-4.973C15.833 3.553 12.281 0 7.917 0S0 3.553 0 7.918s3.552 7.916 7.917 7.916a7.88 7.88 0 0 0 4.973-1.765l5.687 5.688a.83.83 0 0 0 1.179 0 .83.83 0 0 0 0-1.179m-11.84-4.41a6.256 6.256 0 0 1-6.25-6.25 6.256 6.256 0 0 1 6.25-6.25 6.256 6.256 0 0 1 6.25 6.25 6.256 6.256 0 0 1-6.25 6.25"
                  fill="currentColor"
                />
              </svg>
            </mock-styled.span>
            <mock-styled.label
              htmlfor="test-static-id"
            >
              Users
            </mock-styled.label>
          </mock-styled.div>
          <mock-styled.div
            aria-controls=":r0:"
            aria-haspopup="listbox"
            role="combobox"
          >
            <mock-styled.input
              id="user-groups-ids-MarketplaceAdmin"
              name="userIds"
            />
            <mock-styled.div
              classname=""
            >
              <mock-styled.input
                id="test-static-id"
                type="checkbox"
              />
              <mock-styled.label
                classname=""
                htmlfor="test-static-id"
              />
              <mock-styled.input
                id="test-static-id"
                type="checkbox"
              />
              <mock-styled.label
                classname=""
                htmlfor="test-static-id"
              />
              <mock-styled.input
                id="test-static-id"
                type="checkbox"
              />
              <mock-styled.label
                classname=""
                htmlfor="test-static-id"
              />
            </mock-styled.div>
          </mock-styled.div>
        </mock-styled.div>
      </mock-styled.div>
      <mock-styled.div>
        <mock-styled.div
          classname="el-button-group-align-right"
        >
          <mock-styled.button
            classname="el-intent-neutral"
            type="button"
          >
            <mock-styled.div />
            Cancel
          </mock-styled.button>
          <mock-styled.button
            classname="el-intent-primary"
            type="submit"
          >
            <mock-styled.div />
            Submit
          </mock-styled.button>
        </mock-styled.div>
      </mock-styled.div>
    </form>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;
