// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`OfficesPage should match a snapshot for the office groups tab 1`] = `
{
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <mock-styled.div />
      <mock-styled.div
        classname="mock-css.
  flex: 1 1 auto;
"
      >
        <mock-styled.aside
          classname=""
        >
          <mock-styled.div>
            <mock-styled.div
              classname=""
            >
              Offices
            </mock-styled.div>
            <mock-styled.div
              classname=""
            >
              Office Groups
            </mock-styled.div>
          </mock-styled.div>
          <mock-styled.span
            classname="mock-css.
  margin-bottom: 0.75rem;
 mock-css.
  font-size: 5rem;
"
          >
            <svg />
          </mock-styled.span>
          <mock-styled.p
            classname="mock-css."
          >
            You can create an office group with this wizard. If you want to update the information later, refer to the office groups page.
          </mock-styled.p>
          <div
            class="mock-css.
  margin-bottom: 0.75rem;
"
          >
            <mock-styled.p
              classname=""
            >
              Organisations
            </mock-styled.p>
            <mock-styled.p
              classname="mock-css."
            >
              You are an admin for multiple organisations - select from the list below for data specific to one of these organisations
            </mock-styled.p>
            <mock-styled.div
              classname="mock-css.
  border-radius: 0.25rem;
"
            >
              <mock-styled.div>
                <mock-styled.select
                  classname="mock-css.
  width: 100%;
"
                  value="SOME_ID"
                >
                  <option
                    value=""
                  >
                    Please Select
                  </option>
                  <option
                    value="value"
                  >
                    name
                  </option>
                  <option
                    value="value"
                  >
                    name
                  </option>
                </mock-styled.select>
                <mock-styled.label
                  htmlfor="myId"
                >
                  Select Organisation
                </mock-styled.label>
              </mock-styled.div>
            </mock-styled.div>
          </div>
        </mock-styled.aside>
        <mock-styled.section
          classname="mock-css.
  height: 100%;
"
        >
          <mock-styled.div
            classname="mock-css.
  justify-content: space-between;
"
          >
            <mock-styled.h1
              classname=""
            >
              SOME_NAME
               Offices
            </mock-styled.h1>
          </mock-styled.div>
          <form>
            <mock-styled.div
              classname="mock-css. mock-css.
  @keyframes fade-in {
    from {
      opacity: 0;
    }

    to {
      opacity: 1;
    }
  }
  animation-duration: 0.5s;
  animation-fill-mode: both;
  animation-delay: 0.1s;
  animation-name: fade-in;
"
            >
              <mock-styled.div>
                <mock-styled.div>
                  <mock-styled.input
                    classname=""
                    id="test-static-id"
                    name="name"
                    placeholder="Search for an office"
                  />
                  <mock-styled.label
                    htmlfor="test-static-id"
                  >
                    Search
                  </mock-styled.label>
                </mock-styled.div>
              </mock-styled.div>
              <mock-styled.div>
                <mock-styled.div
                  classname="mock-css.
  flex-grow: 1;
 mock-css.
  align-items: flex-end;
 mock-css.
  height: 100%;
"
                >
                  <mock-styled.div>
                    <mock-styled.div
                      classname="mock-css."
                    >
                      <mock-styled.button
                        classname="mock-css."
                        type="submit"
                      >
                        <mock-styled.div />
                        Search
                      </mock-styled.button>
                    </mock-styled.div>
                  </mock-styled.div>
                </mock-styled.div>
              </mock-styled.div>
            </mock-styled.div>
          </form>
          <mock-styled.div
            classname=""
          >
            <mock-styled.div>
              <mock-styled.div />
            </mock-styled.div>
          </mock-styled.div>
        </mock-styled.section>
      </mock-styled.div>
    </div>
  </body>,
  "container": <div>
    <mock-styled.div />
    <mock-styled.div
      classname="mock-css.
  flex: 1 1 auto;
"
    >
      <mock-styled.aside
        classname=""
      >
        <mock-styled.div>
          <mock-styled.div
            classname=""
          >
            Offices
          </mock-styled.div>
          <mock-styled.div
            classname=""
          >
            Office Groups
          </mock-styled.div>
        </mock-styled.div>
        <mock-styled.span
          classname="mock-css.
  margin-bottom: 0.75rem;
 mock-css.
  font-size: 5rem;
"
        >
          <svg />
        </mock-styled.span>
        <mock-styled.p
          classname="mock-css."
        >
          You can create an office group with this wizard. If you want to update the information later, refer to the office groups page.
        </mock-styled.p>
        <div
          class="mock-css.
  margin-bottom: 0.75rem;
"
        >
          <mock-styled.p
            classname=""
          >
            Organisations
          </mock-styled.p>
          <mock-styled.p
            classname="mock-css."
          >
            You are an admin for multiple organisations - select from the list below for data specific to one of these organisations
          </mock-styled.p>
          <mock-styled.div
            classname="mock-css.
  border-radius: 0.25rem;
"
          >
            <mock-styled.div>
              <mock-styled.select
                classname="mock-css.
  width: 100%;
"
                value="SOME_ID"
              >
                <option
                  value=""
                >
                  Please Select
                </option>
                <option
                  value="value"
                >
                  name
                </option>
                <option
                  value="value"
                >
                  name
                </option>
              </mock-styled.select>
              <mock-styled.label
                htmlfor="myId"
              >
                Select Organisation
              </mock-styled.label>
            </mock-styled.div>
          </mock-styled.div>
        </div>
      </mock-styled.aside>
      <mock-styled.section
        classname="mock-css.
  height: 100%;
"
      >
        <mock-styled.div
          classname="mock-css.
  justify-content: space-between;
"
        >
          <mock-styled.h1
            classname=""
          >
            SOME_NAME
             Offices
          </mock-styled.h1>
        </mock-styled.div>
        <form>
          <mock-styled.div
            classname="mock-css. mock-css.
  @keyframes fade-in {
    from {
      opacity: 0;
    }

    to {
      opacity: 1;
    }
  }
  animation-duration: 0.5s;
  animation-fill-mode: both;
  animation-delay: 0.1s;
  animation-name: fade-in;
"
          >
            <mock-styled.div>
              <mock-styled.div>
                <mock-styled.input
                  classname=""
                  id="test-static-id"
                  name="name"
                  placeholder="Search for an office"
                />
                <mock-styled.label
                  htmlfor="test-static-id"
                >
                  Search
                </mock-styled.label>
              </mock-styled.div>
            </mock-styled.div>
            <mock-styled.div>
              <mock-styled.div
                classname="mock-css.
  flex-grow: 1;
 mock-css.
  align-items: flex-end;
 mock-css.
  height: 100%;
"
              >
                <mock-styled.div>
                  <mock-styled.div
                    classname="mock-css."
                  >
                    <mock-styled.button
                      classname="mock-css."
                      type="submit"
                    >
                      <mock-styled.div />
                      Search
                    </mock-styled.button>
                  </mock-styled.div>
                </mock-styled.div>
              </mock-styled.div>
            </mock-styled.div>
          </mock-styled.div>
        </form>
        <mock-styled.div
          classname=""
        >
          <mock-styled.div>
            <mock-styled.div />
          </mock-styled.div>
        </mock-styled.div>
      </mock-styled.section>
    </mock-styled.div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`OfficesPage should match a snapshot for the office new tab 1`] = `
{
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <mock-styled.div />
      <mock-styled.div
        classname="mock-css.
  flex: 1 1 auto;
"
      >
        <mock-styled.aside
          classname=""
        >
          <mock-styled.div>
            <mock-styled.div
              classname=""
            >
              Offices
            </mock-styled.div>
            <mock-styled.div
              classname=""
            >
              Office Groups
            </mock-styled.div>
          </mock-styled.div>
          <mock-styled.span
            classname="mock-css.
  margin-bottom: 0.75rem;
 mock-css.
  font-size: 5rem;
"
          >
            <svg />
          </mock-styled.span>
          <mock-styled.p
            classname="mock-css."
          >
            You can create an office group with this wizard. If you want to update the information later, refer to the office groups page.
          </mock-styled.p>
          <div
            class="mock-css.
  margin-bottom: 0.75rem;
"
          >
            <mock-styled.p
              classname=""
            >
              Organisations
            </mock-styled.p>
            <mock-styled.p
              classname="mock-css."
            >
              You are an admin for multiple organisations - select from the list below for data specific to one of these organisations
            </mock-styled.p>
            <mock-styled.div
              classname="mock-css.
  border-radius: 0.25rem;
"
            >
              <mock-styled.div>
                <mock-styled.select
                  classname="mock-css.
  width: 100%;
"
                  value="SOME_ID"
                >
                  <option
                    value=""
                  >
                    Please Select
                  </option>
                  <option
                    value="value"
                  >
                    name
                  </option>
                  <option
                    value="value"
                  >
                    name
                  </option>
                </mock-styled.select>
                <mock-styled.label
                  htmlfor="myId"
                >
                  Select Organisation
                </mock-styled.label>
              </mock-styled.div>
            </mock-styled.div>
          </div>
        </mock-styled.aside>
        <mock-styled.section
          classname="mock-css.
  height: 100%;
"
        >
          <mock-styled.div
            classname="mock-css.
  justify-content: space-between;
"
          >
            <mock-styled.h1
              classname=""
            >
              SOME_NAME
               Offices
            </mock-styled.h1>
          </mock-styled.div>
          <form>
            <mock-styled.div
              classname="mock-css. mock-css.
  @keyframes fade-in {
    from {
      opacity: 0;
    }

    to {
      opacity: 1;
    }
  }
  animation-duration: 0.5s;
  animation-fill-mode: both;
  animation-delay: 0.1s;
  animation-name: fade-in;
"
            >
              <mock-styled.div>
                <mock-styled.div>
                  <mock-styled.input
                    classname=""
                    id="test-static-id"
                    name="name"
                    placeholder="Search for an office"
                  />
                  <mock-styled.label
                    htmlfor="test-static-id"
                  >
                    Search
                  </mock-styled.label>
                </mock-styled.div>
              </mock-styled.div>
              <mock-styled.div>
                <mock-styled.div
                  classname="mock-css.
  flex-grow: 1;
 mock-css.
  align-items: flex-end;
 mock-css.
  height: 100%;
"
                >
                  <mock-styled.div>
                    <mock-styled.div
                      classname="mock-css."
                    >
                      <mock-styled.button
                        classname="mock-css."
                        type="submit"
                      >
                        <mock-styled.div />
                        Search
                      </mock-styled.button>
                    </mock-styled.div>
                  </mock-styled.div>
                </mock-styled.div>
              </mock-styled.div>
            </mock-styled.div>
          </form>
          <mock-styled.div
            classname=""
          >
            <mock-styled.div>
              <mock-styled.div />
            </mock-styled.div>
          </mock-styled.div>
        </mock-styled.section>
      </mock-styled.div>
    </div>
  </body>,
  "container": <div>
    <mock-styled.div />
    <mock-styled.div
      classname="mock-css.
  flex: 1 1 auto;
"
    >
      <mock-styled.aside
        classname=""
      >
        <mock-styled.div>
          <mock-styled.div
            classname=""
          >
            Offices
          </mock-styled.div>
          <mock-styled.div
            classname=""
          >
            Office Groups
          </mock-styled.div>
        </mock-styled.div>
        <mock-styled.span
          classname="mock-css.
  margin-bottom: 0.75rem;
 mock-css.
  font-size: 5rem;
"
        >
          <svg />
        </mock-styled.span>
        <mock-styled.p
          classname="mock-css."
        >
          You can create an office group with this wizard. If you want to update the information later, refer to the office groups page.
        </mock-styled.p>
        <div
          class="mock-css.
  margin-bottom: 0.75rem;
"
        >
          <mock-styled.p
            classname=""
          >
            Organisations
          </mock-styled.p>
          <mock-styled.p
            classname="mock-css."
          >
            You are an admin for multiple organisations - select from the list below for data specific to one of these organisations
          </mock-styled.p>
          <mock-styled.div
            classname="mock-css.
  border-radius: 0.25rem;
"
          >
            <mock-styled.div>
              <mock-styled.select
                classname="mock-css.
  width: 100%;
"
                value="SOME_ID"
              >
                <option
                  value=""
                >
                  Please Select
                </option>
                <option
                  value="value"
                >
                  name
                </option>
                <option
                  value="value"
                >
                  name
                </option>
              </mock-styled.select>
              <mock-styled.label
                htmlfor="myId"
              >
                Select Organisation
              </mock-styled.label>
            </mock-styled.div>
          </mock-styled.div>
        </div>
      </mock-styled.aside>
      <mock-styled.section
        classname="mock-css.
  height: 100%;
"
      >
        <mock-styled.div
          classname="mock-css.
  justify-content: space-between;
"
        >
          <mock-styled.h1
            classname=""
          >
            SOME_NAME
             Offices
          </mock-styled.h1>
        </mock-styled.div>
        <form>
          <mock-styled.div
            classname="mock-css. mock-css.
  @keyframes fade-in {
    from {
      opacity: 0;
    }

    to {
      opacity: 1;
    }
  }
  animation-duration: 0.5s;
  animation-fill-mode: both;
  animation-delay: 0.1s;
  animation-name: fade-in;
"
          >
            <mock-styled.div>
              <mock-styled.div>
                <mock-styled.input
                  classname=""
                  id="test-static-id"
                  name="name"
                  placeholder="Search for an office"
                />
                <mock-styled.label
                  htmlfor="test-static-id"
                >
                  Search
                </mock-styled.label>
              </mock-styled.div>
            </mock-styled.div>
            <mock-styled.div>
              <mock-styled.div
                classname="mock-css.
  flex-grow: 1;
 mock-css.
  align-items: flex-end;
 mock-css.
  height: 100%;
"
              >
                <mock-styled.div>
                  <mock-styled.div
                    classname="mock-css."
                  >
                    <mock-styled.button
                      classname="mock-css."
                      type="submit"
                    >
                      <mock-styled.div />
                      Search
                    </mock-styled.button>
                  </mock-styled.div>
                </mock-styled.div>
              </mock-styled.div>
            </mock-styled.div>
          </mock-styled.div>
        </form>
        <mock-styled.div
          classname=""
        >
          <mock-styled.div>
            <mock-styled.div />
          </mock-styled.div>
        </mock-styled.div>
      </mock-styled.section>
    </mock-styled.div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`OfficesPage should match a snapshot for the offices tab 1`] = `
{
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <mock-styled.div />
      <mock-styled.div
        classname="mock-css.
  flex: 1 1 auto;
"
      >
        <mock-styled.aside
          classname=""
        >
          <mock-styled.div>
            <mock-styled.div
              classname=""
            >
              Offices
            </mock-styled.div>
            <mock-styled.div
              classname=""
            >
              Office Groups
            </mock-styled.div>
          </mock-styled.div>
          <mock-styled.span
            classname="mock-css.
  margin-bottom: 0.75rem;
 mock-css.
  font-size: 5rem;
"
          >
            <svg />
          </mock-styled.span>
          <mock-styled.p
            classname="mock-css."
          >
            You can create an office group with this wizard. If you want to update the information later, refer to the office groups page.
          </mock-styled.p>
          <div
            class="mock-css.
  margin-bottom: 0.75rem;
"
          >
            <mock-styled.p
              classname=""
            >
              Organisations
            </mock-styled.p>
            <mock-styled.p
              classname="mock-css."
            >
              You are an admin for multiple organisations - select from the list below for data specific to one of these organisations
            </mock-styled.p>
            <mock-styled.div
              classname="mock-css.
  border-radius: 0.25rem;
"
            >
              <mock-styled.div>
                <mock-styled.select
                  classname="mock-css.
  width: 100%;
"
                  value="SOME_ID"
                >
                  <option
                    value=""
                  >
                    Please Select
                  </option>
                  <option
                    value="value"
                  >
                    name
                  </option>
                  <option
                    value="value"
                  >
                    name
                  </option>
                </mock-styled.select>
                <mock-styled.label
                  htmlfor="myId"
                >
                  Select Organisation
                </mock-styled.label>
              </mock-styled.div>
            </mock-styled.div>
          </div>
        </mock-styled.aside>
        <mock-styled.section
          classname="mock-css.
  height: 100%;
"
        >
          <mock-styled.div
            classname="mock-css.
  justify-content: space-between;
"
          >
            <mock-styled.h1
              classname=""
            >
              SOME_NAME
               Offices
            </mock-styled.h1>
          </mock-styled.div>
          <form>
            <mock-styled.div
              classname="mock-css. mock-css.
  @keyframes fade-in {
    from {
      opacity: 0;
    }

    to {
      opacity: 1;
    }
  }
  animation-duration: 0.5s;
  animation-fill-mode: both;
  animation-delay: 0.1s;
  animation-name: fade-in;
"
            >
              <mock-styled.div>
                <mock-styled.div>
                  <mock-styled.input
                    classname=""
                    id="test-static-id"
                    name="name"
                    placeholder="Search for an office"
                  />
                  <mock-styled.label
                    htmlfor="test-static-id"
                  >
                    Search
                  </mock-styled.label>
                </mock-styled.div>
              </mock-styled.div>
              <mock-styled.div>
                <mock-styled.div
                  classname="mock-css.
  flex-grow: 1;
 mock-css.
  align-items: flex-end;
 mock-css.
  height: 100%;
"
                >
                  <mock-styled.div>
                    <mock-styled.div
                      classname="mock-css."
                    >
                      <mock-styled.button
                        classname="mock-css."
                        type="submit"
                      >
                        <mock-styled.div />
                        Search
                      </mock-styled.button>
                    </mock-styled.div>
                  </mock-styled.div>
                </mock-styled.div>
              </mock-styled.div>
            </mock-styled.div>
          </form>
          <mock-styled.div
            classname=""
          >
            <mock-styled.div>
              <mock-styled.div />
            </mock-styled.div>
          </mock-styled.div>
        </mock-styled.section>
      </mock-styled.div>
    </div>
  </body>,
  "container": <div>
    <mock-styled.div />
    <mock-styled.div
      classname="mock-css.
  flex: 1 1 auto;
"
    >
      <mock-styled.aside
        classname=""
      >
        <mock-styled.div>
          <mock-styled.div
            classname=""
          >
            Offices
          </mock-styled.div>
          <mock-styled.div
            classname=""
          >
            Office Groups
          </mock-styled.div>
        </mock-styled.div>
        <mock-styled.span
          classname="mock-css.
  margin-bottom: 0.75rem;
 mock-css.
  font-size: 5rem;
"
        >
          <svg />
        </mock-styled.span>
        <mock-styled.p
          classname="mock-css."
        >
          You can create an office group with this wizard. If you want to update the information later, refer to the office groups page.
        </mock-styled.p>
        <div
          class="mock-css.
  margin-bottom: 0.75rem;
"
        >
          <mock-styled.p
            classname=""
          >
            Organisations
          </mock-styled.p>
          <mock-styled.p
            classname="mock-css."
          >
            You are an admin for multiple organisations - select from the list below for data specific to one of these organisations
          </mock-styled.p>
          <mock-styled.div
            classname="mock-css.
  border-radius: 0.25rem;
"
          >
            <mock-styled.div>
              <mock-styled.select
                classname="mock-css.
  width: 100%;
"
                value="SOME_ID"
              >
                <option
                  value=""
                >
                  Please Select
                </option>
                <option
                  value="value"
                >
                  name
                </option>
                <option
                  value="value"
                >
                  name
                </option>
              </mock-styled.select>
              <mock-styled.label
                htmlfor="myId"
              >
                Select Organisation
              </mock-styled.label>
            </mock-styled.div>
          </mock-styled.div>
        </div>
      </mock-styled.aside>
      <mock-styled.section
        classname="mock-css.
  height: 100%;
"
      >
        <mock-styled.div
          classname="mock-css.
  justify-content: space-between;
"
        >
          <mock-styled.h1
            classname=""
          >
            SOME_NAME
             Offices
          </mock-styled.h1>
        </mock-styled.div>
        <form>
          <mock-styled.div
            classname="mock-css. mock-css.
  @keyframes fade-in {
    from {
      opacity: 0;
    }

    to {
      opacity: 1;
    }
  }
  animation-duration: 0.5s;
  animation-fill-mode: both;
  animation-delay: 0.1s;
  animation-name: fade-in;
"
          >
            <mock-styled.div>
              <mock-styled.div>
                <mock-styled.input
                  classname=""
                  id="test-static-id"
                  name="name"
                  placeholder="Search for an office"
                />
                <mock-styled.label
                  htmlfor="test-static-id"
                >
                  Search
                </mock-styled.label>
              </mock-styled.div>
            </mock-styled.div>
            <mock-styled.div>
              <mock-styled.div
                classname="mock-css.
  flex-grow: 1;
 mock-css.
  align-items: flex-end;
 mock-css.
  height: 100%;
"
              >
                <mock-styled.div>
                  <mock-styled.div
                    classname="mock-css."
                  >
                    <mock-styled.button
                      classname="mock-css."
                      type="submit"
                    >
                      <mock-styled.div />
                      Search
                    </mock-styled.button>
                  </mock-styled.div>
                </mock-styled.div>
              </mock-styled.div>
            </mock-styled.div>
          </mock-styled.div>
        </form>
        <mock-styled.div
          classname=""
        >
          <mock-styled.div>
            <mock-styled.div />
          </mock-styled.div>
        </mock-styled.div>
      </mock-styled.section>
    </mock-styled.div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;
