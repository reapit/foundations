// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`AccountProvisionForm should match a snapshot 1`] = `
<Form
  className="form"
>
  <FormSection>
    <FormHeading>
      Account details
    </FormHeading>
    <FormSubHeading>
      The information below will be used to access your data warehouse account
    </FormSubHeading>
    <Input
      id="username"
      labelText="Username"
      name="username"
      placeholder="Your username here"
      type="text"
    />
    <Input
      id="password"
      labelText="Password"
      name="password"
      placeholder="*********"
      type="password"
    />
    <Input
      id="passwordConfirm"
      labelText="Confirm Password"
      name="passwordConfirm"
      placeholder="*********"
      type="password"
    />
    <LevelRight>
      <Button
        onClick={[MockFunction]}
        type="button"
        variant="secondary"
      >
        Cancel
      </Button>
      <Button
        type="submit"
        variant="primary"
      >
        Provision
      </Button>
    </LevelRight>
  </FormSection>
</Form>
`;

exports[`AccountProvisionModal should match a snapshot 1`] = `
<Modal
  afterClose={[MockFunction]}
  title="Provision Data Warehouse Account"
  visible={true}
>
  <Formik
    initialValues={
      Object {
        "devMode": false,
        "isAdmin": false,
        "organisationId": undefined,
        "organisationName": undefined,
        "password": "",
        "passwordConfirm": "",
        "username": "",
      }
    }
    onSubmit={[Function]}
    validationSchema={
      ObjectSchema {
        "_blacklist": RefSet {
          "list": Set {},
          "refs": Map {},
        },
        "_conditions": Array [],
        "_defaultDefault": [Function],
        "_deps": Array [],
        "_excludedEdges": Array [],
        "_exclusive": Object {},
        "_mutate": undefined,
        "_nodes": Array [
          "passwordConfirm",
          "password",
          "username",
        ],
        "_options": Object {
          "abortEarly": true,
          "recursive": true,
        },
        "_type": "object",
        "_typeError": [Function],
        "_whitelist": RefSet {
          "list": Set {},
          "refs": Map {},
        },
        "fields": Object {
          "password": StringSchema {
            "_blacklist": RefSet {
              "list": Set {},
              "refs": Map {},
            },
            "_conditions": Array [],
            "_deps": Array [],
            "_exclusive": Object {
              "matches": false,
              "required": true,
            },
            "_mutate": undefined,
            "_options": Object {
              "abortEarly": true,
              "recursive": true,
            },
            "_type": "string",
            "_typeError": [Function],
            "_whitelist": RefSet {
              "list": Set {},
              "refs": Map {},
            },
            "tests": Array [
              [Function],
              [Function],
            ],
            "transforms": Array [
              [Function],
            ],
            "type": "string",
          },
          "passwordConfirm": StringSchema {
            "_blacklist": RefSet {
              "list": Set {},
              "refs": Map {},
            },
            "_conditions": Array [],
            "_deps": Array [],
            "_exclusive": Object {
              "required": true,
            },
            "_mutate": undefined,
            "_options": Object {
              "abortEarly": true,
              "recursive": true,
            },
            "_type": "string",
            "_typeError": [Function],
            "_whitelist": RefSet {
              "list": Set {},
              "refs": Map {
                "password" => Reference {
                  "getter": [Function],
                  "isContext": false,
                  "isSibling": true,
                  "isValue": false,
                  "key": "password",
                  "map": undefined,
                  "path": "password",
                },
              },
            },
            "_whitelistError": [Function],
            "tests": Array [
              [Function],
            ],
            "transforms": Array [
              [Function],
            ],
            "type": "string",
          },
          "username": StringSchema {
            "_blacklist": RefSet {
              "list": Set {},
              "refs": Map {},
            },
            "_conditions": Array [],
            "_deps": Array [],
            "_exclusive": Object {
              "matches": false,
              "required": true,
            },
            "_mutate": undefined,
            "_options": Object {
              "abortEarly": true,
              "recursive": true,
            },
            "_type": "string",
            "_typeError": [Function],
            "_whitelist": RefSet {
              "list": Set {},
              "refs": Map {},
            },
            "tests": Array [
              [Function],
              [Function],
            ],
            "transforms": Array [
              [Function],
            ],
            "type": "string",
          },
        },
        "tests": Array [],
        "transforms": Array [
          [Function],
        ],
        "type": "object",
      }
    }
  >
    <AccountProvisionForm
      handleClose={[MockFunction]}
    />
  </Formik>
</Modal>
`;
