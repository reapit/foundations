// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`RuleCreateModal should match a snapshot 1`] = `
{
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <mock-styled.div />
      <form>
        <mock-styled.div
          classname="el-mb11"
        >
          <mock-styled.div>
            <mock-styled.div>
              <mock-styled.input
                classname=""
                id="test-static-id"
                name="name"
                placeholder="Enter rule name"
              />
              <mock-styled.label
                htmlfor="test-static-id"
              >
                Network Rule Name
              </mock-styled.label>
            </mock-styled.div>
          </mock-styled.div>
          <mock-styled.div>
            <mock-styled.label>
              Network Rule Enabled
            </mock-styled.label>
            <mock-styled.input
              id="rule-is-enabled-toggle"
              name="enabled"
              type="checkbox"
            />
            <mock-styled.label
              classname="el-has-grey-bg"
              htmlfor="rule-is-enabled-toggle"
            >
              <mock-styled.span>
                Yes
              </mock-styled.span>
              <mock-styled.span>
                No
              </mock-styled.span>
            </mock-styled.label>
          </mock-styled.div>
        </mock-styled.div>
        <mock-styled.div>
          <mock-styled.div
            classname="el-button-group-align-right"
          >
            <mock-styled.button
              classname="el-intent-neutral"
              type="button"
            >
              <mock-styled.div />
              Cancel
            </mock-styled.button>
            <mock-styled.button
              classname="el-intent-primary"
              type="submit"
            >
              <mock-styled.div />
              Create
            </mock-styled.button>
          </mock-styled.div>
        </mock-styled.div>
      </form>
    </div>
  </body>,
  "container": <div>
    <mock-styled.div />
    <form>
      <mock-styled.div
        classname="el-mb11"
      >
        <mock-styled.div>
          <mock-styled.div>
            <mock-styled.input
              classname=""
              id="test-static-id"
              name="name"
              placeholder="Enter rule name"
            />
            <mock-styled.label
              htmlfor="test-static-id"
            >
              Network Rule Name
            </mock-styled.label>
          </mock-styled.div>
        </mock-styled.div>
        <mock-styled.div>
          <mock-styled.label>
            Network Rule Enabled
          </mock-styled.label>
          <mock-styled.input
            id="rule-is-enabled-toggle"
            name="enabled"
            type="checkbox"
          />
          <mock-styled.label
            classname="el-has-grey-bg"
            htmlfor="rule-is-enabled-toggle"
          >
            <mock-styled.span>
              Yes
            </mock-styled.span>
            <mock-styled.span>
              No
            </mock-styled.span>
          </mock-styled.label>
        </mock-styled.div>
      </mock-styled.div>
      <mock-styled.div>
        <mock-styled.div
          classname="el-button-group-align-right"
        >
          <mock-styled.button
            classname="el-intent-neutral"
            type="button"
          >
            <mock-styled.div />
            Cancel
          </mock-styled.button>
          <mock-styled.button
            classname="el-intent-primary"
            type="submit"
          >
            <mock-styled.div />
            Create
          </mock-styled.button>
        </mock-styled.div>
      </mock-styled.div>
    </form>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;
