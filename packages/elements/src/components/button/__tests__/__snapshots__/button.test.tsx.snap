// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Button should match a snapshot 1`] = `
{
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <mock-styled.button
        classname="mock-css."
        disabled="false"
        type="submit"
      >
        button text
        <mock-styled.div />
      </mock-styled.button>
    </div>
  </body>,
  "container": <div>
    <mock-styled.button
      classname="mock-css."
      disabled="false"
      type="submit"
    >
      button text
      <mock-styled.div />
    </mock-styled.button>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`Button should match a snapshot 2`] = `
{
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <mock-styled.button
        classname="mock-css. mock-css."
        disabled="false"
        type="submit"
      >
        <mock-styled.span
          classname="mock-css. mock-css.
  font-size: 1.25rem;
"
        >
          <svg />
        </mock-styled.span>
        <mock-styled.div />
      </mock-styled.button>
    </div>
  </body>,
  "container": <div>
    <mock-styled.button
      classname="mock-css. mock-css."
      disabled="false"
      type="submit"
    >
      <mock-styled.span
        classname="mock-css. mock-css.
  font-size: 1.25rem;
"
      >
        <svg />
      </mock-styled.span>
      <mock-styled.div />
    </mock-styled.button>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`Button should match a snapshot with all modifiers 1`] = `
{
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <mock-styled.button
        classname="some-class mock-css. mock-css.
  background-size: 100%;
  background-position-x: 0.5rem;
  padding-left: ,rem;

  , {
    padding-left: 1.25rem;
  }

  &::before {
    content: '';
    position: absolute;
    height: 100%;
    width: 100%;
    top: 0;
    left: 0;
    background-image: url(',');
    background-size: contain;
    background-repeat: no-repeat;
    background-position: left;
  }

  &., {
    &::before {
      background-image: url(',');
    }
  }

  &., {
    &::before {
      background-image: url(',');
    }
  }

  &., {
    &::before {
      background-image: url(',');
    }
  }

  &., {
    &::before {
      background-image: url(',');
    }
  }

  &., {
    &::before {
      background-image: url(',');
    }
  }
 mock-css.
  background-size: 100%;
  background-position-x: -0.5rem;
  padding-right: ,rem;

  &., {
    background-size: 100%;
    background-position-x: center;

    padding-left: ,rem;
    padding-right: ,rem;

    &::after {
      right: -1rem;
    }

    &::before {
      left: -1rem;
    }
  }

  , {
    padding-right: 1.25rem;
  }

  &::after {
    content: '';
    position: absolute;
    height: 100%;
    width: 100%;
    top: 0;
    right: 0;
    background-image: url(',');
    background-size: contain;
    background-repeat: no-repeat;
    background-position: right;
  }

  &., {
    &::after {
      background-image: url(',');
    }
  }

  &., {
    &::after {
      background-image: url(',');
    }
  }

  &., {
    &::after {
      background-image: url(',');
    }
  }

  &., {
    &::after {
      background-image: url(',');
    }
  }

  &., {
    &::after {
      background-image: url(',');
    }
  }
 mock-css. mock-css."
        disabled="true"
        type="submit"
      >
        button text
        <mock-styled.div />
      </mock-styled.button>
    </div>
  </body>,
  "container": <div>
    <mock-styled.button
      classname="some-class mock-css. mock-css.
  background-size: 100%;
  background-position-x: 0.5rem;
  padding-left: ,rem;

  , {
    padding-left: 1.25rem;
  }

  &::before {
    content: '';
    position: absolute;
    height: 100%;
    width: 100%;
    top: 0;
    left: 0;
    background-image: url(',');
    background-size: contain;
    background-repeat: no-repeat;
    background-position: left;
  }

  &., {
    &::before {
      background-image: url(',');
    }
  }

  &., {
    &::before {
      background-image: url(',');
    }
  }

  &., {
    &::before {
      background-image: url(',');
    }
  }

  &., {
    &::before {
      background-image: url(',');
    }
  }

  &., {
    &::before {
      background-image: url(',');
    }
  }
 mock-css.
  background-size: 100%;
  background-position-x: -0.5rem;
  padding-right: ,rem;

  &., {
    background-size: 100%;
    background-position-x: center;

    padding-left: ,rem;
    padding-right: ,rem;

    &::after {
      right: -1rem;
    }

    &::before {
      left: -1rem;
    }
  }

  , {
    padding-right: 1.25rem;
  }

  &::after {
    content: '';
    position: absolute;
    height: 100%;
    width: 100%;
    top: 0;
    right: 0;
    background-image: url(',');
    background-size: contain;
    background-repeat: no-repeat;
    background-position: right;
  }

  &., {
    &::after {
      background-image: url(',');
    }
  }

  &., {
    &::after {
      background-image: url(',');
    }
  }

  &., {
    &::after {
      background-image: url(',');
    }
  }

  &., {
    &::after {
      background-image: url(',');
    }
  }

  &., {
    &::after {
      background-image: url(',');
    }
  }
 mock-css. mock-css."
      disabled="true"
      type="submit"
    >
      button text
      <mock-styled.div />
    </mock-styled.button>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`ButtonGroup should match a snapshot for align center 1`] = `
{
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <mock-styled.div>
        <mock-styled.div
          classname="mock-css."
        >
          <mock-styled.button
            classname=""
          >
            1
            <mock-styled.div />
          </mock-styled.button>
          <mock-styled.button
            classname=""
          >
            2
            <mock-styled.div />
          </mock-styled.button>
          <mock-styled.button
            classname=""
          >
            3
            <mock-styled.div />
          </mock-styled.button>
        </mock-styled.div>
      </mock-styled.div>
    </div>
  </body>,
  "container": <div>
    <mock-styled.div>
      <mock-styled.div
        classname="mock-css."
      >
        <mock-styled.button
          classname=""
        >
          1
          <mock-styled.div />
        </mock-styled.button>
        <mock-styled.button
          classname=""
        >
          2
          <mock-styled.div />
        </mock-styled.button>
        <mock-styled.button
          classname=""
        >
          3
          <mock-styled.div />
        </mock-styled.button>
      </mock-styled.div>
    </mock-styled.div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`ButtonGroup should match a snapshot for align left 1`] = `
{
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <mock-styled.div>
        <mock-styled.div
          classname="mock-css."
        >
          <mock-styled.button
            classname=""
          >
            1
            <mock-styled.div />
          </mock-styled.button>
          <mock-styled.button
            classname=""
          >
            2
            <mock-styled.div />
          </mock-styled.button>
          <mock-styled.button
            classname=""
          >
            3
            <mock-styled.div />
          </mock-styled.button>
        </mock-styled.div>
      </mock-styled.div>
    </div>
  </body>,
  "container": <div>
    <mock-styled.div>
      <mock-styled.div
        classname="mock-css."
      >
        <mock-styled.button
          classname=""
        >
          1
          <mock-styled.div />
        </mock-styled.button>
        <mock-styled.button
          classname=""
        >
          2
          <mock-styled.div />
        </mock-styled.button>
        <mock-styled.button
          classname=""
        >
          3
          <mock-styled.div />
        </mock-styled.button>
      </mock-styled.div>
    </mock-styled.div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`ButtonGroup should match a snapshot for align right 1`] = `
{
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <mock-styled.div>
        <mock-styled.div
          classname="mock-css."
        >
          <mock-styled.button
            classname=""
          >
            1
            <mock-styled.div />
          </mock-styled.button>
          <mock-styled.button
            classname=""
          >
            2
            <mock-styled.div />
          </mock-styled.button>
          <mock-styled.button
            classname=""
          >
            3
            <mock-styled.div />
          </mock-styled.button>
        </mock-styled.div>
      </mock-styled.div>
    </div>
  </body>,
  "container": <div>
    <mock-styled.div>
      <mock-styled.div
        classname="mock-css."
      >
        <mock-styled.button
          classname=""
        >
          1
          <mock-styled.div />
        </mock-styled.button>
        <mock-styled.button
          classname=""
        >
          2
          <mock-styled.div />
        </mock-styled.button>
        <mock-styled.button
          classname=""
        >
          3
          <mock-styled.div />
        </mock-styled.button>
      </mock-styled.div>
    </mock-styled.div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;
