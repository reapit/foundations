// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`FileInput component should match a snapshot 1`] = `
{
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <mock-styled.div>
        <mock-styled.div
          classname="mock-css.
  align-items: center;
"
        >
          <mock-styled.button
            classname="mock-css.
  margin-right: 0.625rem;
 mock-css."
            type="button"
          >
            <mock-styled.div />
            Upload
          </mock-styled.button>
          <mock-styled.input
            data-testid="el-file-input"
            type="file"
          />
          <mock-styled.input
            id="test-static-id"
          />
          <mock-styled.p
            classname="mock-css. mock-css."
          >
            Upload File
          </mock-styled.p>
        </mock-styled.div>
      </mock-styled.div>
    </div>
  </body>,
  "container": <div>
    <mock-styled.div>
      <mock-styled.div
        classname="mock-css.
  align-items: center;
"
      >
        <mock-styled.button
          classname="mock-css.
  margin-right: 0.625rem;
 mock-css."
          type="button"
        >
          <mock-styled.div />
          Upload
        </mock-styled.button>
        <mock-styled.input
          data-testid="el-file-input"
          type="file"
        />
        <mock-styled.input
          id="test-static-id"
        />
        <mock-styled.p
          classname="mock-css. mock-css."
        >
          Upload File
        </mock-styled.p>
      </mock-styled.div>
    </mock-styled.div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`FileInput component should match a snapshot with full props 1`] = `
{
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <mock-styled.div>
        <mock-styled.label>
          Some Label
        </mock-styled.label>
        <mock-styled.div
          classname="mock-css.
  align-items: center;
"
        >
          <mock-styled.button
            classname="mock-css.
  margin-right: 0.625rem;
 mock-css."
            type="button"
          >
            <mock-styled.div />
            Change
          </mock-styled.button>
          <mock-styled.input
            data-testid="el-file-input"
            type="file"
          />
          <mock-styled.input
            id="test-static-id"
          />
          <mock-styled.div>
            <mock-styled.span
              classname="mock-css.
  margin-right: 0.625rem;
 mock-css."
            >
              <svg />
            </mock-styled.span>
            <mock-styled.span
              classname="mock-css.
  margin-right: 0.625rem;
 mock-css."
            >
              <svg />
            </mock-styled.span>
          </mock-styled.div>
        </mock-styled.div>
      </mock-styled.div>
    </div>
  </body>,
  "container": <div>
    <mock-styled.div>
      <mock-styled.label>
        Some Label
      </mock-styled.label>
      <mock-styled.div
        classname="mock-css.
  align-items: center;
"
      >
        <mock-styled.button
          classname="mock-css.
  margin-right: 0.625rem;
 mock-css."
          type="button"
        >
          <mock-styled.div />
          Change
        </mock-styled.button>
        <mock-styled.input
          data-testid="el-file-input"
          type="file"
        />
        <mock-styled.input
          id="test-static-id"
        />
        <mock-styled.div>
          <mock-styled.span
            classname="mock-css.
  margin-right: 0.625rem;
 mock-css."
          >
            <svg />
          </mock-styled.span>
          <mock-styled.span
            classname="mock-css.
  margin-right: 0.625rem;
 mock-css."
          >
            <svg />
          </mock-styled.span>
        </mock-styled.div>
      </mock-styled.div>
    </mock-styled.div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;
