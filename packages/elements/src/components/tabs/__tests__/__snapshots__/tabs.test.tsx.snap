// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Tabs should match a snapshot and render children 1`] = `
{
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <mock-styled.div
        classname="mock-css.
  width: 100%;
  justify-content: space-evenly;
"
      >
        <mock-styled.div>
          <mock-styled.input
            id="option-1"
            name="my-cool-toggle-radio"
            type="radio"
            value="option-1"
          />
          <mock-styled.label
            htmlfor="option-1"
          >
            <span
              class="mock-css.
  width: 100%;
  height: 100%;
  text-align: center;
  padding: 0.75rem 0;
  display: flex;
  justify-content: center;
  align-items: center;
  border-bottom: 2px solid var(--color-white);
  white-space: nowrap;
  font-size: var(--font-size-default);
  font-weight: var(--font-weight-medium);
  color: var(--color-grey-500);
"
            >
              Option 1
            </span>
          </mock-styled.label>
          <mock-styled.input
            id="option-2"
            name="my-cool-toggle-radio"
            type="radio"
            value="option-2"
          />
          <mock-styled.label
            htmlfor="option-2"
          >
            <span
              class="mock-css.
  width: 100%;
  height: 100%;
  text-align: center;
  padding: 0.75rem 0;
  display: flex;
  justify-content: center;
  align-items: center;
  border-bottom: 2px solid var(--color-white);
  white-space: nowrap;
  font-size: var(--font-size-default);
  font-weight: var(--font-weight-medium);
  color: var(--color-grey-500);
"
            >
              Option 2
            </span>
          </mock-styled.label>
          <mock-styled.input
            id="option-3"
            name="my-cool-toggle-radio"
            type="radio"
            value="option-3"
          />
          <mock-styled.label
            htmlfor="option-3"
          >
            <span
              class="mock-css.
  width: 100%;
  height: 100%;
  text-align: center;
  padding: 0.75rem 0;
  display: flex;
  justify-content: center;
  align-items: center;
  border-bottom: 2px solid var(--color-white);
  white-space: nowrap;
  font-size: var(--font-size-default);
  font-weight: var(--font-weight-medium);
  color: var(--color-grey-500);
"
            >
              Option 3
            </span>
          </mock-styled.label>
        </mock-styled.div>
        <mock-styled.div
          classname="mock-css.
  width: 100%;
  justify-content: space-evenly;
"
        />
      </mock-styled.div>
    </div>
  </body>,
  "container": <div>
    <mock-styled.div
      classname="mock-css.
  width: 100%;
  justify-content: space-evenly;
"
    >
      <mock-styled.div>
        <mock-styled.input
          id="option-1"
          name="my-cool-toggle-radio"
          type="radio"
          value="option-1"
        />
        <mock-styled.label
          htmlfor="option-1"
        >
          <span
            class="mock-css.
  width: 100%;
  height: 100%;
  text-align: center;
  padding: 0.75rem 0;
  display: flex;
  justify-content: center;
  align-items: center;
  border-bottom: 2px solid var(--color-white);
  white-space: nowrap;
  font-size: var(--font-size-default);
  font-weight: var(--font-weight-medium);
  color: var(--color-grey-500);
"
          >
            Option 1
          </span>
        </mock-styled.label>
        <mock-styled.input
          id="option-2"
          name="my-cool-toggle-radio"
          type="radio"
          value="option-2"
        />
        <mock-styled.label
          htmlfor="option-2"
        >
          <span
            class="mock-css.
  width: 100%;
  height: 100%;
  text-align: center;
  padding: 0.75rem 0;
  display: flex;
  justify-content: center;
  align-items: center;
  border-bottom: 2px solid var(--color-white);
  white-space: nowrap;
  font-size: var(--font-size-default);
  font-weight: var(--font-weight-medium);
  color: var(--color-grey-500);
"
          >
            Option 2
          </span>
        </mock-styled.label>
        <mock-styled.input
          id="option-3"
          name="my-cool-toggle-radio"
          type="radio"
          value="option-3"
        />
        <mock-styled.label
          htmlfor="option-3"
        >
          <span
            class="mock-css.
  width: 100%;
  height: 100%;
  text-align: center;
  padding: 0.75rem 0;
  display: flex;
  justify-content: center;
  align-items: center;
  border-bottom: 2px solid var(--color-white);
  white-space: nowrap;
  font-size: var(--font-size-default);
  font-weight: var(--font-weight-medium);
  color: var(--color-grey-500);
"
          >
            Option 3
          </span>
        </mock-styled.label>
      </mock-styled.div>
      <mock-styled.div
        classname="mock-css.
  width: 100%;
  justify-content: space-evenly;
"
      />
    </mock-styled.div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;
