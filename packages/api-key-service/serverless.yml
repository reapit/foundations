service: cloud-api-key-service

plugins:
  - serverless-webpack
  - serverless-offline
  # - serverless-dynamodb-local
  - serverless-deployment-bucket

custom:
  s3CloudFormBucket: cloud-deployment-cloudform-templates-${opt:stage, 'dev'}
  env: ${file(./config.json)}
  webpack:
    webpackConfig: 'webpack.config.js'
    includeModules: true
    packager: 'yarn'
    packagerOptions:
      noFrozenLockFile: false
    excludeFiles: src/**/*.test.ts
    keepOutputDirectory: true
  logRetentionInDays: 30
  dynamodb:
    stages:
      - local
    start:
      port: 8000
      inMemory: true
      heapInitial: 200m
      heapMax: 1g
      migrate: true
      convertEmptyValues: true

provider:
  name: aws
  runtime: ${opt:runtime, 'nodejs14.x'}
  stage: ${opt:stage, 'dev'}
  endpointType: REGIONAL
  region: eu-west-2
  deploymentBucket:
    name: ${self:custom.s3CloudFormBucket}
    blockPublicAccess: false
  
  environment:
    NODE_ENV: 'production'
    CONNECT_USER_POOL: ${self:custom.env.CONNECT_USER_POOL}
    SENTRY_DSN: ${self:custom.env.SENTRY_DSN}
    DYNAMO_DB_REGION: ${self:custom.env.DYNAMO_DB_REGION}
    DYNAMO_DB_ENDPOINT: ${self:custom.env.DYNAMO_DB_ENDPOINT}
    DYNAMO_DB_API_KEY_TABLE_NAME: ${self:custom.env.DYNAMO_DB_API_KEY_TABLE_NAME}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: 'arn:aws:dynamodb:${self:provider.region}:028446965111:table/${self:custom.env.DYNAMO_DB_API_KEY_TABLE_NAME}'
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
      Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.env.DYNAMO_DB_API_KEY_TABLE_NAME}/index/*"
    
resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,api-version'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
    GatewayResponseDefault5XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,api-version'"
        ResponseType: DEFAULT_5XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
    ApiKeyTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.env.DYNAMO_DB_API_KEY_TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: developerId
            AttributeType: S
          - AttributeName: apiKey
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: developerIdOwnership
            KeySchema:
              - AttributeName: developerId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
          - IndexName: apiKey
            KeySchema:
              - AttributeName: apiKey
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
    
package:
  individually: true
  patterns:
    - 'dist/**'
    - '!package.json'
    - '!node_modules/**'
    - '!error.log'
    - '!info.log'
    - '!jest.config.js'
    - '!serverless.yml'
    - '!src/**'
    - '!tsconfig.json'
    - '!yml-helpers.js'
    - '!public/**'

functions:
  createApiKey:
    handler: src/index.createApiKey
    events:
      - http:
          path: /api-key
          method: post
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - api-version
              - Referer
              - User-Agent
          authorizer:
            arn: arn:aws:cognito-idp:${self:provider.region}:${self:custom.env.AWS_ACCOUNT_ID}:userpool/${self:custom.env.CONNECT_USER_POOL}
  getApiKeyViaInvoke:
    handler: src/index.getApiKeyViaInvoke
  getApiKey:
    handler: src/index.getApiKey
    events:
      - http:
          path: /api-key/{id}
          method: get
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - api-version
              - Referer
              - User-Agent
          authorizer:
            arn: arn:aws:cognito-idp:${self:provider.region}:${self:custom.env.AWS_ACCOUNT_ID}:userpool/${self:custom.env.CONNECT_USER_POOL}
  paginateApiKeys:
    handler: src/index.paginateApiKeys
    events:
      - http:
          path: /api-key/
          method: get
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - api-version
              - Referer
              - User-Agent
          authorizer:
            arn: arn:aws:cognito-idp:${self:provider.region}:${self:custom.env.AWS_ACCOUNT_ID}:userpool/${self:custom.env.CONNECT_USER_POOL}

  updateApiKey:
    handler: src/index.updateApiKey
    events:
      - http:
          path: /api-key/{id}
          method: put
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - api-version
              - Referer
              - User-Agent
          authorizer:
            arn: arn:aws:cognito-idp:${self:provider.region}:${self:custom.env.AWS_ACCOUNT_ID}:userpool/${self:custom.env.CONNECT_USER_POOL}
  deleteApiKey:
    handler: src/index.deleteApiKey
    events:
      - http:
          path: /api-key/{id}
          method: delete
          cors:
            origin: '*'
            headers:
              - Content-Type
              - Authorization
              - api-version
              - Referer
              - User-Agent
          authorizer:
            arn: arn:aws:cognito-idp:${self:provider.region}:${self:custom.env.AWS_ACCOUNT_ID}:userpool/${self:custom.env.CONNECT_USER_POOL}
