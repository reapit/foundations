{"version":3,"file":"index-BM4VJKRv.js","sources":["../../src/services/traffic.ts","../../src/components/traffic/index.tsx"],"sourcesContent":["import { FetchError, fetcherWithBlob } from '@reapit/utils-common'\nimport { getPlatformHeaders, logger } from '@reapit/utils-react'\nimport { reapitConnectBrowserSession } from '../core/connect-session'\nimport { URLS } from './constants'\n\nexport const fetchTrafficPeriod = async (period: string) => {\n  try {\n    const headers = await getPlatformHeaders(reapitConnectBrowserSession, '2')\n    if (headers) {\n      return fetcherWithBlob({\n        url: `${URLS.traffic}/${period}`,\n        api: process.env.platformApiUrl,\n        method: 'GET',\n        headers,\n      })\n    }\n  } catch (error) {\n    logger(error as FetchError)\n  }\n}\n","import React, { useEffect, useState, Dispatch, SetStateAction, FC } from 'react'\nimport {\n  Button,\n  elMb11,\n  FormLayout,\n  InputGroup,\n  InputWrap,\n  PersistentNotification,\n  Table,\n  TableCell,\n  TableHeader,\n  TableHeadersRow,\n  TableRow,\n  TableRowContainer,\n} from '@reapit/elements'\nimport dayjs from 'dayjs'\nimport FileSaver from 'file-saver'\nimport { PageContainer, Title } from '@reapit/elements'\nimport { FetchError } from '@reapit/utils-common'\nimport { useForm } from 'react-hook-form'\nimport { fetchTrafficPeriod } from '../../services/traffic'\n\nexport interface SelectOption {\n  label?: string\n  value?: string\n}\n\nexport interface TrafficFilters {\n  month?: string\n}\n\nexport const handleSaveFile = (trafficFile: Blob, filename: string) => () => {\n  FileSaver.saveAs(trafficFile, filename)\n}\n\nexport const handleDownloadTrafficPeriod =\n  (setTrafficFile: Dispatch<SetStateAction<Blob | null>>, period?: string) => () => {\n    const fetchBilling = async () => {\n      if (!period) return\n\n      try {\n        const trafficFile = await fetchTrafficPeriod(period)\n\n        if (!trafficFile || trafficFile instanceof FetchError) {\n          throw trafficFile\n        }\n        setTrafficFile(trafficFile)\n      } catch (error) {\n        console.error(error)\n      }\n    }\n\n    fetchBilling()\n  }\n\nexport const Traffic: FC = () => {\n  const [trafficFilters, setTrafficFilters] = useState<TrafficFilters>()\n  const [trafficFile, setTrafficFile] = useState<Blob | null>(null)\n\n  const { register, handleSubmit } = useForm<TrafficFilters>({\n    mode: 'onChange',\n  })\n\n  useEffect(handleDownloadTrafficPeriod(setTrafficFile, trafficFilters?.month), [trafficFilters])\n\n  return (\n    <PageContainer>\n      <Title>Traffic</Title>\n      <form onChange={handleSubmit(setTrafficFilters)}>\n        <FormLayout className={elMb11}>\n          <InputWrap>\n            <InputGroup {...register('month')} label=\"Month\" type=\"month\" />\n          </InputWrap>\n        </FormLayout>\n      </form>\n      {trafficFile && trafficFilters?.month ? (\n        <Table className={elMb11}>\n          <TableHeadersRow>\n            <TableHeader>Period</TableHeader>\n            <TableHeader>Download Traffic</TableHeader>\n          </TableHeadersRow>\n          <TableRowContainer>\n            <TableRow>\n              <TableCell>{dayjs(trafficFilters.month).format('MMMM YYYY')}</TableCell>\n              <TableCell>\n                <Button onClick={handleSaveFile(trafficFile, `traffic-events-period-${trafficFilters.month}.csv`)}>\n                  Download\n                </Button>\n              </TableCell>\n            </TableRow>\n          </TableRowContainer>\n        </Table>\n      ) : (\n        <PersistentNotification intent=\"primary\" isExpanded={true} isInline isFullWidth>\n          No traffic file available for download.\n        </PersistentNotification>\n      )}\n    </PageContainer>\n  )\n}\n\nexport default Traffic\n"],"names":["define_process_env_default","handleSaveFile","trafficFile","filename","FileSaver","handleDownloadTrafficPeriod","setTrafficFile","period","fetchTrafficPeriod","FetchError","error","Traffic","trafficFilters","setTrafficFilters","useState","register","handleSubmit","useForm","useEffect","PageContainer","jsx","Title","FormLayout","elMb11","InputWrap","InputGroup","jsxs","Table","TableHeadersRow","TableHeader","TableRowContainer","TableRow","TableCell","dayjs","Button","PersistentNotification"],"mappings":"4WAAA,IAAAA,EAAA,CAAA,OAA4C,cAAA,UAAA,GAAA,gBAAA,6BAAA,gBAAA,wCAAA,kBAAA,sBAAA,eAAA,yCAAA,mBAAA,2CAAA,aAAA,+LC+B/BC,EAAiB,CAACC,EAAmBC,IAAqB,IAAM,CACjEC,EAAA,OAAOF,EAAaC,CAAQ,CACxC,EAEaE,EACX,CAACC,EAAuDC,IAAoB,IAAM,EAC3D,SAAY,CAC/B,GAAKA,EAED,GAAA,CACI,MAAAL,EAAc,MAAMM,EAAmBD,CAAM,EAE/C,GAAA,CAACL,GAAeA,aAAuBO,EACnC,MAAAP,EAERI,EAAeJ,CAAW,QACnBQ,EAAO,CACd,QAAQ,MAAMA,CAAK,CACrB,CAAA,IAIJ,EAEWC,EAAc,IAAM,CAC/B,KAAM,CAACC,EAAgBC,CAAiB,EAAIC,EAAyB,SAAA,EAC/D,CAACZ,EAAaI,CAAc,EAAIQ,WAAsB,IAAI,EAE1D,CAAE,SAAAC,EAAU,aAAAC,CAAa,EAAIC,EAAwB,CACzD,KAAM,UAAA,CACP,EAEDC,OAAAA,EAAA,UAAUb,EAA4BC,EAAgBM,GAAgB,KAAK,EAAG,CAACA,CAAc,CAAC,SAG3FO,EACC,CAAA,SAAA,CAAAC,EAAAA,IAACC,GAAM,SAAO,SAAA,CAAA,EACdD,EAAAA,IAAC,OAAK,CAAA,SAAUJ,EAAaH,CAAiB,EAC5C,SAACO,EAAA,IAAAE,EAAA,CAAW,UAAWC,EACrB,SAACH,EAAAA,IAAAI,EAAA,CACC,eAACC,EAAY,CAAA,GAAGV,EAAS,OAAO,EAAG,MAAM,QAAQ,KAAK,OAAA,CAAQ,CAChE,CAAA,CAAA,CACF,CACF,CAAA,EACCb,GAAeU,GAAgB,MAC7Bc,EAAA,KAAAC,EAAA,CAAM,UAAWJ,EAChB,SAAA,CAAAG,OAACE,EACC,CAAA,SAAA,CAAAR,EAAAA,IAACS,GAAY,SAAM,QAAA,CAAA,EACnBT,EAAAA,IAACS,GAAY,SAAgB,kBAAA,CAAA,CAAA,EAC/B,EACAT,EAAA,IAACU,EACC,CAAA,SAAAJ,EAAAA,KAACK,EACC,CAAA,SAAA,CAAAX,MAACY,GAAW,SAAMC,EAAArB,EAAe,KAAK,EAAE,OAAO,WAAW,EAAE,EAC3DQ,EAAA,IAAAY,EAAA,CACC,SAACZ,EAAA,IAAAc,EAAA,CAAO,QAASjC,EAAeC,EAAa,yBAAyBU,EAAe,KAAK,MAAM,EAAG,mBAEnG,CAAA,EACF,CAAA,CAAA,CACF,CACF,CAAA,CAAA,CACF,CAAA,EAECQ,EAAAA,IAAAe,EAAA,CAAuB,OAAO,UAAU,WAAY,GAAM,SAAQ,GAAC,YAAW,GAAC,SAEhF,yCAAA,CAAA,CAEJ,CAAA,CAAA,CAEJ"}