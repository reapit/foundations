{"version":3,"file":"developers-Czroeeo4.js","sources":["../../../utils-common/src/query-params/index.ts","../../src/services/developers.ts"],"sourcesContent":["export const setQueryParams = (params: Object) => {\n  if (!Object.keys(params).length) return ''\n  return Object.keys(params)\n    .filter((key) => params[key] !== undefined && params[key] !== null && params[key] !== '')\n    .map((key) => {\n      if (Array.isArray(params[key])) {\n        return params[key].map((value: any) => `${key}=${value}`).join('&')\n      }\n      return `${key}=${params[key]}`\n    })\n    .join('&')\n}\n\nexport const getParamsFromPath = (search: string) => {\n  const output = {} as Record<string, any>\n  const params = new URLSearchParams(search)\n\n  params.forEach((value, key) => {\n    if (key === 'page') {\n      const pageParam = Number(value)\n      return (output.page = !isNaN(pageParam) && pageParam > 0 ? pageParam : 1)\n    }\n    output[key] = value || ''\n  })\n\n  return output\n}\n","import { fetcher, fetcherWithBlob, setQueryParams } from '@reapit/utils-common'\nimport { URLS } from './constants'\nimport { getPlatformHeaders, logger } from '@reapit/utils-react'\nimport { FetchListCommonParams } from './types'\nimport { reapitConnectBrowserSession } from '../core/connect-session'\nimport { FetchError } from '@reapit/utils-common'\nimport { DeveloperModelPagedResult } from '@reapit/foundations-ts-definitions'\n\nexport type FetchDevelopersListParams = FetchListCommonParams & {\n  name?: string\n  company?: string\n  isInactive?: boolean\n  registeredFrom?: string\n  registeredTo?: string\n  status?: string\n}\n\nexport type FetchDeveloperBillingPeriod = {\n  period: string\n}\n\nexport const fetchDeveloperBillingPeriod = async (params: FetchDeveloperBillingPeriod) => {\n  try {\n    const { period } = params\n    const headers = await getPlatformHeaders(reapitConnectBrowserSession, 'latest')\n    if (headers) {\n      return fetcherWithBlob({\n        url: `${URLS.developers}/costs/${period}`,\n        api: process.env.platformApiUrl,\n        method: 'GET',\n        headers,\n      })\n    }\n  } catch (error) {\n    logger(error as FetchError)\n  }\n}\n\nexport const fetchDevelopersList = async (\n  params: FetchDevelopersListParams,\n): Promise<DeveloperModelPagedResult | void> => {\n  try {\n    const headers = await getPlatformHeaders(reapitConnectBrowserSession, 'latest')\n    if (headers) {\n      return fetcher({\n        url: `${URLS.developers}/?${setQueryParams(params)}`,\n        api: process.env.platformApiUrl,\n        method: 'GET',\n        headers,\n      })\n    }\n  } catch (error) {\n    logger(error as FetchError)\n    throw error\n  }\n}\n"],"names":["setQueryParams","params","key","value","define_process_env_default"],"mappings":"wKAAa,MAAAA,EAAkBC,GACxB,OAAO,KAAKA,CAAM,EAAE,OAClB,OAAO,KAAKA,CAAM,EACtB,OAAQC,GAAQD,EAAOC,CAAG,IAAM,QAAaD,EAAOC,CAAG,IAAM,MAAQD,EAAOC,CAAG,IAAM,EAAE,EACvF,IAAKA,GACA,MAAM,QAAQD,EAAOC,CAAG,CAAC,EACpBD,EAAOC,CAAG,EAAE,IAAKC,GAAe,GAAGD,CAAG,IAAIC,CAAK,EAAE,EAAE,KAAK,GAAG,EAE7D,GAAGD,CAAG,IAAID,EAAOC,CAAG,CAAC,EAC7B,EACA,KAAK,GAAG,EAT6B,GCD1C,IAAAE,EAAA,CAAS,OAAA,wBAAgD,GAAA,gBAAA,6BAAA,gBAAA,wCAAA,kBAAA,sBAAA,eAAA,yCAAA,mBAAA,2CAAA,aAAA"}