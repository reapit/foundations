{"version":3,"file":"create-subscriptions-DrSVnBxi.js","sources":["../../src/components/subscriptions/create-subscriptions.tsx"],"sourcesContent":["import React, { useEffect, Dispatch, SetStateAction, useState, FC } from 'react'\nimport {\n  CreateSubscriptionModel,\n  SubscriptionModel,\n  SubscriptionModelPagedResult,\n} from '@reapit/foundations-ts-definitions'\nimport {\n  objectToQuery,\n  SendFunction,\n  useReapitGet,\n  useReapitUpdate,\n  GetActionNames,\n  getActions,\n  UpdateActionNames,\n  updateActions,\n} from '@reapit/use-reapit-data'\nimport { elMt5, FormLayout, InputWrap, Label, ToggleRadio } from '@reapit/elements'\nimport { reapitConnectBrowserSession } from '../../core/connect-session'\nimport { useReapitConnect } from '@reapit/connect-session'\nimport { useForm, UseFormWatch, UseFormReset } from 'react-hook-form'\nimport { v4 as uuid } from 'uuid'\n\nexport type SubscriptionType = 'applicationListing' | 'developerRegistration' | 'developerEdition'\n\nexport interface CreateSubscriptionsProps {\n  subscriptionType: SubscriptionType\n  developerId?: string\n  appId?: string\n}\n\nexport interface ToggleSubscribedForm {\n  isSubscribed?: 'SUBSCRIBED' | 'NOT_SUBSCRIBED'\n}\n\nexport const getCurrentSub =\n  (\n    subscriptions: SubscriptionModelPagedResult | null,\n    subscriptionType: SubscriptionType,\n    setCurrentSub: Dispatch<SetStateAction<SubscriptionModel | null>>,\n    reset: UseFormReset<ToggleSubscribedForm>,\n    appId?: string,\n  ) =>\n  () => {\n    if (subscriptions?.data && subscriptionType === 'applicationListing' && appId) {\n      const sub =\n        subscriptions.data.find(\n          (sub) => sub.type === 'applicationListing' && !sub.cancelled && appId === sub.applicationId,\n        ) ?? null\n      setCurrentSub(sub)\n      reset({ isSubscribed: sub ? 'SUBSCRIBED' : 'NOT_SUBSCRIBED' })\n    }\n\n    if (subscriptions?.data && subscriptionType === 'developerRegistration') {\n      const sub = subscriptions.data.find((sub) => sub.type === 'developerRegistration' && !sub.cancelled) ?? null\n      setCurrentSub(sub)\n      reset({ isSubscribed: sub ? 'SUBSCRIBED' : 'NOT_SUBSCRIBED' })\n    }\n  }\n\nexport const createSubscriptionHander =\n  (\n    createSubscription: SendFunction<CreateSubscriptionModel, boolean>,\n    createSubscriptionModel: CreateSubscriptionModel,\n  ) =>\n  () => {\n    createSubscription(createSubscriptionModel)\n  }\n\nexport const cancelSubscriptionHander = (cancelSubscription: SendFunction<void, boolean>) => () => {\n  cancelSubscription()\n}\n\nexport const handleRefreshSubs = (subscriptionsRefresh: () => void, shouldRefresh?: boolean) => () => {\n  if (shouldRefresh) {\n    subscriptionsRefresh()\n  }\n}\n\nexport const handleFetchSubs = (setShouldFetchSubs: Dispatch<SetStateAction<boolean>>) => () => {\n  setShouldFetchSubs(true)\n}\n\nexport const handleUpdateAction =\n  (createSub: () => void, cancelSub: () => void) =>\n  ({ isSubscribed }: ToggleSubscribedForm) => {\n    if (isSubscribed === 'SUBSCRIBED') {\n      createSub()\n    } else {\n      cancelSub()\n    }\n  }\n\nexport const handleWatchToggle =\n  (createSub: () => void, cancelSub: () => void, watch: UseFormWatch<ToggleSubscribedForm>) => () => {\n    const subscription = watch(handleUpdateAction(createSub, cancelSub))\n    return () => subscription.unsubscribe()\n  }\n\nexport const CreateSubscriptions: FC<CreateSubscriptionsProps> = ({ subscriptionType, developerId, appId }) => {\n  const { connectSession } = useReapitConnect(reapitConnectBrowserSession)\n  const email = connectSession?.loginIdentity.email\n  const [currentSub, setCurrentSub] = useState<SubscriptionModel | null>(null)\n  const { register, watch, reset } = useForm<ToggleSubscribedForm>()\n\n  const queryParams = objectToQuery({\n    developerId,\n    subscriptionType,\n  })\n\n  const [subscriptions, , , subscriptionsRefresh] = useReapitGet<SubscriptionModelPagedResult>({\n    reapitConnectBrowserSession,\n    action: getActions[GetActionNames.getSubscriptions],\n    queryParams: {\n      ...queryParams,\n      pageSize: 999,\n    },\n  })\n\n  const [, , cancelSubscription, subscriptionCancelled] = useReapitUpdate<void, boolean>({\n    reapitConnectBrowserSession,\n    action: updateActions[UpdateActionNames.deleteSubscription],\n    method: 'DELETE',\n    uriParams: {\n      subscriptionId: currentSub?.id,\n    },\n  })\n\n  const [, , createSubscription, subscriptionCreated] = useReapitUpdate<CreateSubscriptionModel, boolean>({\n    reapitConnectBrowserSession,\n    action: updateActions[UpdateActionNames.createSubscription],\n    method: 'POST',\n  })\n\n  const shouldRefresh = subscriptionCancelled || subscriptionCreated\n  const createSub = createSubscriptionHander(createSubscription, {\n    developerId,\n    applicationId: appId,\n    user: email,\n    type: subscriptionType,\n  })\n  const cancelSub = cancelSubscriptionHander(cancelSubscription)\n\n  useEffect(getCurrentSub(subscriptions, subscriptionType, setCurrentSub, reset, appId), [\n    subscriptions,\n    subscriptionType,\n    appId,\n  ])\n  useEffect(handleRefreshSubs(subscriptionsRefresh, shouldRefresh), [subscriptionCancelled, subscriptionCreated])\n  useEffect(handleWatchToggle(createSub, cancelSub, watch), [subscriptions, currentSub])\n\n  return (\n    <form>\n      <FormLayout className={elMt5}>\n        <InputWrap>\n          <Label>\n            Is Subscribed {subscriptionType === 'applicationListing' ? 'Application Listing' : 'Developer Registration'}\n          </Label>\n          <ToggleRadio\n            {...register('isSubscribed')}\n            hasGreyBg\n            options={[\n              {\n                id: `option-subscribed-true-${uuid()}`,\n                value: 'SUBSCRIBED',\n                text: 'Subscribed',\n                isChecked: Boolean(currentSub),\n              },\n              {\n                id: `option-subscribed-false-${uuid()}`,\n                value: 'NOT_SUBSCRIBED',\n                text: 'Not Subscribed',\n                isChecked: currentSub === null,\n              },\n            ]}\n          />\n        </InputWrap>\n      </FormLayout>\n    </form>\n  )\n}\n"],"names":["getCurrentSub","subscriptions","subscriptionType","setCurrentSub","reset","appId","sub","createSubscriptionHander","createSubscription","createSubscriptionModel","cancelSubscriptionHander","cancelSubscription","handleRefreshSubs","subscriptionsRefresh","shouldRefresh","handleUpdateAction","createSub","cancelSub","isSubscribed","handleWatchToggle","watch","subscription","CreateSubscriptions","developerId","connectSession","useReapitConnect","reapitConnectBrowserSession","email","currentSub","useState","register","useForm","queryParams","objectToQuery","useReapitGet","getActions","GetActionNames","subscriptionCancelled","useReapitUpdate","updateActions","UpdateActionNames","subscriptionCreated","useEffect","jsx","FormLayout","elMt5","InputWrap","jsxs","Label","ToggleRadio","uuid"],"mappings":"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"}