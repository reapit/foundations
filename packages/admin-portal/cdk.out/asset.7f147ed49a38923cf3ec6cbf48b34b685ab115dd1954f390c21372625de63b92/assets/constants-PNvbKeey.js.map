{"version":3,"file":"constants-PNvbKeey.js","sources":["../../../utils-react/src/get-platform-headers/index.ts","../../../utils-common/src/fetcher/index.ts","../../src/services/constants.ts"],"sourcesContent":["import { ReapitConnectBrowserSession } from '@reapit/connect-session'\n\nexport const API_VERSION = '2020-01-31'\n\nexport interface StringMap {\n  [key: string]: string\n}\n\nexport const getPlatformHeaders = async (\n  reapitConnectBrowserSession: ReapitConnectBrowserSession,\n  apiVersion = API_VERSION,\n): Promise<StringMap | void> => {\n  const connectSession = await reapitConnectBrowserSession.connectSession()\n  if (connectSession && connectSession.accessToken) {\n    return {\n      Authorization: `Bearer ${connectSession.accessToken}`,\n      'api-version': apiVersion,\n      'Content-Type': 'application/json',\n    } as StringMap\n  }\n}\n","import { errorMessages } from '../constants/error-messages'\n\ninterface StringMap {\n  [key: string]: string\n}\n\nexport interface FetcherParams<T> {\n  method: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH'\n  api: string\n  url: string\n  headers: StringMap\n  body?: T\n}\nexport type FetchDetailResult<T> = {\n  isLoading: boolean\n  data: T | null\n  errorMessage: string\n}\n\nexport type FetchListResult<T> = T & Pick<FetchDetailResult<any>, 'isLoading' | 'errorMessage'>\n\nexport class FetchError extends Error {\n  public name: string\n  public status: number\n\n  constructor(\n    public message: string,\n    public response?: Response,\n  ) {\n    super(message)\n\n    Object.setPrototypeOf(this, new.target.prototype) // restore prototype chain\n    this.name = (this.constructor as any).name\n    this.status = (this.constructor as any).status\n    this.message = message\n\n    if (Error.captureStackTrace && typeof Error.captureStackTrace === 'function') {\n      Error.captureStackTrace(this, this.constructor)\n    }\n\n    this.response = response\n  }\n}\n\nexport const genErr = async (res: Response, { method, url }: Partial<FetcherParams<any>>) => {\n  const genErrResponse = async () => {\n    try {\n      const response = await res.json()\n      return response\n    } catch (err) {\n      return res\n    }\n  }\n\n  const errRes = await genErrResponse()\n  const error = new FetchError(\n    `Foundations API error: Status: ${res.status} Method: ${method} Path: ${url} ${JSON.stringify(errRes)}`,\n  )\n  error.status = res.status\n  error.response = errRes\n  return error\n}\n/**\n * allow fetch from raw url string (instead of api - base domal, url - path)\n */\nexport const fetcherWithRawUrl = async <T, B>({\n  url,\n  method,\n  body,\n  headers,\n}: Omit<FetcherParams<B>, 'api'>): Promise<any | FetchError> => {\n  const res = await fetch(url, {\n    headers,\n    method,\n    body: JSON.stringify(body),\n  } as RequestInit)\n\n  if (res.status < 400) {\n    const jsonRes = await res.json()\n    return jsonRes as T\n  }\n\n  const err = await genErr(res, { url, method })\n  throw err\n}\n\n/**\n * return headers of responose\n */\nexport const fetcherWithReturnHeader = async <B>({\n  api,\n  url,\n  method,\n  body,\n  headers,\n}: FetcherParams<B>): Promise<Headers | FetchError> => {\n  const path = `${api}${url}`\n\n  const res = await fetch(path, {\n    headers,\n    method,\n    body: JSON.stringify(body),\n  } as RequestInit)\n\n  if (res.status < 400) {\n    return res.headers\n  }\n\n  const err = await genErr(res, { url, method })\n  throw err\n}\n\nexport const fetcherWithBlob = async <B>({\n  api,\n  url,\n  method,\n  body,\n  headers,\n}: FetcherParams<B>): Promise<Blob | FetchError> => {\n  const path = `${api}${url}`\n\n  const res = await fetch(path, {\n    headers,\n    method,\n    body: JSON.stringify(body),\n  } as RequestInit)\n\n  if (res.status < 400) {\n    try {\n      const blob = await res.blob()\n      return blob\n    } catch (err: any) {\n      const error = new FetchError(\"Can't convert response to blob. Error:\", err.message)\n      console.error(error.message)\n      throw error\n    }\n  }\n\n  const err = await genErr(res, { url, method })\n  throw err\n}\n\nexport const fetcher = async <T, B>({\n  api,\n  url,\n  method,\n  body,\n  headers,\n}: FetcherParams<B>): Promise<any | FetchError> => {\n  const path = `${api}${url}`\n\n  const res = await fetch(path, {\n    headers,\n    method,\n    body: JSON.stringify(body),\n  } as RequestInit)\n\n  if (res.status < 400) {\n    try {\n      const jsonVal = await res.json()\n      return jsonVal as T\n    } catch (err) {\n      return res.ok\n    }\n  }\n\n  const err = await genErr(res, { url, method })\n  throw err\n}\n\nexport const getDefaultFetchListValue = () => ({\n  ...getDefaultFetchDetailValue(),\n  data: [],\n  totalCount: 0,\n  pageSize: 0,\n  pageNumber: 0,\n  pageCount: 0,\n})\n\nexport const getDefaultFetchDetailValue: <T>() => FetchDetailResult<T> = () => ({\n  isLoading: false,\n  errorMessage: '',\n  data: null,\n})\n\n/**\n * return standard description error string\n * or DEFAULT_SERVER_ERROR\n */\nexport const extractNetworkErrString = (err) => {\n  /**\n   * response contain standard error object\n   * {\n   *   dataTime,\n   *   description,\n   *   statusCode\n   * }\n   */\n  const standardErrDescriptionData = err?.response?.description\n  if (err?.response?.description) {\n    return standardErrDescriptionData\n  }\n\n  if (typeof err === 'string') {\n    return err\n  }\n\n  return errorMessages.DEFAULT_SERVER_ERROR\n}\n","export const API_VERSION = '2020-01-31'\n\nexport const URLS = {\n  developers: '/marketplace/developers',\n  customers: '/marketplace/customers',\n  developer: '/marketplace/developer',\n  traffic: '/trafficevents/trafficStatistics',\n}\n"],"names":["API_VERSION","getPlatformHeaders","reapitConnectBrowserSession","apiVersion","connectSession","FetchError","message","response","genErr","res","method","url","errRes","error","fetcherWithBlob","api","body","headers","path","err","fetcher","URLS"],"mappings":"AAEO,MAAMA,EAAc,aAMdC,EAAqB,MAChCC,EACAC,EAAaH,IACiB,CACxB,MAAAI,EAAiB,MAAMF,EAA4B,iBACrD,GAAAE,GAAkBA,EAAe,YAC5B,MAAA,CACL,cAAe,UAAUA,EAAe,WAAW,GACnD,cAAeD,EACf,eAAgB,kBAAA,CAGtB,ECCO,MAAME,UAAmB,KAAM,CAIpC,YACSC,EACAC,EACP,CACA,MAAMD,CAAO,EAHN,KAAA,QAAAA,EACA,KAAA,SAAAC,EAIA,OAAA,eAAe,KAAM,WAAW,SAAS,EAC3C,KAAA,KAAQ,KAAK,YAAoB,KACjC,KAAA,OAAU,KAAK,YAAoB,OACxC,KAAK,QAAUD,EAEX,MAAM,mBAAqB,OAAO,MAAM,mBAAsB,YAC1D,MAAA,kBAAkB,KAAM,KAAK,WAAW,EAGhD,KAAK,SAAWC,CAClB,CAnBO,KACA,MAmBT,CAEO,MAAMC,EAAS,MAAOC,EAAe,CAAE,OAAAC,EAAQ,IAAAC,KAAuC,CAUrF,MAAAC,EAAS,MATQ,SAAY,CAC7B,GAAA,CAEK,OADU,MAAMH,EAAI,YAEf,CACL,OAAAA,CACT,CAAA,KAIII,EAAQ,IAAIR,EAChB,kCAAkCI,EAAI,MAAM,YAAYC,CAAM,UAAUC,CAAG,IAAI,KAAK,UAAUC,CAAM,CAAC,EAAA,EAEvG,OAAAC,EAAM,OAASJ,EAAI,OACnBI,EAAM,SAAWD,EACVC,CACT,EAmDaC,EAAkB,MAAU,CACvC,IAAAC,EACA,IAAAJ,EACA,OAAAD,EACA,KAAAM,EACA,QAAAC,CACF,IAAoD,CAClD,MAAMC,EAAO,GAAGH,CAAG,GAAGJ,CAAG,GAEnBF,EAAM,MAAM,MAAMS,EAAM,CAC5B,QAAAD,EACA,OAAAP,EACA,KAAM,KAAK,UAAUM,CAAI,CAAA,CACX,EAEZ,GAAAP,EAAI,OAAS,IACX,GAAA,CAEK,OADM,MAAMA,EAAI,aAEhBU,EAAU,CACjB,MAAMN,EAAQ,IAAIR,EAAW,yCAA0Cc,EAAI,OAAO,EAC1E,cAAA,MAAMN,EAAM,OAAO,EACrBA,CACR,CAII,MADM,MAAML,EAAOC,EAAK,CAAE,IAAAE,EAAK,OAAAD,EAAQ,CAE/C,EAEaU,EAAU,MAAa,CAClC,IAAAL,EACA,IAAAJ,EACA,OAAAD,EACA,KAAAM,EACA,QAAAC,CACF,IAAmD,CACjD,MAAMC,EAAO,GAAGH,CAAG,GAAGJ,CAAG,GAEnBF,EAAM,MAAM,MAAMS,EAAM,CAC5B,QAAAD,EACA,OAAAP,EACA,KAAM,KAAK,UAAUM,CAAI,CAAA,CACX,EAEZ,GAAAP,EAAI,OAAS,IACX,GAAA,CAEK,OADS,MAAMA,EAAI,YAEd,CACZ,OAAOA,EAAI,EACb,CAII,MADM,MAAMD,EAAOC,EAAK,CAAE,IAAAE,EAAK,OAAAD,EAAQ,CAE/C,ECtKaW,EAAO,CAClB,WAAY,0BACZ,UAAW,yBACX,UAAW,yBACX,QAAS,kCACX"}