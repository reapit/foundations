{"version":3,"file":"index-BrLeUNh_.js","sources":["../../../utils-common/src/validators/index.ts","../../src/services/customers.ts","../../src/components/installations/toggle-consumption.tsx","../../src/components/installations/uninstall-modal.tsx","../../src/components/installations/index.tsx"],"sourcesContent":["export const isImageType = (type: string) => {\n  const regex = /^image\\//\n  return regex.test(type)\n}\n\nexport const isValidUrlWithCustomScheme = (urls: string): boolean => {\n  if (!urls) {\n    return false\n  }\n\n  // remove all white-space and filter all empty urls\n  return urls\n    .replace(/\\s/g, '')\n    .split(',')\n    .filter((url) => url)\n    .every((url) => checkValidCustomScheme(url))\n}\n\nexport const checkValidCustomScheme = (url: string): boolean => {\n  const result = url.match(/([a-zA-Z-]{1,30}):\\/\\/([a-zA-Z\\d-.:]{1,255})/)\n  if (!result) {\n    return false\n  }\n  const [, protocol, link] = result\n  // allow http only for localhost\n  if (protocol === 'http') {\n    return link.indexOf('localhost') === 0\n  }\n\n  return !!protocol && !!link\n}\n\nexport const isValidLimitToClientIds = (clientIds: string): boolean => {\n  // Only allow strings with 15 characters seperated by a comma\n  return clientIds\n    .replace(/\\s/g, '')\n    .split(',')\n    .every((clientId) => clientId.length >= 3 && clientId.length <= 15)\n}\n\nexport const isValidHttpsUrl = (url: string) => {\n  return /^\\s*(https:\\/\\/)([a-z\\d-]{1,63}\\.)*[a-z\\d-]{1,255}(.[a-z]{2,6}|:[0-9]{2,6})\\s*/.test(url)\n}\n\nexport const isValidHttpUrl = (url: string) => {\n  return /^\\s*(http:\\/\\/)([a-z\\d-]{1,63}\\.)*[a-z\\d-]{1,255}(.[a-z]{2,6}|:[0-9]{2,6})\\s*/.test(url)\n}\n\nexport const whiteListLocalhostAndIsValidUrl = (url: string) => {\n  return isValidHttpsUrl(url) || /http?:\\/\\/localhost/.test(url)\n}\n\nexport const hasSpecialChars = (value: string): boolean => {\n  if (!value) return false\n\n  if (/^[\\w\\-\\s£$@%&*()?!%/=+'\"~^,‘’.#;:]+$/.test(value) && /^((?!javascript).)*$/.test(value.toLowerCase())) {\n    return false\n  }\n\n  return true\n}\n","import { CustomerModelPagedResult } from '@reapit/foundations-ts-definitions'\nimport { getPlatformHeaders, logger } from '@reapit/utils-react'\nimport { fetcher, FetchError, setQueryParams } from '@reapit/utils-common'\nimport { reapitConnectBrowserSession } from '../core/connect-session'\nimport { URLS } from './constants'\nimport { FetchListCommonParams } from './types'\n\nexport type CustomerListParams = FetchListCommonParams & {\n  name?: string\n}\n\nexport const fetchCustomersList = async (params: CustomerListParams): Promise<CustomerModelPagedResult | void> => {\n  try {\n    const headers = await getPlatformHeaders(reapitConnectBrowserSession, 'latest')\n    if (headers) {\n      return fetcher({\n        url: `${URLS.customers}/?${setQueryParams(params)}`,\n        api: process.env.platformApiUrl,\n        method: 'GET',\n        headers,\n      })\n    }\n  } catch (error) {\n    logger(error as FetchError)\n    throw error\n  }\n}\n","import React, { FC, useEffect } from 'react'\nimport { elMt5, FormLayout, InputGroup, InputWrap, Label, ToggleRadio } from '@reapit/elements'\nimport { useForm, UseFormWatch } from 'react-hook-form'\nimport { SendFunction, useReapitUpdate, UpdateActionNames, updateActions } from '@reapit/use-reapit-data'\nimport { reapitConnectBrowserSession } from '../../core/connect-session'\nimport { InstallationModelPagedResult, UpdateInstallationModel } from '@reapit/foundations-ts-definitions'\n\nexport interface ToggleConsumptionForm {\n  fixedApiConsumptionCost?: 'FREE' | 'NOT_FREE'\n}\n\nexport interface ToggleConsumptionProps {\n  installIdConsumption: string\n  installations: InstallationModelPagedResult | null\n  installationsRefresh: () => void\n}\n\nexport const handleToggleConsumption =\n  (updateInstallation: SendFunction<UpdateInstallationModel, boolean>) =>\n  ({ fixedApiConsumptionCost }: ToggleConsumptionForm) => {\n    const value = fixedApiConsumptionCost === 'FREE' ? 0 : undefined\n    updateInstallation({ fixedApiConsumptionCost: value })\n  }\n\nexport const handleRefreshInstallations = (installationsRefresh: () => void, shouldRefresh?: boolean) => () => {\n  if (shouldRefresh) {\n    installationsRefresh()\n  }\n}\n\nexport const handleWatchToggle =\n  (updateInstallation: SendFunction<UpdateInstallationModel, boolean>, watch: UseFormWatch<ToggleConsumptionForm>) =>\n  () => {\n    const subscription = watch(handleToggleConsumption(updateInstallation))\n    return () => subscription.unsubscribe()\n  }\n\nexport const ToggleConsumption: FC<ToggleConsumptionProps> = ({\n  installIdConsumption,\n  installations,\n  installationsRefresh,\n}) => {\n  const { register, watch } = useForm<ToggleConsumptionForm>()\n  const currentConsumptionPaid =\n    installations?.data?.find((install) => install.id === installIdConsumption)?.fixedApiConsumptionCost !== 0\n\n  const [, , updateInstallation, appUpdated] = useReapitUpdate<UpdateInstallationModel, boolean>({\n    reapitConnectBrowserSession,\n    action: updateActions[UpdateActionNames.updateInstallation],\n    method: 'PUT',\n    uriParams: {\n      installationId: installIdConsumption,\n    },\n  })\n\n  useEffect(handleRefreshInstallations(installationsRefresh, Boolean(appUpdated)), [appUpdated])\n  useEffect(handleWatchToggle(updateInstallation, watch), [updateInstallation])\n\n  return (\n    <form>\n      <FormLayout className={elMt5}>\n        <InputWrap>\n          <InputGroup>\n            <Label>API Consumption Charges</Label>\n            <ToggleRadio\n              {...register('fixedApiConsumptionCost')}\n              hasGreyBg\n              options={[\n                {\n                  id: 'option-free-false',\n                  value: 'NOT_FREE',\n                  text: 'Pays for API consumption',\n                  isChecked: currentConsumptionPaid,\n                },\n                {\n                  id: 'option-free-true',\n                  value: 'FREE',\n                  text: 'API consumption free',\n                  isChecked: !currentConsumptionPaid,\n                },\n              ]}\n            />\n          </InputGroup>\n        </InputWrap>\n      </FormLayout>\n    </form>\n  )\n}\n","import React, { FC, useState } from 'react'\nimport { BodyText, Button, ButtonGroup, FormLayout, InputGroup, InputWrapFull, Modal } from '@reapit/elements'\nimport { useForm } from 'react-hook-form'\nimport { UpdateActionNames, updateActions, useReapitUpdate } from '@reapit/use-reapit-data'\nimport { reapitConnectBrowserSession } from '../../core/connect-session'\nimport { TerminateInstallationModel } from '@reapit/foundations-ts-definitions'\nimport { useReapitConnect } from '@reapit/connect-session'\nimport { SchemaOf, object, string } from 'yup'\nimport { hasSpecialChars } from '@reapit/utils-common'\nimport { yupResolver } from '@hookform/resolvers/yup'\n\nconst uninstallAppSchema: SchemaOf<Pick<TerminateInstallationModel, 'terminatedReason'>> = object().shape({\n  terminatedReason: string()\n    .trim()\n    .required('Required')\n    .min(10, 'Must be a minimum of 10 characters')\n    .test({\n      name: 'hasNoSpecialChars',\n      message: 'Special characters are not permitted',\n      test: (value?: string) => {\n        if (!value) return true\n        return !hasSpecialChars(value)\n      },\n    }),\n})\n\nexport const UninstallModal: FC<{\n  installationId: string | undefined\n  appId: string | undefined\n  onClose: () => void\n  installationRefresh: () => void\n}> = ({ installationId, appId, onClose, installationRefresh }) => {\n  const [uninstalling, setUninstalling] = useState<boolean>(false)\n  const { connectSession } = useReapitConnect(reapitConnectBrowserSession)\n\n  const [, , uninstallApp] = useReapitUpdate<TerminateInstallationModel, null>({\n    reapitConnectBrowserSession,\n    action: updateActions[UpdateActionNames.terminateInstallation],\n    uriParams: {\n      installationId,\n    },\n  })\n\n  const uninstallAction = async ({ terminatedReason }: { terminatedReason: string }) => {\n    setUninstalling(true)\n    const result = await uninstallApp({\n      appId: appId as string,\n      terminatedBy: connectSession?.loginIdentity.email,\n      terminatedReason,\n      terminatesOn: new Date().toISOString(),\n    })\n    setUninstalling(false)\n\n    if (result) {\n      installationRefresh()\n      onClose()\n    }\n  }\n\n  const {\n    handleSubmit,\n    formState: { errors },\n    register,\n    reset,\n  } = useForm({\n    resolver: yupResolver(uninstallAppSchema),\n    defaultValues: {\n      terminatedReason: '',\n    },\n  })\n\n  return (\n    <Modal\n      isOpen={appId !== undefined && installationId !== undefined}\n      onModalClose={() => {\n        if (!uninstalling) {\n          reset()\n          onClose()\n        }\n      }}\n      title=\"Confirm Uninstallation\"\n    >\n      <BodyText>Please provide a reason for terminating this installation</BodyText>\n      <form onSubmit={handleSubmit(uninstallAction)}>\n        <FormLayout hasMargin>\n          <InputWrapFull>\n            <InputGroup\n              label=\"Uninstallation Reason\"\n              type=\"text\"\n              {...register('terminatedReason')}\n              inputAddOnText={errors.terminatedReason?.message}\n              intent=\"danger\"\n            />\n          </InputWrapFull>\n        </FormLayout>\n        <ButtonGroup alignment=\"right\">\n          <Button disabled={uninstalling} loading={uninstalling} intent=\"danger\" type=\"submit\">\n            Uninstall\n          </Button>\n        </ButtonGroup>\n      </form>\n    </Modal>\n  )\n}\n","import React, { Dispatch, FC, SetStateAction, useEffect, useState } from 'react'\nimport { InstallationModelPagedResult } from '@reapit/foundations-ts-definitions'\nimport {\n  PageContainer,\n  Loader,\n  Title,\n  FormLayout,\n  elMb11,\n  InputWrap,\n  InputGroup,\n  Table,\n  Pagination,\n  InputWrapFull,\n  Label,\n  SearchableDropdown,\n  ButtonGroup,\n  Button,\n  ToggleRadio,\n} from '@reapit/elements'\nimport { useForm, UseFormWatch } from 'react-hook-form'\nimport dayjs from 'dayjs'\nimport { SearchableMultiSelect } from '@reapit/utils-react'\nimport { combineAddress } from '@reapit/utils-common'\nimport { GetActionNames, getActions, objectToQuery, useReapitGet } from '@reapit/use-reapit-data'\nimport { reapitConnectBrowserSession } from '../../core/connect-session'\nimport { Statistics } from '../statistics'\nimport { fetchDevelopersList } from '../../services/developers'\nimport { fetchCustomersList } from '../../services/customers'\nimport { usePermissionsState } from '../../core/use-permissions-state'\nimport { ToggleConsumption } from './toggle-consumption'\nimport debounce from 'just-debounce-it'\nimport { UninstallModal } from './uninstall-modal'\n\nexport interface InstallationFilters {\n  installedDateFrom?: string\n  installedDateTo?: string\n  appIds?: string\n  isInstalled?: 'ALL' | 'INSTALLED' | 'UNINSTALLED'\n  companyName?: string\n  clientId?: string\n  isChargedConsumption?: string\n}\n\nconst defaultValues: InstallationFilters = {\n  appIds: '',\n  isInstalled: 'ALL',\n}\n\nexport const formatFilters = (installationsFilters: InstallationFilters) => {\n  const { installedDateTo, installedDateFrom, isInstalled, appIds, clientId, companyName, isChargedConsumption } =\n    installationsFilters\n\n  const isInstaledQuery =\n    isInstalled === 'INSTALLED' ? { isInstalled: true } : isInstalled === 'UNINSTALLED' ? { isInstalled: true } : {}\n\n  const appIdQuery = appIds ? { appId: appIds.split(',').filter(Boolean) } : {}\n  const clientIdQuery = clientId ? { clientId } : {}\n  const companyNameQuery = companyName ? { companyName } : {}\n\n  return objectToQuery({\n    installedDateTo: installedDateTo ? dayjs(installedDateTo).format('YYYY-MM-DDTHH:mm:ss') : undefined,\n    installedDateFrom: installedDateFrom ? dayjs(installedDateFrom).format('YYYY-MM-DDTHH:mm:ss') : undefined,\n    isChargedConsumption,\n    ...isInstaledQuery,\n    ...appIdQuery,\n    ...clientIdQuery,\n    ...companyNameQuery,\n  })\n}\n\nexport const handleSetInstallationsFilters =\n  (setInstallationsFilters: Dispatch<SetStateAction<InstallationFilters>>, watch: UseFormWatch<InstallationFilters>) =>\n  () => {\n    const subscription = watch(debounce(setInstallationsFilters, 500))\n    return () => subscription.unsubscribe()\n  }\n\nexport const handleInstallIdConsumption =\n  (setInstallIdConsumption: Dispatch<SetStateAction<string | null>>, installId?: string) => () => {\n    if (installId) {\n      setInstallIdConsumption(installId)\n    }\n  }\n\nexport const Installations: FC = () => {\n  const [installationsFilters, setInstallationsFilters] = useState<InstallationFilters>(defaultValues)\n  const { hasReadAccess } = usePermissionsState()\n  const [pageNumber, setPageNumber] = useState<number>(1)\n  const [pageSize, setPageSize] = useState<number>(12)\n  const [installIdConsumption, setInstallIdConsumption] = useState<string | null>(null)\n  const [selectedInstallation, setSelectedInstallation] = useState<\n    { appId: string; installationId: string } | { appId: undefined; installationId: undefined }\n  >({\n    appId: undefined,\n    installationId: undefined,\n  })\n\n  const {\n    register,\n    watch,\n    getValues,\n    formState: { errors },\n  } = useForm<InstallationFilters>({\n    mode: 'onChange',\n    defaultValues,\n  })\n\n  useEffect(handleSetInstallationsFilters(setInstallationsFilters, watch), [])\n\n  const [installations, installationsLoading, , installationsRefresh] = useReapitGet<InstallationModelPagedResult>({\n    reapitConnectBrowserSession,\n    action: getActions[GetActionNames.getInstallations],\n    queryParams: {\n      ...formatFilters(installationsFilters),\n      includeOfficeGroups: true,\n      pageNumber,\n      pageSize,\n    },\n  })\n\n  return (\n    <PageContainer>\n      <Title>Installations</Title>\n      <form>\n        <FormLayout className={elMb11}>\n          <InputWrapFull>\n            <SearchableMultiSelect\n              id=\"app-ids-select\"\n              label=\"Search Apps\"\n              errorString={errors.appIds?.message ?? ''}\n              defaultList={[]}\n              currentValues={getValues().appIds?.split(',')?.filter(Boolean) ?? []}\n              reapitConnectBrowserSession={reapitConnectBrowserSession}\n              valueKey=\"id\"\n              nameKey=\"name\"\n              searchKey=\"appName\"\n              dataListKey=\"data\"\n              action={getActions[GetActionNames.getApps]}\n              queryParams={{ pageSize: 100 }}\n              noneSelectedLabel=\"No apps selected\"\n              {...register('appIds')}\n            />\n          </InputWrapFull>\n          <InputWrap>\n            <SearchableDropdown\n              label=\"Company\"\n              id=\"developer-search-box\"\n              {...register('companyName')}\n              getResults={(company: string) =>\n                fetchDevelopersList({ company, status: 'confirmed' }).then((developers) => developers?.data ?? [])\n              }\n              getResultLabel={(result) => `${result.company} -  ${result.name}`}\n              getResultValue={(result) => result.company ?? ''}\n              placeholder=\"Search developer organisations\"\n            />\n          </InputWrap>\n          <InputWrap>\n            <SearchableDropdown\n              label=\"Client\"\n              id=\"client-search-box\"\n              {...register('clientId')}\n              getResults={(name: string) => fetchCustomersList({ name }).then((customers) => customers?.data ?? [])}\n              getResultLabel={(result) => result.name ?? ''}\n              getResultValue={(result) => result.agencyCloudId ?? ''}\n              placeholder=\"Search customers\"\n            />\n          </InputWrap>\n          <InputWrap>\n            <InputGroup {...register('installedDateFrom')} label=\"Installed Date From\" type=\"date\" />\n          </InputWrap>\n          <InputWrap>\n            <InputGroup {...register('installedDateTo')} label=\"Installed Date To\" type=\"date\" />\n          </InputWrap>\n          <InputWrap>\n            <InputGroup>\n              <Label>Is Charged Consumption</Label>\n              <ToggleRadio\n                {...register('isChargedConsumption')}\n                hasGreyBg\n                options={[\n                  {\n                    id: 'option-consumption-all',\n                    value: '',\n                    text: 'All',\n                    isChecked: true,\n                  },\n                  {\n                    id: 'option-consumption-true',\n                    value: 'true',\n                    text: 'Charged',\n                    isChecked: false,\n                  },\n                  {\n                    id: 'option-consumption-false',\n                    value: 'false',\n                    text: 'Free',\n                    isChecked: false,\n                  },\n                ]}\n              />\n            </InputGroup>\n          </InputWrap>\n        </FormLayout>\n      </form>\n      <Statistics area=\"INSTALLATIONS\" data={installations} setPageSize={setPageSize} />\n      {installationsLoading ? (\n        <Loader />\n      ) : (\n        <>\n          <Table\n            className={elMb11}\n            rows={installations?.data?.map(\n              ({\n                customerName,\n                client,\n                customerAddress,\n                created,\n                installedBy,\n                uninstalledBy,\n                terminatesOn,\n                appName,\n                id,\n                appId,\n              }) => ({\n                cells: [\n                  {\n                    label: 'Customer Name',\n                    value: customerName,\n                    icon: 'property',\n                    cellHasDarkText: true,\n                    narrowTable: {\n                      showLabel: true,\n                    },\n                  },\n                  {\n                    label: 'App Name',\n                    value: appName,\n                    icon: 'insights',\n                    cellHasDarkText: true,\n                    narrowTable: {\n                      showLabel: true,\n                    },\n                  },\n                  {\n                    label: 'Reapit Customer Code',\n                    value: client,\n                    narrowTable: {\n                      showLabel: true,\n                    },\n                  },\n                  {\n                    label: 'Customer Address',\n                    value: combineAddress(customerAddress),\n                    narrowTable: {\n                      showLabel: true,\n                    },\n                  },\n                  {\n                    label: 'Date Installed',\n                    value: dayjs(created).format('DD-MM-YYYY'),\n                    narrowTable: {\n                      showLabel: true,\n                    },\n                  },\n                  {\n                    label: 'Installed By',\n                    value: installedBy,\n                    narrowTable: {\n                      showLabel: true,\n                    },\n                  },\n                  {\n                    label: 'Date Uninstalled',\n                    value: terminatesOn ? dayjs(terminatesOn).format('DD-MM-YYYY') : '-',\n                    narrowTable: {\n                      showLabel: true,\n                    },\n                  },\n                  {\n                    label: 'Uninstalled By',\n                    value: uninstalledBy ?? '-',\n                    narrowTable: {\n                      showLabel: true,\n                    },\n                  },\n                ],\n                expandableContent: {\n                  content: (\n                    <>\n                      <ButtonGroup alignment=\"center\">\n                        <Button\n                          intent=\"primary\"\n                          disabled={hasReadAccess}\n                          onClick={handleInstallIdConsumption(setInstallIdConsumption, id)}\n                        >\n                          Togggle API Consumption\n                        </Button>\n                        <Button\n                          onClick={() =>\n                            setSelectedInstallation({\n                              installationId: id as string,\n                              appId: appId as string,\n                            })\n                          }\n                          disabled={uninstalledBy !== null && uninstalledBy !== ''}\n                          intent=\"danger\"\n                        >\n                          Uninstall\n                        </Button>\n                      </ButtonGroup>\n                      {installIdConsumption && installIdConsumption === id && (\n                        <ToggleConsumption\n                          installIdConsumption={installIdConsumption}\n                          installations={installations}\n                          installationsRefresh={installationsRefresh}\n                        />\n                      )}\n                    </>\n                  ),\n                },\n              }),\n            )}\n          />\n          <Pagination\n            callback={setPageNumber}\n            currentPage={pageNumber}\n            numberPages={Math.ceil((installations?.totalCount ?? 1) / 12)}\n          />\n        </>\n      )}\n      <UninstallModal\n        appId={selectedInstallation.appId}\n        installationId={selectedInstallation.installationId}\n        onClose={() =>\n          setSelectedInstallation({\n            appId: undefined,\n            installationId: undefined,\n          })\n        }\n        installationRefresh={installationsRefresh}\n      />\n    </PageContainer>\n  )\n}\n\nexport default Installations\n"],"names":["hasSpecialChars","value","define_process_env_default","handleToggleConsumption","updateInstallation","fixedApiConsumptionCost","handleRefreshInstallations","installationsRefresh","shouldRefresh","handleWatchToggle","watch","subscription","ToggleConsumption","installIdConsumption","installations","register","useForm","currentConsumptionPaid","install","appUpdated","useReapitUpdate","reapitConnectBrowserSession","updateActions","UpdateActionNames","useEffect","jsx","FormLayout","elMt5","InputWrap","jsxs","InputGroup","Label","ToggleRadio","uninstallAppSchema","object","string","UninstallModal","installationId","appId","onClose","installationRefresh","uninstalling","setUninstalling","useState","connectSession","useReapitConnect","uninstallApp","uninstallAction","terminatedReason","result","handleSubmit","errors","reset","yupResolver","Modal","BodyText","InputWrapFull","ButtonGroup","Button","defaultValues","formatFilters","installationsFilters","installedDateTo","installedDateFrom","isInstalled","appIds","clientId","companyName","isChargedConsumption","isInstaledQuery","appIdQuery","clientIdQuery","companyNameQuery","objectToQuery","dayjs","handleSetInstallationsFilters","setInstallationsFilters","debounce","handleInstallIdConsumption","setInstallIdConsumption","installId","Installations","hasReadAccess","usePermissionsState","pageNumber","setPageNumber","pageSize","setPageSize","selectedInstallation","setSelectedInstallation","getValues","installationsLoading","useReapitGet","getActions","GetActionNames","PageContainer","Title","elMb11","SearchableMultiSelect","SearchableDropdown","company","fetchDevelopersList","developers","name","fetchCustomersList","customers","Statistics","Loader","Fragment","Table","customerName","client","customerAddress","created","installedBy","uninstalledBy","terminatesOn","appName","id","combineAddress","Pagination"],"mappings":"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"}