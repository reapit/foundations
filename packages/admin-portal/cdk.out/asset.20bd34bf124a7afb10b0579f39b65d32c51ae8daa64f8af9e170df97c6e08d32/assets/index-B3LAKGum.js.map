{"version":3,"file":"index-B3LAKGum.js","sources":["../../src/components/customers/__styles__/index.ts","../../src/components/customers/org-groups-table.tsx","../../src/components/customers/index.tsx"],"sourcesContent":["import { css } from '@linaria/core'\n\nexport const fourColTable = css`\n  grid-template-columns: repeat(4, 1fr);\n`\n","import React, { FC, useState } from 'react'\nimport ErrorBoundary from '../error-boundary'\nimport { OfficeGroupModelPagedResult } from '@reapit/foundations-ts-definitions'\nimport {\n  elMb11,\n  elMt7,\n  Loader,\n  Pagination,\n  PersistentNotification,\n  Subtitle,\n  Table,\n  TableCell,\n  TableHeader,\n  TableHeadersRow,\n  TableRow,\n} from '@reapit/elements'\nimport { reapitConnectBrowserSession } from '../../core/connect-session'\nimport { GetActionNames, getActions, useReapitGet } from '@reapit/use-reapit-data'\nimport { fourColTable } from './__styles__'\nimport { Statistics } from '../statistics'\n\nexport interface OrgGroupsProps {\n  orgId: string\n}\n\nexport const OrgGroupsTable: FC<OrgGroupsProps> = ({ orgId }) => {\n  const [pageNumber, setPageNumber] = useState<number>(1)\n  const [pageSize, setPageSize] = useState<number>(12)\n\n  const [orgGroups, orgGroupsLoading] = useReapitGet<OfficeGroupModelPagedResult>({\n    reapitConnectBrowserSession,\n    action: getActions[GetActionNames.getGroupsByOrgId],\n    queryParams: {\n      pageSize,\n      pageNumber,\n    },\n    uriParams: {\n      orgId,\n    },\n    fetchWhenTrue: [orgId],\n  })\n\n  return (\n    <ErrorBoundary>\n      {orgGroupsLoading ? (\n        <Loader />\n      ) : orgGroups?._embedded?.length ? (\n        <>\n          <Subtitle>Office Groups</Subtitle>\n          <Table className={elMb11}>\n            <TableHeadersRow className={fourColTable}>\n              <TableHeader>Customer Id</TableHeader>\n              <TableHeader>Group Name</TableHeader>\n              <TableHeader>Office Ids</TableHeader>\n              <TableHeader>Status</TableHeader>\n            </TableHeadersRow>\n            {orgGroups?._embedded?.map(({ customerId, name, officeIds, status }) => (\n              <TableRow className={fourColTable} key={name}>\n                <TableCell>{customerId}</TableCell>\n                <TableCell>{name}</TableCell>\n                <TableCell>{officeIds}</TableCell>\n                <TableCell>{status}</TableCell>\n              </TableRow>\n            ))}\n          </Table>\n          <Pagination\n            callback={setPageNumber}\n            currentPage={pageNumber}\n            numberPages={Math.ceil((orgGroups?.totalCount ?? 1) / 12)}\n          />\n          <Statistics area=\"OFFICE_GROUPS\" data={orgGroups} setPageSize={setPageSize} />\n        </>\n      ) : (\n        <PersistentNotification className={elMt7} isInline isExpanded isFullWidth intent=\"primary\">\n          No office groups found for this organisation\n        </PersistentNotification>\n      )}\n    </ErrorBoundary>\n  )\n}\n","import React, { Dispatch, FC, useState, SetStateAction } from 'react'\nimport ErrorBoundary from '../error-boundary'\nimport { combineAddress } from '@reapit/utils-common'\nimport { CustomerModelPagedResult } from '@reapit/foundations-ts-definitions'\nimport {\n  Button,\n  ButtonGroup,\n  elMb11,\n  FormLayout,\n  InputGroup,\n  InputWrap,\n  Loader,\n  PageContainer,\n  Pagination,\n  Table,\n  Title,\n} from '@reapit/elements'\nimport { objectToQuery, useReapitGet, GetActionNames, getActions } from '@reapit/use-reapit-data'\nimport { reapitConnectBrowserSession } from '../../core/connect-session'\nimport { useForm } from 'react-hook-form'\nimport debounce from 'just-debounce-it'\nimport { OrgGroupsTable } from './org-groups-table'\n\nexport type CustomerFilterValues = {\n  name?: string\n  agencyCloudId?: string\n}\n\nexport const handleFetchGroups = (setOrgId: Dispatch<SetStateAction<string | null>>, orgId?: string) => () => {\n  if (orgId) {\n    setOrgId(orgId)\n  }\n}\n\nexport const Customers: FC = () => {\n  const [pageNumber, setPageNumber] = useState<number>(1)\n  const [customerFilters, setCustomerFilters] = useState<CustomerFilterValues>({})\n  const [orgId, setOrgId] = useState<string | null>(null)\n  const { name, agencyCloudId } = customerFilters\n  const { register, handleSubmit } = useForm<CustomerFilterValues>({\n    mode: 'onChange',\n  })\n\n  const queryParams = objectToQuery(customerFilters)\n\n  const [customers, customersLoading] = useReapitGet<CustomerModelPagedResult>({\n    reapitConnectBrowserSession,\n    action: getActions[GetActionNames.getCustomers],\n    queryParams: {\n      ...queryParams,\n      pageSize: 12,\n      pageNumber,\n    },\n    fetchWhenTrue: [name || agencyCloudId],\n  })\n\n  return (\n    <ErrorBoundary>\n      <PageContainer>\n        <Title>Customers</Title>\n        <form onChange={handleSubmit(debounce(setCustomerFilters, 500))}>\n          <FormLayout className={elMb11}>\n            <InputWrap>\n              <InputGroup {...register('name')} label=\"Customer Name\" type=\"search\" />\n            </InputWrap>\n            <InputWrap>\n              <InputGroup {...register('agencyCloudId')} label=\"Customer Code\" type=\"search\" />\n            </InputWrap>\n          </FormLayout>\n        </form>\n        {customersLoading ? (\n          <Loader />\n        ) : (\n          <>\n            <Table\n              className={elMb11}\n              rows={customers?.data?.map(({ name, address, agencyCloudId, billingReference, id }) => ({\n                cells: [\n                  {\n                    label: 'Customer Name',\n                    value: name,\n                    icon: 'property',\n                    cellHasDarkText: true,\n                    narrowTable: {\n                      showLabel: true,\n                    },\n                  },\n                  {\n                    label: 'Agency Cloud Id',\n                    value: agencyCloudId,\n                    cellHasDarkText: true,\n                    narrowTable: {\n                      showLabel: true,\n                    },\n                  },\n                  {\n                    label: 'Customer Id',\n                    value: id,\n                    narrowTable: {\n                      showLabel: true,\n                    },\n                  },\n                  {\n                    label: 'Customer Billing Reference',\n                    value: billingReference ? billingReference : '-',\n                    narrowTable: {\n                      showLabel: true,\n                    },\n                  },\n                  {\n                    label: 'Customer Address',\n                    value: combineAddress(address),\n                    narrowTable: {\n                      showLabel: true,\n                    },\n                  },\n                ],\n                expandableContent: {\n                  content: (\n                    <>\n                      <ButtonGroup alignment=\"center\">\n                        <Button intent=\"primary\" onClick={handleFetchGroups(setOrgId, id)}>\n                          Fetch Office Groups\n                        </Button>\n                      </ButtonGroup>\n                      {orgId && orgId === id && <OrgGroupsTable orgId={orgId} />}\n                    </>\n                  ),\n                },\n              }))}\n            />\n            <Pagination\n              callback={setPageNumber}\n              currentPage={pageNumber}\n              numberPages={Math.ceil((customers?.totalCount ?? 1) / 12)}\n            />\n          </>\n        )}\n      </PageContainer>\n    </ErrorBoundary>\n  )\n}\n\nexport default Customers\n"],"names":["fourColTable","OrgGroupsTable","orgId","pageNumber","setPageNumber","useState","pageSize","setPageSize","orgGroups","orgGroupsLoading","useReapitGet","reapitConnectBrowserSession","getActions","GetActionNames","jsx","ErrorBoundary","Loader","jsxs","Fragment","Subtitle","Table","elMb11","TableHeadersRow","TableHeader","customerId","name","officeIds","status","TableRow","TableCell","Pagination","Statistics","PersistentNotification","elMt7","handleFetchGroups","setOrgId","Customers","customerFilters","setCustomerFilters","agencyCloudId","register","handleSubmit","useForm","queryParams","objectToQuery","customers","customersLoading","PageContainer","Title","debounce","FormLayout","InputWrap","InputGroup","address","billingReference","id","combineAddress","ButtonGroup","Button"],"mappings":"6eAEO,MAAMA,EAAe,iBCuBfC,EAAqC,CAAC,CAAE,MAAAC,KAAY,CAC/D,KAAM,CAACC,EAAYC,CAAa,EAAIC,WAAiB,CAAC,EAChD,CAACC,EAAUC,CAAW,EAAIF,WAAiB,EAAE,EAE7C,CAACG,EAAWC,CAAgB,EAAIC,EAA0C,CAC9E,4BAAAC,EACA,OAAQC,EAAWC,EAAe,gBAAgB,EAClD,YAAa,CACX,SAAAP,EACA,WAAAH,CACF,EACA,UAAW,CACT,MAAAD,CACF,EACA,cAAe,CAACA,CAAK,CAAA,CACtB,EAGC,OAAAY,EAAAA,IAACC,GACE,SACCN,EAAAK,EAAA,IAACE,GAAO,CAAA,EACNR,GAAW,WAAW,OAEtBS,EAAAA,KAAAC,EAAAA,SAAA,CAAA,SAAA,CAAAJ,EAAAA,IAACK,GAAS,SAAa,eAAA,CAAA,EACvBF,EAAAA,KAACG,EAAM,CAAA,UAAWC,EAChB,SAAA,CAACJ,EAAAA,KAAAK,EAAA,CAAgB,UAAWtB,EAC1B,SAAA,CAAAc,EAAAA,IAACS,GAAY,SAAW,aAAA,CAAA,EACxBT,EAAAA,IAACS,GAAY,SAAU,YAAA,CAAA,EACvBT,EAAAA,IAACS,GAAY,SAAU,YAAA,CAAA,EACvBT,EAAAA,IAACS,GAAY,SAAM,QAAA,CAAA,CAAA,EACrB,EACCf,GAAW,WAAW,IAAI,CAAC,CAAE,WAAAgB,EAAY,KAAAC,EAAM,UAAAC,EAAW,OAAAC,CAAO,IAC/DV,EAAA,KAAAW,EAAA,CAAS,UAAW5B,EACnB,SAAA,CAAAc,EAAAA,IAACe,GAAW,SAAWL,CAAA,CAAA,EACvBV,EAAAA,IAACe,GAAW,SAAKJ,CAAA,CAAA,EACjBX,EAAAA,IAACe,GAAW,SAAUH,CAAA,CAAA,EACtBZ,EAAAA,IAACe,GAAW,SAAOF,CAAA,CAAA,CAAA,CAAA,EAJmBF,CAKxC,CACD,CAAA,EACH,EACAX,EAAA,IAACgB,EAAA,CACC,SAAU1B,EACV,YAAaD,EACb,YAAa,KAAK,MAAMK,GAAW,YAAc,GAAK,EAAE,CAAA,CAC1D,QACCuB,EAAW,CAAA,KAAK,gBAAgB,KAAMvB,EAAW,YAAAD,EAA0B,CAAA,CAC9E,CAAA,EAEAO,EAAAA,IAACkB,EAAuB,CAAA,UAAWC,EAAO,SAAQ,GAAC,WAAU,GAAC,YAAW,GAAC,OAAO,UAAU,wDAE3F,CAEJ,CAAA,CAEJ,ECnDaC,EAAoB,CAACC,EAAmDjC,IAAmB,IAAM,CACxGA,GACFiC,EAASjC,CAAK,CAElB,EAEakC,GAAgB,IAAM,CACjC,KAAM,CAACjC,EAAYC,CAAa,EAAIC,WAAiB,CAAC,EAChD,CAACgC,EAAiBC,CAAkB,EAAIjC,EAAA,SAA+B,CAAE,CAAA,EACzE,CAACH,EAAOiC,CAAQ,EAAI9B,WAAwB,IAAI,EAChD,CAAE,KAAAoB,EAAM,cAAAc,CAAkB,EAAAF,EAC1B,CAAE,SAAAG,EAAU,aAAAC,CAAa,EAAIC,EAA8B,CAC/D,KAAM,UAAA,CACP,EAEKC,EAAcC,EAAcP,CAAe,EAE3C,CAACQ,EAAWC,CAAgB,EAAIpC,EAAuC,CAC3E,4BAAAC,EACA,OAAQC,EAAWC,EAAe,YAAY,EAC9C,YAAa,CACX,GAAG8B,EACH,SAAU,GACV,WAAAxC,CACF,EACA,cAAe,CAACsB,GAAQc,CAAa,CAAA,CACtC,EAGC,OAAAzB,EAAAA,IAACC,EACC,CAAA,SAAAE,EAAAA,KAAC8B,EACC,CAAA,SAAA,CAAAjC,EAAAA,IAACkC,GAAM,SAAS,WAAA,CAAA,EACflC,EAAA,IAAA,OAAA,CAAK,SAAU2B,EAAaQ,EAASX,EAAoB,GAAG,CAAC,EAC5D,SAAArB,EAAAA,KAACiC,EAAW,CAAA,UAAW7B,EACrB,SAAA,CAACP,EAAA,IAAAqC,EAAA,CACC,SAACrC,EAAAA,IAAAsC,EAAA,CAAY,GAAGZ,EAAS,MAAM,EAAG,MAAM,gBAAgB,KAAK,QAAA,CAAS,CACxE,CAAA,EACC1B,EAAA,IAAAqC,EAAA,CACC,SAACrC,EAAAA,IAAAsC,EAAA,CAAY,GAAGZ,EAAS,eAAe,EAAG,MAAM,gBAAgB,KAAK,QAAA,CAAS,CACjF,CAAA,CAAA,CAAA,CACF,CACF,CAAA,EACCM,EACChC,EAAA,IAACE,EAAO,CAAA,CAAA,EAGNC,OAAAC,EAAAA,SAAA,CAAA,SAAA,CAAAJ,EAAA,IAACM,EAAA,CACC,UAAWC,EACX,KAAMwB,GAAW,MAAM,IAAI,CAAC,CAAE,KAAApB,EAAM,QAAA4B,EAAS,cAAAd,EAAe,iBAAAe,EAAkB,GAAAC,MAAU,CACtF,MAAO,CACL,CACE,MAAO,gBACP,MAAO9B,EACP,KAAM,WACN,gBAAiB,GACjB,YAAa,CACX,UAAW,EACb,CACF,EACA,CACE,MAAO,kBACP,MAAOc,EACP,gBAAiB,GACjB,YAAa,CACX,UAAW,EACb,CACF,EACA,CACE,MAAO,cACP,MAAOgB,EACP,YAAa,CACX,UAAW,EACb,CACF,EACA,CACE,MAAO,6BACP,MAAOD,GAAsC,IAC7C,YAAa,CACX,UAAW,EACb,CACF,EACA,CACE,MAAO,mBACP,MAAOE,EAAeH,CAAO,EAC7B,YAAa,CACX,UAAW,EACb,CACF,CACF,EACA,kBAAmB,CACjB,QAEIpC,EAAA,KAAAC,WAAA,CAAA,SAAA,CAAAJ,EAAA,IAAC2C,EAAY,CAAA,UAAU,SACrB,SAAA3C,EAAAA,IAAC4C,EAAO,CAAA,OAAO,UAAU,QAASxB,EAAkBC,EAAUoB,CAAE,EAAG,8BAEnE,CAAA,EACF,EACCrD,GAASA,IAAUqD,GAAMzC,EAAA,IAACb,GAAe,MAAAC,EAAc,CAAA,EAC1D,CAEJ,CAAA,EACA,CAAA,CACJ,EACAY,EAAA,IAACgB,EAAA,CACC,SAAU1B,EACV,YAAaD,EACb,YAAa,KAAK,MAAM0C,GAAW,YAAc,GAAK,EAAE,CAAA,CAC1D,CAAA,EACF,CAAA,CAEJ,CAAA,CACF,CAAA,CAEJ"}