// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`OrgGroupsTable should render component when loading 1`] = `
{
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <mock-styled.div />
      <mock-styled.div
        classname=""
      >
        <mock-styled.div>
          <mock-styled.div />
        </mock-styled.div>
      </mock-styled.div>
    </div>
  </body>,
  "container": <div>
    <mock-styled.div />
    <mock-styled.div
      classname=""
    >
      <mock-styled.div>
        <mock-styled.div />
      </mock-styled.div>
    </mock-styled.div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`OrgGroupsTable should render component with data 1`] = `
{
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <mock-styled.div />
      <mock-styled.h2
        classname=""
      >
        Office Groups
      </mock-styled.h2>
      <mock-styled.div
        classname="el-mb11"
      >
        <mock-styled.div
          classname="mock-css.
  grid-template-columns: repeat(4, 1fr);
"
        >
          <mock-styled.div>
            Customer Id
          </mock-styled.div>
          <mock-styled.div>
            Group Name
          </mock-styled.div>
          <mock-styled.div>
            Office Ids
          </mock-styled.div>
          <mock-styled.div>
            Status
          </mock-styled.div>
        </mock-styled.div>
        <mock-styled.div
          classname="mock-css.
  grid-template-columns: repeat(4, 1fr);
"
        >
          <mock-styled.div
            classname="el-table-cell-has-dark-text"
          >
            <mock-styled.div>
              RES-GGTN
            </mock-styled.div>
          </mock-styled.div>
          <mock-styled.div
            classname="el-table-cell-has-dark-text"
          >
            <mock-styled.div>
              Group 10
            </mock-styled.div>
          </mock-styled.div>
          <mock-styled.div
            classname="el-table-cell-has-dark-text"
          >
            <mock-styled.div>
              AAE,CSL,AAS
            </mock-styled.div>
          </mock-styled.div>
          <mock-styled.div
            classname="el-table-cell-has-dark-text"
          >
            <mock-styled.div>
              inactive
            </mock-styled.div>
          </mock-styled.div>
        </mock-styled.div>
      </mock-styled.div>
      <mock-styled.div>
        <mock-styled.button
          data-testid="back-button"
          type="button"
        >
          <mock-styled.span
            classname="el-icon-new"
          >
            <svg
              fill="none"
              height="1em"
              viewBox="0 0 24 24"
              width="1em"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                d="M15.495 20.004a.998.998 0 0 1-.709-.29l-6.99-7a1 1 0 0 1 0-1.42l6.99-7a1.002 1.002 0 0 1 1.678.45c.093.347-.006.716-.26.97l-6.291 6.29 6.292 6.29a1 1 0 0 1-.71 1.71Z"
                fill="currentColor"
              />
            </svg>
          </mock-styled.span>
        </mock-styled.button>
        <mock-styled.div>
          <mock-styled.input
            value="1"
          />
           of 
          1
        </mock-styled.div>
        <mock-styled.button
          data-testid="forward-button"
          type="button"
        >
          <mock-styled.span
            classname="el-icon-new"
          >
            <svg
              fill="none"
              height="1em"
              viewBox="0 0 24 24"
              width="1em"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                d="M8.505 20.004a.998.998 0 0 1-1.005-1 1 1 0 0 1 .295-.71l6.292-6.29-6.292-6.29a1.005 1.005 0 0 1 0-1.42 1.002 1.002 0 0 1 1.419 0l6.99 7a1 1 0 0 1 0 1.42l-6.99 7a.998.998 0 0 1-.71.29Z"
                fill="currentColor"
              />
            </svg>
          </mock-styled.span>
        </mock-styled.button>
      </mock-styled.div>
      <div
        class="el-mb11"
      >
        <mock-styled.div>
          <mock-styled.div
            classname=""
          >
            <mock-styled.button
              classname="el-intent-primary"
              type="button"
            >
              <mock-styled.div />
              Download CSV
            </mock-styled.button>
          </mock-styled.div>
        </mock-styled.div>
      </div>
    </div>
  </body>,
  "container": <div>
    <mock-styled.div />
    <mock-styled.h2
      classname=""
    >
      Office Groups
    </mock-styled.h2>
    <mock-styled.div
      classname="el-mb11"
    >
      <mock-styled.div
        classname="mock-css.
  grid-template-columns: repeat(4, 1fr);
"
      >
        <mock-styled.div>
          Customer Id
        </mock-styled.div>
        <mock-styled.div>
          Group Name
        </mock-styled.div>
        <mock-styled.div>
          Office Ids
        </mock-styled.div>
        <mock-styled.div>
          Status
        </mock-styled.div>
      </mock-styled.div>
      <mock-styled.div
        classname="mock-css.
  grid-template-columns: repeat(4, 1fr);
"
      >
        <mock-styled.div
          classname="el-table-cell-has-dark-text"
        >
          <mock-styled.div>
            RES-GGTN
          </mock-styled.div>
        </mock-styled.div>
        <mock-styled.div
          classname="el-table-cell-has-dark-text"
        >
          <mock-styled.div>
            Group 10
          </mock-styled.div>
        </mock-styled.div>
        <mock-styled.div
          classname="el-table-cell-has-dark-text"
        >
          <mock-styled.div>
            AAE,CSL,AAS
          </mock-styled.div>
        </mock-styled.div>
        <mock-styled.div
          classname="el-table-cell-has-dark-text"
        >
          <mock-styled.div>
            inactive
          </mock-styled.div>
        </mock-styled.div>
      </mock-styled.div>
    </mock-styled.div>
    <mock-styled.div>
      <mock-styled.button
        data-testid="back-button"
        type="button"
      >
        <mock-styled.span
          classname="el-icon-new"
        >
          <svg
            fill="none"
            height="1em"
            viewBox="0 0 24 24"
            width="1em"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              d="M15.495 20.004a.998.998 0 0 1-.709-.29l-6.99-7a1 1 0 0 1 0-1.42l6.99-7a1.002 1.002 0 0 1 1.678.45c.093.347-.006.716-.26.97l-6.291 6.29 6.292 6.29a1 1 0 0 1-.71 1.71Z"
              fill="currentColor"
            />
          </svg>
        </mock-styled.span>
      </mock-styled.button>
      <mock-styled.div>
        <mock-styled.input
          value="1"
        />
         of 
        1
      </mock-styled.div>
      <mock-styled.button
        data-testid="forward-button"
        type="button"
      >
        <mock-styled.span
          classname="el-icon-new"
        >
          <svg
            fill="none"
            height="1em"
            viewBox="0 0 24 24"
            width="1em"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              d="M8.505 20.004a.998.998 0 0 1-1.005-1 1 1 0 0 1 .295-.71l6.292-6.29-6.292-6.29a1.005 1.005 0 0 1 0-1.42 1.002 1.002 0 0 1 1.419 0l6.99 7a1 1 0 0 1 0 1.42l-6.99 7a.998.998 0 0 1-.71.29Z"
              fill="currentColor"
            />
          </svg>
        </mock-styled.span>
      </mock-styled.button>
    </mock-styled.div>
    <div
      class="el-mb11"
    >
      <mock-styled.div>
        <mock-styled.div
          classname=""
        >
          <mock-styled.button
            classname="el-intent-primary"
            type="button"
          >
            <mock-styled.div />
            Download CSV
          </mock-styled.button>
        </mock-styled.div>
      </mock-styled.div>
    </div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`OrgGroupsTable should render component with empty data 1`] = `
{
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <mock-styled.div />
      <mock-styled.div
        classname="el-mt7 el-intent-primary el-is-active el-pn-is-full-width el-pn-is-inline"
      >
        <div
          class="el-pn-icon"
          data-testid="close-icon"
        >
          <mock-styled.span
            classname="el-icon-new"
            style="font-size: 1.25rem;"
          >
            <svg
              fill="none"
              height="1em"
              style="font-size: 1.25rem;"
              viewBox="0 0 24 24"
              width="1em"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                d="M12 2C6.477 2 2 6.477 2 12s4.477 10 10 10 10-4.477 10-10A10 10 0 0 0 12 2Zm1.143 15.714h-2.286v-6h2.286v6Zm-1.143-8a1.714 1.714 0 1 1 0-3.428 1.714 1.714 0 0 1 0 3.428Z"
                fill="currentColor"
              />
            </svg>
          </mock-styled.span>
        </div>
        <div
          class="el-pn-content"
        >
          No office groups found for this organisation
        </div>
      </mock-styled.div>
    </div>
  </body>,
  "container": <div>
    <mock-styled.div />
    <mock-styled.div
      classname="el-mt7 el-intent-primary el-is-active el-pn-is-full-width el-pn-is-inline"
    >
      <div
        class="el-pn-icon"
        data-testid="close-icon"
      >
        <mock-styled.span
          classname="el-icon-new"
          style="font-size: 1.25rem;"
        >
          <svg
            fill="none"
            height="1em"
            style="font-size: 1.25rem;"
            viewBox="0 0 24 24"
            width="1em"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              d="M12 2C6.477 2 2 6.477 2 12s4.477 10 10 10 10-4.477 10-10A10 10 0 0 0 12 2Zm1.143 15.714h-2.286v-6h2.286v6Zm-1.143-8a1.714 1.714 0 1 1 0-3.428 1.714 1.714 0 0 1 0 3.428Z"
              fill="currentColor"
            />
          </svg>
        </mock-styled.span>
      </div>
      <div
        class="el-pn-content"
      >
        No office groups found for this organisation
      </div>
    </mock-styled.div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;
