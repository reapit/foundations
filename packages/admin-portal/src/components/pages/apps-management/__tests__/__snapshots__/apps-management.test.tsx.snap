// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[` 1`] = `
<div>
  <div
    className="mb-5"
  >
    <Component
      columns={
        Array [
          Object {
            "Header": "AppID",
            "accessor": "id",
          },
          Object {
            "Header": "App Name",
            "accessor": "name",
          },
          Object {
            "Header": "App Summary",
            "accessor": "summary",
          },
          Object {
            "Header": "Developer Name",
            "accessor": "developer",
          },
          Object {
            "Header": "Is Listed",
            "accessor": "isListed",
          },
          Object {
            "Header": "Pending Revisions",
            "accessor": "pendingRevisions",
          },
          Object {
            "Header": "Direct API",
            "accessor": "isDirectApi",
          },
          Object {
            "Cell": [Function],
            "Header": "Created",
            "accessor": "created",
          },
        ]
      }
      data={
        Object {
          "data": Array [
            Object {
              "created": "2020-02-02T10:45:57",
              "developer": "Pete's Proptech World Ltd",
              "developerId": "28c9ea52-7f73-4814-9e00-4e3714b8adeb",
              "homePage": "http://google.com/abc",
              "iconUri": "https://reapit-app-store-app-media.s3.eu-west-2.amazonaws.com/d10e790c-2bf2-40ae-9c43-82c1534bde31.png",
              "id": "09043eb8-9e5e-4650-b7f1-f0cb62699027",
              "links": Array [
                Object {
                  "action": "GET",
                  "href": "http://platformdemo.reapit.net/marketplace/apps/09043eb8-9e5e-4650-b7f1-f0cb62699027",
                  "rel": "self",
                },
                Object {
                  "action": "GET",
                  "href": "http://platformdemo.reapit.net/marketplace/developers/28c9ea52-7f73-4814-9e00-4e3714b8adeb",
                  "rel": "developer",
                },
              ],
              "name": "test",
              "summary": "nXXT2zaK807ysWgy8F0WEhIYRP3TgosAtfuiLtQCImoSx0kynxbIF0nkGHU36Oz13kM3DG0Bcsicr8L6eWFKLBg4axlmiOEWcvwHAbBP9LRvoFkCl58k1wjhOExnpaZItEyOT1AXVKv8PE44aMGtVz",
            },
            Object {
              "created": "2020-02-02T10:45:57",
              "developer": "Pete's Proptech World Ltd",
              "developerId": "28c9ea52-7f73-4814-9e00-4e3714b8adeb",
              "homePage": "http://www.contoso.com/path",
              "iconUri": "https://reapit-app-store-app-media.s3.eu-west-2.amazonaws.com/1d38c5ec-e3c0-4138-9fe0-e77bce4034d1.octet-stream",
              "id": "261da083-cee2-4f5c-a18f-8f9375f1f5af",
              "links": Array [
                Object {
                  "action": "GET",
                  "href": "http://platformdemo.reapit.net/marketplace/apps/261da083-cee2-4f5c-a18f-8f9375f1f5af",
                  "rel": "self",
                },
                Object {
                  "action": "GET",
                  "href": "http://platformdemo.reapit.net/marketplace/developers/28c9ea52-7f73-4814-9e00-4e3714b8adeb",
                  "rel": "developer",
                },
              ],
              "name": "asd",
              "summary": "asdQiiAJTmXGxPin7pwUiCsepZWXz1EJS71eGlvgPKH4hpE6J8DRDpzP2kDdOwpQPr4aHCCwWwxBJwzARLa7wMpJh5J61GhmQjLfKZkcDd47L9WEfQYVYAj0DTPJP0BuUMAAg2",
            },
          ],
          "pageCount": 2,
          "pageNumber": 1,
          "pageSize": 2,
          "totalCount": 6,
        }
      }
      loading={false}
      scrollable={true}
    />
  </div>
</div>
`;

exports[`admin-apps AdminApprovals should match a snapshot 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <MemoryRouter
    initialEntries={
      Array [
        Object {
          "key": "adminApps",
          "pathname": "/approvals",
        },
      ]
    }
  >
    <Router
      history={
        Object {
          "action": "POP",
          "block": [Function],
          "canGo": [Function],
          "createHref": [Function],
          "entries": Array [
            Object {
              "hash": "",
              "key": "adminApps",
              "pathname": "/approvals",
              "search": "",
            },
          ],
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "index": 0,
          "length": 1,
          "listen": [Function],
          "location": Object {
            "hash": "",
            "key": "adminApps",
            "pathname": "/approvals",
            "search": "",
          },
          "push": [Function],
          "replace": [Function],
        }
      }
    >
      <Component>
        <Component
          isHeadingSection={true}
        >
          <h3
            className=""
            id=""
          >
            App Management
          </h3>
        </Component>
        <Formik
          initialValues={
            Object {
              "registeredFrom": "",
              "registeredTo": "",
            }
          }
          onReset={[Function]}
          onSubmit={[Function]}
        >
          <Form>
            <form
              action="#"
              onReset={[Function]}
              onSubmit={[Function]}
            >
              <Component>
                <div
                  className=""
                >
                  <Component>
                    <div
                      className=""
                    >
                      Admin Apps Filter Form
                    </div>
                  </Component>
                  <Component>
                    <div
                      className=""
                    >
                      Filter the result by App, Developer and Company
                    </div>
                  </Component>
                  <Component>
                    <div
                      className=""
                      data-test=""
                    >
                      <Component>
                        <div
                          className=""
                          data-test=""
                        >
                          <Component
                            id="appName"
                            labelText="App Name"
                            maxLength={256}
                            name="appName"
                            type="text"
                          >
                            <Field
                              name="appName"
                              validate={null}
                            >
                              <div
                                className=""
                              >
                                <div
                                  className="control "
                                >
                                  <label
                                    className="label inline-block "
                                    htmlFor="appName"
                                  >
                                    App Name
                                  </label>
                                  <input
                                    className=""
                                    data-test=""
                                    disabled={false}
                                    id="appName"
                                    maxLength={256}
                                    name="appName"
                                    onBlur={[Function]}
                                    onChange={[Function]}
                                    placeholder=""
                                    type="text"
                                    value=""
                                  />
                                </div>
                              </div>
                            </Field>
                          </Component>
                        </div>
                      </Component>
                      <Component>
                        <div
                          className=""
                          data-test=""
                        >
                          <Component
                            id="developerName"
                            labelText="Developer Name"
                            maxLength={256}
                            name="developerName"
                            type="text"
                          >
                            <Field
                              name="developerName"
                              validate={null}
                            >
                              <div
                                className=""
                              >
                                <div
                                  className="control "
                                >
                                  <label
                                    className="label inline-block "
                                    htmlFor="developerName"
                                  >
                                    Developer Name
                                  </label>
                                  <input
                                    className=""
                                    data-test=""
                                    disabled={false}
                                    id="developerName"
                                    maxLength={256}
                                    name="developerName"
                                    onBlur={[Function]}
                                    onChange={[Function]}
                                    placeholder=""
                                    type="text"
                                    value=""
                                  />
                                </div>
                              </div>
                            </Field>
                          </Component>
                        </div>
                      </Component>
                      <Component>
                        <div
                          className=""
                          data-test=""
                        >
                          <Component
                            id="companyName"
                            labelText="Company Name"
                            maxLength={256}
                            name="companyName"
                            type="text"
                          >
                            <Field
                              name="companyName"
                              validate={null}
                            >
                              <div
                                className=""
                              >
                                <div
                                  className="control "
                                >
                                  <label
                                    className="label inline-block "
                                    htmlFor="companyName"
                                  >
                                    Company Name
                                  </label>
                                  <input
                                    className=""
                                    data-test=""
                                    disabled={false}
                                    id="companyName"
                                    maxLength={256}
                                    name="companyName"
                                    onBlur={[Function]}
                                    onChange={[Function]}
                                    placeholder=""
                                    type="text"
                                    value=""
                                  />
                                </div>
                              </div>
                            </Field>
                          </Component>
                        </div>
                      </Component>
                    </div>
                  </Component>
                  <Component>
                    <div
                      className=""
                      data-test=""
                    >
                      <Component>
                        <div
                          className=""
                          data-test=""
                        >
                          <Component
                            id="registeredFrom"
                            labelText="Registered From"
                            name="registeredFrom"
                            reactDatePickerProps={
                              Object {
                                "endDate": "",
                                "selectsStart": true,
                                "startDate": "",
                              }
                            }
                          >
                            <Field
                              name="registeredFrom"
                              validate={null}
                            >
                              <div
                                className="field"
                              >
                                <div
                                  className="control"
                                >
                                  <label
                                    className="label "
                                    htmlFor="registeredFrom"
                                  >
                                    Registered From
                                  </label>
                                  <o
                                    allowSameDay={false}
                                    className="input is-primary"
                                    customInput={
                                      <CustomInput
                                        className="input is-primary"
                                      />
                                    }
                                    customTimeInput={null}
                                    dateFormat="MM/dd/yyyy"
                                    dateFormatCalendar="LLLL yyyy"
                                    disabled={false}
                                    disabledKeyboardNavigation={false}
                                    dropdownMode="scroll"
                                    enableTabLoop={true}
                                    endDate=""
                                    excludeScrollbar={true}
                                    id="registeredFrom"
                                    inlineFocusSelectedMonth={false}
                                    monthsShown={1}
                                    name="registeredFrom"
                                    nextMonthButtonLabel="Next Month"
                                    nextYearButtonLabel="Next Year"
                                    onBlur={[Function]}
                                    onCalendarClose={[Function]}
                                    onCalendarOpen={[Function]}
                                    onChange={[Function]}
                                    onClickOutside={[Function]}
                                    onFocus={[Function]}
                                    onInputClick={[Function]}
                                    onInputError={[Function]}
                                    onKeyDown={[Function]}
                                    onMonthChange={[Function]}
                                    onSelect={[Function]}
                                    onYearChange={[Function]}
                                    popperPlacement="top"
                                    preventOpenOnFocus={false}
                                    previousMonthButtonLabel="Previous Month"
                                    previousYearButtonLabel="Previous Year"
                                    readOnly={false}
                                    renderDayContents={[Function]}
                                    selectsStart={true}
                                    shouldCloseOnSelect={true}
                                    showFullMonthYearPicker={false}
                                    showMonthYearPicker={false}
                                    showPopperArrow={true}
                                    showPreviousMonths={false}
                                    showQuarterYearPicker={false}
                                    showTimeInput={false}
                                    showTimeSelect={false}
                                    showYearPicker={false}
                                    startDate=""
                                    strictParsing={false}
                                    timeCaption="Time"
                                    timeInputLabel="Time"
                                    timeIntervals={30}
                                    value=""
                                    withPortal={false}
                                  >
                                    <a
                                      enableTabLoop={true}
                                      hidePopper={true}
                                      popperComponent={null}
                                      popperModifiers={
                                        Object {
                                          "preventOverflow": Object {
                                            "boundariesElement": "viewport",
                                            "enabled": true,
                                            "escapeWithReference": true,
                                          },
                                        }
                                      }
                                      popperOnKeyDown={[Function]}
                                      popperPlacement="top"
                                      popperProps={Object {}}
                                      targetComponent={
                                        <div
                                          className="react-datepicker__input-container"
                                        >
                                          <CustomInput
                                            className="input is-primary input is-primary"
                                            disabled={false}
                                            id="registeredFrom"
                                            name="registeredFrom"
                                            onBlur={[Function]}
                                            onChange={[Function]}
                                            onClick={[Function]}
                                            onFocus={[Function]}
                                            onKeyDown={[Function]}
                                            readOnly={false}
                                            value=""
                                          />
                                        </div>
                                      }
                                    >
                                      <Manager
                                        className="react-datepicker-manager"
                                      >
                                        <Reference>
                                          <InnerReference
                                            setReferenceNode={[Function]}
                                          >
                                            <div
                                              className="react-datepicker-wrapper"
                                            >
                                              <div
                                                className="react-datepicker__input-container"
                                              >
                                                <CustomInput
                                                  className="input is-primary input is-primary"
                                                  disabled={false}
                                                  id="registeredFrom"
                                                  name="registeredFrom"
                                                  onBlur={[Function]}
                                                  onChange={[Function]}
                                                  onClick={[Function]}
                                                  onFocus={[Function]}
                                                  onKeyDown={[Function]}
                                                  readOnly={false}
                                                  value=""
                                                >
                                                  <input
                                                    className="input is-primary input is-primary"
                                                    disabled={false}
                                                    id="registeredFrom"
                                                    name="registeredFrom"
                                                    onBlur={[Function]}
                                                    onChange={[Function]}
                                                    onClick={[Function]}
                                                    onFocus={[Function]}
                                                    onKeyDown={[Function]}
                                                    readOnly={false}
                                                    type="input"
                                                    value=""
                                                  />
                                                </CustomInput>
                                              </div>
                                            </div>
                                          </InnerReference>
                                        </Reference>
                                      </Manager>
                                    </a>
                                  </o>
                                </div>
                              </div>
                            </Field>
                          </Component>
                        </div>
                      </Component>
                      <Component>
                        <div
                          className=""
                          data-test=""
                        >
                          <Component
                            id="registeredTo"
                            labelText="Registered To"
                            name="registeredTo"
                            reactDatePickerProps={
                              Object {
                                "endDate": "",
                                "minDate": "",
                                "selectsEnd": true,
                                "startDate": "",
                              }
                            }
                          >
                            <Field
                              name="registeredTo"
                              validate={null}
                            >
                              <div
                                className="field"
                              >
                                <div
                                  className="control"
                                >
                                  <label
                                    className="label "
                                    htmlFor="registeredTo"
                                  >
                                    Registered To
                                  </label>
                                  <o
                                    allowSameDay={false}
                                    className="input is-primary"
                                    customInput={
                                      <CustomInput
                                        className="input is-primary"
                                      />
                                    }
                                    customTimeInput={null}
                                    dateFormat="MM/dd/yyyy"
                                    dateFormatCalendar="LLLL yyyy"
                                    disabled={false}
                                    disabledKeyboardNavigation={false}
                                    dropdownMode="scroll"
                                    enableTabLoop={true}
                                    endDate=""
                                    excludeScrollbar={true}
                                    id="registeredTo"
                                    inlineFocusSelectedMonth={false}
                                    minDate=""
                                    monthsShown={1}
                                    name="registeredTo"
                                    nextMonthButtonLabel="Next Month"
                                    nextYearButtonLabel="Next Year"
                                    onBlur={[Function]}
                                    onCalendarClose={[Function]}
                                    onCalendarOpen={[Function]}
                                    onChange={[Function]}
                                    onClickOutside={[Function]}
                                    onFocus={[Function]}
                                    onInputClick={[Function]}
                                    onInputError={[Function]}
                                    onKeyDown={[Function]}
                                    onMonthChange={[Function]}
                                    onSelect={[Function]}
                                    onYearChange={[Function]}
                                    popperPlacement="top"
                                    preventOpenOnFocus={false}
                                    previousMonthButtonLabel="Previous Month"
                                    previousYearButtonLabel="Previous Year"
                                    readOnly={false}
                                    renderDayContents={[Function]}
                                    selectsEnd={true}
                                    shouldCloseOnSelect={true}
                                    showFullMonthYearPicker={false}
                                    showMonthYearPicker={false}
                                    showPopperArrow={true}
                                    showPreviousMonths={false}
                                    showQuarterYearPicker={false}
                                    showTimeInput={false}
                                    showTimeSelect={false}
                                    showYearPicker={false}
                                    startDate=""
                                    strictParsing={false}
                                    timeCaption="Time"
                                    timeInputLabel="Time"
                                    timeIntervals={30}
                                    value=""
                                    withPortal={false}
                                  >
                                    <a
                                      enableTabLoop={true}
                                      hidePopper={true}
                                      popperComponent={null}
                                      popperModifiers={
                                        Object {
                                          "preventOverflow": Object {
                                            "boundariesElement": "viewport",
                                            "enabled": true,
                                            "escapeWithReference": true,
                                          },
                                        }
                                      }
                                      popperOnKeyDown={[Function]}
                                      popperPlacement="top"
                                      popperProps={Object {}}
                                      targetComponent={
                                        <div
                                          className="react-datepicker__input-container"
                                        >
                                          <CustomInput
                                            className="input is-primary input is-primary"
                                            disabled={false}
                                            id="registeredTo"
                                            name="registeredTo"
                                            onBlur={[Function]}
                                            onChange={[Function]}
                                            onClick={[Function]}
                                            onFocus={[Function]}
                                            onKeyDown={[Function]}
                                            readOnly={false}
                                            value=""
                                          />
                                        </div>
                                      }
                                    >
                                      <Manager
                                        className="react-datepicker-manager"
                                      >
                                        <Reference>
                                          <InnerReference
                                            setReferenceNode={[Function]}
                                          >
                                            <div
                                              className="react-datepicker-wrapper"
                                            >
                                              <div
                                                className="react-datepicker__input-container"
                                              >
                                                <CustomInput
                                                  className="input is-primary input is-primary"
                                                  disabled={false}
                                                  id="registeredTo"
                                                  name="registeredTo"
                                                  onBlur={[Function]}
                                                  onChange={[Function]}
                                                  onClick={[Function]}
                                                  onFocus={[Function]}
                                                  onKeyDown={[Function]}
                                                  readOnly={false}
                                                  value=""
                                                >
                                                  <input
                                                    className="input is-primary input is-primary"
                                                    disabled={false}
                                                    id="registeredTo"
                                                    name="registeredTo"
                                                    onBlur={[Function]}
                                                    onChange={[Function]}
                                                    onClick={[Function]}
                                                    onFocus={[Function]}
                                                    onKeyDown={[Function]}
                                                    readOnly={false}
                                                    type="input"
                                                    value=""
                                                  />
                                                </CustomInput>
                                              </div>
                                            </div>
                                          </InnerReference>
                                        </Reference>
                                      </Manager>
                                    </a>
                                  </o>
                                </div>
                              </div>
                            </Field>
                          </Component>
                        </div>
                      </Component>
                      <Component>
                        <div
                          className=""
                          data-test=""
                        >
                          <Component
                            className="mt-5 pt-2"
                          >
                            <div
                              className=""
                              data-test=""
                            >
                              <Component
                                type="submit"
                                variant="primary"
                              >
                                <button
                                  className="button  is-primary  "
                                  data-test=""
                                  disabled={false}
                                  type="submit"
                                >
                                  Search
                                </button>
                              </Component>
                              <Component
                                type="reset"
                                variant="primary"
                              >
                                <button
                                  className="button  is-primary  "
                                  data-test=""
                                  disabled={false}
                                  type="reset"
                                >
                                  Refresh
                                </button>
                              </Component>
                            </div>
                          </Component>
                        </div>
                      </Component>
                    </div>
                  </Component>
                </div>
              </Component>
            </form>
          </Form>
        </Formik>
        <Component>
          <section
            className=""
            data-test=""
          >
            <span>
              Total apps: 
              0
            </span>
          </section>
        </Component>
        <Component>
          <section
            className=""
            data-test=""
          >
            <Component
              message="No Results "
              type="info"
            >
              <div
                className="notification is-info "
                data-test=""
                role="alert"
              >
                No Results 
              </div>
            </Component>
          </section>
        </Component>
        <Component
          onChange={[Function]}
          pageNumber={1}
          pageSize={0}
          totalCount={0}
        >
          <Component
            isCentered={true}
            isFlex={true}
          >
            <section
              className=""
              data-test=""
            >
              <nav
                aria-label="pagination"
                className="pagination is-centered"
                role="navigation"
              >
                <a
                  className="pagination-previous pagination-disabled"
                  onClick={[Function]}
                >
                  Previous
                </a>
                <a
                  className="pagination-next  "
                  onClick={[Function]}
                >
                  Next page
                </a>
                <ul
                  className="pagination-list"
                >
                  <li
                    key="0"
                  >
                    <a
                      aria-label="Goto page 1"
                      className="pagination-link is-current"
                      onClick={[Function]}
                    >
                      1
                    </a>
                  </li>
                  <li
                    key="1"
                  >
                    <a
                      aria-label="Goto page NaN"
                      className="pagination-link"
                      onClick={[Function]}
                    >
                      NaN
                    </a>
                  </li>
                </ul>
              </nav>
            </section>
          </Component>
        </Component>
        <Component
          afterClose={[Function]}
          appId=""
          appName=""
          onDeleteSuccess={[Function]}
          visible={false}
        >
          <Component
            afterClose={[Function]}
            renderChildren={true}
            visible={false}
          />
        </Component>
      </Component>
    </Router>
  </MemoryRouter>
</Provider>
`;

exports[`admin-apps generateColumns should match snapshot 1`] = `
<div>
  <Component />
  <Component />
  <Component />
  <Component />
  <Component />
  <Component />
  <Component />
  <Component />
  <Component />
  <Component />
</div>
`;

exports[`admin-apps renderChecked should return checked icon 1`] = `
<div>
  <FaCheck />
</div>
`;

exports[`admin-apps renderChecked should return null 1`] = `<div />`;

exports[`admin-apps renderCreatedAt should match snapshot 1`] = `
<div>
  <p>
    01 Jan 2020 00:00
  </p>
</div>
`;

exports[`admin-apps renderDeleteAction should call delete action 1`] = `
<div>
  <Component
    onClick={[Function]}
    type="button"
    variant="danger"
  >
    <button
      className="button  is-danger  "
      data-test=""
      disabled={false}
      onClick={[Function]}
      type="button"
    >
      Delete
    </button>
  </Component>
</div>
`;

exports[`admin-apps renderDeleteAction should render DeleteActions 1`] = `
<div>
  <Component
    onClick={[Function]}
    type="button"
    variant="danger"
  >
    Delete
  </Component>
</div>
`;

exports[`admin-apps renderForm should return correctly 1`] = `
<Form>
  <Unknown>
    <Unknown>
      Admin Apps Filter Form
    </Unknown>
    <Unknown>
      Filter the result by App, Developer and Company
    </Unknown>
    <Unknown>
      <Unknown>
        <Unknown
          id="appName"
          labelText="App Name"
          maxLength={256}
          name="appName"
          type="text"
        />
      </Unknown>
      <Unknown>
        <Unknown
          id="developerName"
          labelText="Developer Name"
          maxLength={256}
          name="developerName"
          type="text"
        />
      </Unknown>
      <Unknown>
        <Unknown
          id="companyName"
          labelText="Company Name"
          maxLength={256}
          name="companyName"
          type="text"
        />
      </Unknown>
    </Unknown>
    <Unknown>
      <Unknown>
        <Unknown
          id="registeredFrom"
          labelText="Registered From"
          name="registeredFrom"
          reactDatePickerProps={
            Object {
              "endDate": "",
              "selectsStart": true,
              "startDate": "",
            }
          }
        />
      </Unknown>
      <Unknown>
        <Unknown
          id="registeredTo"
          labelText="Registered To"
          name="registeredTo"
          reactDatePickerProps={
            Object {
              "endDate": "",
              "minDate": "",
              "selectsEnd": true,
              "startDate": "",
            }
          }
        />
      </Unknown>
      <Unknown>
        <Unknown
          className="mt-5 pt-2"
        >
          <Unknown
            type="submit"
            variant="primary"
          >
            Search
          </Unknown>
          <Unknown
            type="reset"
            variant="primary"
          >
            Refresh
          </Unknown>
        </Unknown>
      </Unknown>
    </Unknown>
  </Unknown>
</Form>
`;

exports[`admin-apps renderIsFeature should run correctly 1`] = `
<div
  className="field field-checkbox"
>
  <input
    checked="123"
    className="checkbox"
    id="123"
    name="123"
    onChange={[Function]}
    type="checkbox"
  />
  <label
    className="label"
    htmlFor="123"
  />
</div>
`;
