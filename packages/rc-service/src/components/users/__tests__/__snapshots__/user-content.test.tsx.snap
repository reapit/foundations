// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`UserContent Should match snapshot 1`] = `
{
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <div
        class="mocked-styled-93 el-snack-holder"
      />
      <div
        class="sc-gEvEer fQSvkU"
      >
        <div
          class="mocked-styled-115 el-table"
          data-has-call-to-action="false"
          data-has-expandable-action="false"
          data-num-columns-excl-action-col="5"
          role="table"
        >
          <div
            class="mocked-styled-101 el-table-headers-row"
            role="row"
          >
            <div
              aria-label="Organisation"
              class="mocked-styled-102 el-table-header"
              role="columnheader"
            >
              Organisation
            </div>
            <div
              aria-label="Organisation Claims"
              class="mocked-styled-102 el-table-header"
              role="columnheader"
            >
              Organisation Claims
            </div>
            <div
              aria-label="User Claims"
              class="mocked-styled-102 el-table-header"
              role="columnheader"
            >
              User Claims
            </div>
            <div
              aria-label="Office Groups"
              class="mocked-styled-102 el-table-header"
              role="columnheader"
            >
              Office Groups
            </div>
          </div>
          <div
            class="mocked-styled-110 el-table-row-container"
            role="row"
          >
            <div
              class="mocked-styled-103 el-table-row"
            >
              <div
                class="el-table-cell-has-dark-text el-table-cell"
                role="cell"
              >
                <div
                  class="mocked-styled-111 el-table-cell-content"
                >
                  <div
                    style="display: flex; align-items: center; gap: 8px; flex-wrap: wrap;"
                  >
                    <span>
                      an org
                    </span>
                    <mock-styled.span
                      classname="sc-eqUAAy cqznCV"
                      type="customer"
                    >
                      customer
                    </mock-styled.span>
                    <mock-styled.span
                      classname="sc-eqUAAy gNlkwv"
                      type="developer"
                    >
                      developer
                    </mock-styled.span>
                  </div>
                </div>
              </div>
              <div
                class="el-table-cell-has-dark-text el-table-cell"
                role="cell"
              >
                <div
                  class="mocked-styled-111 el-table-cell-content"
                >
                  None
                </div>
              </div>
              <div
                class="el-table-cell-has-dark-text el-table-cell"
                role="cell"
              >
                <div
                  class="mocked-styled-111 el-table-cell-content"
                >
                  None
                </div>
              </div>
              <div
                class="el-table-cell-has-dark-text el-table-cell"
                role="cell"
              >
                <div
                  class="mocked-styled-111 el-table-cell-content"
                >
                  <button
                    class="el-intent-neutral el-button"
                  >
                    <div
                      class="mocked-styled-0 el-button-loader"
                    />
                    Check
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </body>,
  "container": <div>
    <div
      class="mocked-styled-93 el-snack-holder"
    />
    <div
      class="sc-gEvEer fQSvkU"
    >
      <div
        class="mocked-styled-115 el-table"
        data-has-call-to-action="false"
        data-has-expandable-action="false"
        data-num-columns-excl-action-col="5"
        role="table"
      >
        <div
          class="mocked-styled-101 el-table-headers-row"
          role="row"
        >
          <div
            aria-label="Organisation"
            class="mocked-styled-102 el-table-header"
            role="columnheader"
          >
            Organisation
          </div>
          <div
            aria-label="Organisation Claims"
            class="mocked-styled-102 el-table-header"
            role="columnheader"
          >
            Organisation Claims
          </div>
          <div
            aria-label="User Claims"
            class="mocked-styled-102 el-table-header"
            role="columnheader"
          >
            User Claims
          </div>
          <div
            aria-label="Office Groups"
            class="mocked-styled-102 el-table-header"
            role="columnheader"
          >
            Office Groups
          </div>
        </div>
        <div
          class="mocked-styled-110 el-table-row-container"
          role="row"
        >
          <div
            class="mocked-styled-103 el-table-row"
          >
            <div
              class="el-table-cell-has-dark-text el-table-cell"
              role="cell"
            >
              <div
                class="mocked-styled-111 el-table-cell-content"
              >
                <div
                  style="display: flex; align-items: center; gap: 8px; flex-wrap: wrap;"
                >
                  <span>
                    an org
                  </span>
                  <mock-styled.span
                    classname="sc-eqUAAy cqznCV"
                    type="customer"
                  >
                    customer
                  </mock-styled.span>
                  <mock-styled.span
                    classname="sc-eqUAAy gNlkwv"
                    type="developer"
                  >
                    developer
                  </mock-styled.span>
                </div>
              </div>
            </div>
            <div
              class="el-table-cell-has-dark-text el-table-cell"
              role="cell"
            >
              <div
                class="mocked-styled-111 el-table-cell-content"
              >
                None
              </div>
            </div>
            <div
              class="el-table-cell-has-dark-text el-table-cell"
              role="cell"
            >
              <div
                class="mocked-styled-111 el-table-cell-content"
              >
                None
              </div>
            </div>
            <div
              class="el-table-cell-has-dark-text el-table-cell"
              role="cell"
            >
              <div
                class="mocked-styled-111 el-table-cell-content"
              >
                <button
                  class="el-intent-neutral el-button"
                >
                  <div
                    class="mocked-styled-0 el-button-loader"
                  />
                  Check
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;
