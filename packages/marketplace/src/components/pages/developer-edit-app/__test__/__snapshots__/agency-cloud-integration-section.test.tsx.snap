// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`AgencyCloudIntegrationSection should match a snapshot 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <Formik
    initialValues={Object {}}
    onSubmit={[Function]}
  >
    <Form>
      <form
        action="#"
        onReset={[Function]}
        onSubmit={[Function]}
      >
        <AgencyCloudIntegrationSection>
          <Component>
            <div
              className=""
            >
              <Component>
                <div
                  className=""
                >
                  Agency Cloud Integration
                </div>
              </Component>
              <Component>
                <div
                  className=""
                >
                  To be able to associate your application with an action in Agency Cloud the application will need to be given a desktop type. Please select the type of integration your app requires from the list below. For more information on Desktop Types, please
                   
                  <a
                    className={[Function]}
                    href="https://foundations-documentation.reapit.cloud/api/desktop-api#desktop-types"
                    rel="noopener noreferrer"
                    target="_blank"
                  >
                    click here
                  </a>
                </div>
              </Component>
              <Component>
                <div
                  className=""
                  data-test=""
                >
                  <Component>
                    <div
                      className=""
                      data-test=""
                    >
                      <Component
                        fixedPosition={true}
                        id="desktopIntegrationTypeIds"
                        labelText="Integration Type"
                        mode="multiple"
                        name="desktopIntegrationTypeIds"
                        options={Array []}
                        placeholder="Please select"
                      >
                        <div
                          className="field"
                        >
                          <div
                            className="control"
                          >
                            <Field
                              name="desktopIntegrationTypeIds"
                              validate={null}
                            >
                              <div
                                className="field field-dropdown-select"
                              >
                                <label
                                  className="label "
                                >
                                  Integration Type
                                </label>
                                <Select
                                  className="is-primary input"
                                  dropdownStyle={
                                    Object {
                                      "zIndex": 999,
                                    }
                                  }
                                  id="desktopIntegrationTypeIds"
                                  mode="multiple"
                                  onBlur={[Function]}
                                  onChange={[Function]}
                                  placeholder="Please select"
                                  tagRender={[Function]}
                                  value={Array []}
                                >
                                  <ForwardRef(Select)
                                    className="is-primary input"
                                    dropdownStyle={
                                      Object {
                                        "zIndex": 999,
                                      }
                                    }
                                    id="desktopIntegrationTypeIds"
                                    mode="multiple"
                                    onBlur={[Function]}
                                    onChange={[Function]}
                                    placeholder="Please select"
                                    tagRender={[Function]}
                                    value={Array []}
                                  >
                                    <div
                                      className="rc-select is-primary input rc-select-multiple rc-select-show-search"
                                      onBlur={[Function]}
                                      onFocus={[Function]}
                                      onKeyDown={[Function]}
                                      onKeyUp={[Function]}
                                      onMouseDown={[Function]}
                                    >
                                      <SelectTrigger
                                        containerWidth={null}
                                        dropdownStyle={
                                          Object {
                                            "zIndex": 999,
                                          }
                                        }
                                        empty={true}
                                        getTriggerDOMNode={[Function]}
                                        popupElement={
                                          <OptionList
                                            childrenAsData={true}
                                            defaultActiveFirstOption={true}
                                            flattenOptions={Array []}
                                            height={200}
                                            id="desktopIntegrationTypeIds"
                                            itemHeight={20}
                                            multiple={true}
                                            notFoundContent="Not Found"
                                            onActiveValue={[Function]}
                                            onSelect={[Function]}
                                            onToggleOpen={[Function]}
                                            options={Array []}
                                            prefixCls="rc-select"
                                            searchValue=""
                                            values={Set {}}
                                            virtual={true}
                                          />
                                        }
                                        prefixCls="rc-select"
                                      >
                                        <Trigger
                                          action={Array []}
                                          afterPopupVisibleChange={[Function]}
                                          autoDestroy={false}
                                          blurDelay={0.15}
                                          builtinPlacements={
                                            Object {
                                              "bottomLeft": Object {
                                                "offset": Array [
                                                  0,
                                                  4,
                                                ],
                                                "overflow": Object {
                                                  "adjustX": 0,
                                                  "adjustY": 1,
                                                },
                                                "points": Array [
                                                  "tl",
                                                  "bl",
                                                ],
                                              },
                                              "bottomRight": Object {
                                                "offset": Array [
                                                  0,
                                                  4,
                                                ],
                                                "overflow": Object {
                                                  "adjustX": 0,
                                                  "adjustY": 1,
                                                },
                                                "points": Array [
                                                  "tr",
                                                  "br",
                                                ],
                                              },
                                              "topLeft": Object {
                                                "offset": Array [
                                                  0,
                                                  -4,
                                                ],
                                                "overflow": Object {
                                                  "adjustX": 0,
                                                  "adjustY": 1,
                                                },
                                                "points": Array [
                                                  "bl",
                                                  "tl",
                                                ],
                                              },
                                              "topRight": Object {
                                                "offset": Array [
                                                  0,
                                                  -4,
                                                ],
                                                "overflow": Object {
                                                  "adjustX": 0,
                                                  "adjustY": 1,
                                                },
                                                "points": Array [
                                                  "br",
                                                  "tr",
                                                ],
                                              },
                                            }
                                          }
                                          defaultPopupVisible={false}
                                          destroyPopupOnHide={false}
                                          focusDelay={0}
                                          getDocument={[Function]}
                                          getPopupClassNameFromAlign={[Function]}
                                          getTriggerDOMNode={[Function]}
                                          hideAction={Array []}
                                          mask={false}
                                          maskClosable={true}
                                          mouseEnterDelay={0}
                                          mouseLeaveDelay={0.1}
                                          onPopupAlign={[Function]}
                                          onPopupVisibleChange={[Function]}
                                          popup={
                                            <div>
                                              <OptionList
                                                childrenAsData={true}
                                                defaultActiveFirstOption={true}
                                                flattenOptions={Array []}
                                                height={200}
                                                id="desktopIntegrationTypeIds"
                                                itemHeight={20}
                                                multiple={true}
                                                notFoundContent="Not Found"
                                                onActiveValue={[Function]}
                                                onSelect={[Function]}
                                                onToggleOpen={[Function]}
                                                options={Array []}
                                                prefixCls="rc-select"
                                                searchValue=""
                                                values={Set {}}
                                                virtual={true}
                                              />
                                            </div>
                                          }
                                          popupAlign={Object {}}
                                          popupClassName="rc-select-dropdown-empty"
                                          popupPlacement="bottomLeft"
                                          popupStyle={
                                            Object {
                                              "minWidth": null,
                                              "width": null,
                                              "zIndex": 999,
                                            }
                                          }
                                          prefixCls="rc-select-dropdown"
                                          showAction={Array []}
                                        >
                                          <Selector
                                            accessibilityIndex={0}
                                            activeValue={null}
                                            className="is-primary input"
                                            domRef={
                                              Object {
                                                "current": <div
                                                  class="rc-select-selector"
                                                >
                                                  <span
                                                    class="rc-select-selection-search"
                                                    style="width: 0px;"
                                                  >
                                                    <input
                                                      aria-activedescendant="desktopIntegrationTypeIds_list_0"
                                                      aria-autocomplete="list"
                                                      aria-controls="desktopIntegrationTypeIds_list"
                                                      aria-haspopup="listbox"
                                                      aria-owns="desktopIntegrationTypeIds_list"
                                                      autocomplete="off"
                                                      class="rc-select-selection-search-input"
                                                      id="desktopIntegrationTypeIds"
                                                      readonly=""
                                                      role="combobox"
                                                      style="opacity: 0;"
                                                      unselectable="on"
                                                      value=""
                                                    />
                                                    <span
                                                      aria-hidden="true"
                                                      class="rc-select-selection-search-mirror"
                                                    >
                                                      
                                                       
                                                    </span>
                                                  </span>
                                                  <span
                                                    class="rc-select-selection-placeholder"
                                                  >
                                                    Please select
                                                  </span>
                                                </div>,
                                              }
                                            }
                                            dropdownStyle={
                                              Object {
                                                "zIndex": 999,
                                              }
                                            }
                                            id="desktopIntegrationTypeIds"
                                            inputElement={null}
                                            key="trigger"
                                            mode="multiple"
                                            multiple={true}
                                            onBlur={[Function]}
                                            onChange={[Function]}
                                            onSearch={[Function]}
                                            onSelect={[Function]}
                                            onToggleOpen={[Function]}
                                            placeholder="Please select"
                                            prefixCls="rc-select"
                                            searchValue=""
                                            showSearch={true}
                                            tagRender={[Function]}
                                            value={Array []}
                                            values={Array []}
                                          >
                                            <div
                                              className="rc-select-selector"
                                              onClick={[Function]}
                                              onMouseDown={[Function]}
                                            >
                                              <SelectSelector
                                                accessibilityIndex={0}
                                                activeValue={null}
                                                className="is-primary input"
                                                domRef={
                                                  Object {
                                                    "current": <div
                                                      class="rc-select-selector"
                                                    >
                                                      <span
                                                        class="rc-select-selection-search"
                                                        style="width: 0px;"
                                                      >
                                                        <input
                                                          aria-activedescendant="desktopIntegrationTypeIds_list_0"
                                                          aria-autocomplete="list"
                                                          aria-controls="desktopIntegrationTypeIds_list"
                                                          aria-haspopup="listbox"
                                                          aria-owns="desktopIntegrationTypeIds_list"
                                                          autocomplete="off"
                                                          class="rc-select-selection-search-input"
                                                          id="desktopIntegrationTypeIds"
                                                          readonly=""
                                                          role="combobox"
                                                          style="opacity: 0;"
                                                          unselectable="on"
                                                          value=""
                                                        />
                                                        <span
                                                          aria-hidden="true"
                                                          class="rc-select-selection-search-mirror"
                                                        >
                                                          
                                                           
                                                        </span>
                                                      </span>
                                                      <span
                                                        class="rc-select-selection-placeholder"
                                                      >
                                                        Please select
                                                      </span>
                                                    </div>,
                                                  }
                                                }
                                                dropdownStyle={
                                                  Object {
                                                    "zIndex": 999,
                                                  }
                                                }
                                                id="desktopIntegrationTypeIds"
                                                inputElement={null}
                                                inputRef={
                                                  Object {
                                                    "current": <input
                                                      aria-activedescendant="desktopIntegrationTypeIds_list_0"
                                                      aria-autocomplete="list"
                                                      aria-controls="desktopIntegrationTypeIds_list"
                                                      aria-haspopup="listbox"
                                                      aria-owns="desktopIntegrationTypeIds_list"
                                                      autocomplete="off"
                                                      class="rc-select-selection-search-input"
                                                      id="desktopIntegrationTypeIds"
                                                      readonly=""
                                                      role="combobox"
                                                      style="opacity: 0;"
                                                      unselectable="on"
                                                      value=""
                                                    />,
                                                  }
                                                }
                                                mode="multiple"
                                                multiple={true}
                                                onBlur={[Function]}
                                                onChange={[Function]}
                                                onInputChange={[Function]}
                                                onInputKeyDown={[Function]}
                                                onInputMouseDown={[Function]}
                                                onInputPaste={[Function]}
                                                onSearch={[Function]}
                                                onSelect={[Function]}
                                                onToggleOpen={[Function]}
                                                placeholder="Please select"
                                                prefixCls="rc-select"
                                                searchValue=""
                                                showSearch={true}
                                                tagRender={[Function]}
                                                value={Array []}
                                                values={Array []}
                                              >
                                                <CSSMotionList
                                                  component={false}
                                                  keys={Array []}
                                                  motionAppear={true}
                                                />
                                                <span
                                                  className="rc-select-selection-search"
                                                  style={
                                                    Object {
                                                      "width": 0,
                                                    }
                                                  }
                                                >
                                                  <Input
                                                    accessibilityIndex={0}
                                                    attrs={Object {}}
                                                    id="desktopIntegrationTypeIds"
                                                    inputElement={null}
                                                    onChange={[Function]}
                                                    onKeyDown={[Function]}
                                                    onMouseDown={[Function]}
                                                    onPaste={[Function]}
                                                    prefixCls="rc-select"
                                                    value=""
                                                  >
                                                    <input
                                                      aria-activedescendant="desktopIntegrationTypeIds_list_0"
                                                      aria-autocomplete="list"
                                                      aria-controls="desktopIntegrationTypeIds_list"
                                                      aria-haspopup="listbox"
                                                      aria-owns="desktopIntegrationTypeIds_list"
                                                      autoComplete="off"
                                                      className="rc-select-selection-search-input"
                                                      id="desktopIntegrationTypeIds"
                                                      onChange={[Function]}
                                                      onKeyDown={[Function]}
                                                      onMouseDown={[Function]}
                                                      onPaste={[Function]}
                                                      readOnly={true}
                                                      role="combobox"
                                                      style={
                                                        Object {
                                                          "opacity": 0,
                                                        }
                                                      }
                                                      unselectable="on"
                                                      value=""
                                                    />
                                                  </Input>
                                                  <span
                                                    aria-hidden={true}
                                                    className="rc-select-selection-search-mirror"
                                                  >
                                                     
                                                  </span>
                                                </span>
                                                <span
                                                  className="rc-select-selection-placeholder"
                                                >
                                                  Please select
                                                </span>
                                              </SelectSelector>
                                            </div>
                                          </Selector>
                                        </Trigger>
                                      </SelectTrigger>
                                    </div>
                                  </ForwardRef(Select)>
                                </Select>
                              </div>
                            </Field>
                          </div>
                        </div>
                        <div />
                      </Component>
                    </div>
                  </Component>
                </div>
              </Component>
            </div>
          </Component>
        </AgencyCloudIntegrationSection>
      </form>
    </Form>
  </Formik>
</Provider>
`;
