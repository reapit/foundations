// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`AppDetail renderAppHeaderButtonGroup should match snapshot 1`] = `
<div>
  <Component
    installedOn="2020-2-20"
    isInstallBtnHidden={true}
    onInstallConfirmationModal={[MockFunction]}
    onUninstallConfirmationModal={[MockFunction]}
  />
</div>
`;

exports[`AppDetail renderAppHeaderButtonGroup should match snapshot 2`] = `
<div>
  <Component
    installedOn="2020-2-20"
    isInstallBtnHidden={false}
    onInstallConfirmationModal={[MockFunction]}
    onUninstallConfirmationModal={[MockFunction]}
  />
</div>
`;

exports[`AppDetail should match a snapshot 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <MemoryRouter
    initialEntries={
      Array [
        Object {
          "key": "clientAppDetailRoute",
          "pathname": "/apps/:appid",
        },
      ]
    }
  >
    <Router
      history={
        Object {
          "action": "POP",
          "block": [Function],
          "canGo": [Function],
          "createHref": [Function],
          "entries": Array [
            Object {
              "hash": "",
              "key": "clientAppDetailRoute",
              "pathname": "/apps/:appid",
              "search": "",
            },
          ],
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "index": 0,
          "length": 1,
          "listen": [Function],
          "location": Object {
            "hash": "",
            "key": "clientAppDetailRoute",
            "pathname": "/apps/:appid",
            "search": "",
          },
          "push": [Function],
          "replace": [Function],
        }
      }
    >
      <AppDetail>
        <Component
          dataTest="client-app-detail-container"
        >
          <div
            className=""
            data-test="client-app-detail-container"
          >
            <Component
              dataTest="client-app-detail-loader"
            >
              <div
                className="loader-spinner body"
                data-test="client-app-detail-loader"
              >
                <div />
                <div />
                <div />
                <div />
              </div>
            </Component>
            <AppUninstallConfirmation
              appDetailData={Object {}}
              closeUninstallConfirmationModal={[Function]}
              visible={false}
            >
              <Component
                afterClose={[Function]}
                footerItems={
                  <React.Fragment>
                    <Unknown
                      dataTest="agree-btn"
                      loading={false}
                      onClick={[Function]}
                      type="button"
                      variant="primary"
                    >
                      Confirm
                    </Unknown>
                    <Unknown
                      dataTest="disagree-btn"
                      disabled={false}
                      onClick={[Function]}
                      type="button"
                      variant="danger"
                    >
                      Cancel
                    </Unknown>
                  </React.Fragment>
                }
                title="Confirm undefined uninstallation"
                visible={false}
              />
              <Component
                HeaderComponent={[Function]}
                afterClose={[Function]}
                visible={false}
              />
            </AppUninstallConfirmation>
            <AppInstallConfirmation
              appDetailData={Object {}}
              closeInstallConfirmationModal={[Function]}
              visible={false}
            >
              <Component
                footer={
                  <div
                    className="flex"
                  >
                    <Unknown
                      dataTest="agree-btn"
                      loading={false}
                      onClick={[Function]}
                      type="button"
                      variant="primary"
                    >
                      Confirm
                    </Unknown>
                    <Unknown
                      dataTest="disagree-btn"
                      disabled={false}
                      onClick={[Function]}
                      type="button"
                      variant="danger"
                    >
                      Cancel
                    </Unknown>
                  </div>
                }
                isCentered={true}
                onClose={[Function]}
                title="Confirm undefined installation"
                visible={false}
              >
                <Component
                  className=""
                  destroyOnClose={true}
                  footer={
                    <div
                      className="flex"
                    >
                      <Unknown
                        dataTest="agree-btn"
                        loading={false}
                        onClick={[Function]}
                        type="button"
                        variant="primary"
                      >
                        Confirm
                      </Unknown>
                      <Unknown
                        dataTest="disagree-btn"
                        disabled={false}
                        onClick={[Function]}
                        type="button"
                        variant="danger"
                      >
                        Cancel
                      </Unknown>
                    </div>
                  }
                  onClose={[Function]}
                  title="Confirm undefined installation"
                  visible={false}
                  wrapClassName=""
                >
                  <PortalWrapper
                    visible={false}
                  />
                </Component>
              </Component>
              <Component
                afterClose={[Function]}
                appDetailData={Object {}}
                onSuccessAlertButtonClick={[Function]}
                visible={false}
              >
                <Component
                  isCentered={true}
                  isPadding={false}
                  onClose={[Function]}
                  visible={false}
                >
                  <Component
                    className=""
                    destroyOnClose={true}
                    onClose={[Function]}
                    visible={false}
                    wrapClassName=""
                  >
                    <PortalWrapper
                      visible={false}
                    />
                  </Component>
                </Component>
              </Component>
              <Component
                afterClose={[Function]}
                appDetailData={Object {}}
                onSuccessAlertButtonClick={[Function]}
                visible={false}
              >
                <Component
                  isCentered={true}
                  isPadding={false}
                  onClose={[Function]}
                  visible={false}
                >
                  <Component
                    className=""
                    destroyOnClose={true}
                    onClose={[Function]}
                    visible={false}
                    wrapClassName=""
                  >
                    <PortalWrapper
                      visible={false}
                    />
                  </Component>
                </Component>
              </Component>
            </AppInstallConfirmation>
          </div>
        </Component>
      </AppDetail>
    </Router>
  </MemoryRouter>
</Provider>
`;

exports[`AppDetail should render loader when client.appDetail.data is an empty object 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <MemoryRouter
    initialEntries={
      Array [
        Object {
          "key": "clientAppDetailRoute",
          "pathname": "/apps/:appid",
        },
      ]
    }
  >
    <Router
      history={
        Object {
          "action": "POP",
          "block": [Function],
          "canGo": [Function],
          "createHref": [Function],
          "entries": Array [
            Object {
              "hash": "",
              "key": "clientAppDetailRoute",
              "pathname": "/apps/:appid",
              "search": "",
            },
          ],
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "index": 0,
          "length": 1,
          "listen": [Function],
          "location": Object {
            "hash": "",
            "key": "clientAppDetailRoute",
            "pathname": "/apps/:appid",
            "search": "",
          },
          "push": [Function],
          "replace": [Function],
        }
      }
    >
      <AppDetail>
        <Component
          dataTest="client-app-detail-container"
        >
          <div
            className=""
            data-test="client-app-detail-container"
          >
            <Component
              dataTest="client-app-detail-loader"
            >
              <div
                className="loader-spinner body"
                data-test="client-app-detail-loader"
              >
                <div />
                <div />
                <div />
                <div />
              </div>
            </Component>
            <AppUninstallConfirmation
              appDetailData={Object {}}
              closeUninstallConfirmationModal={[Function]}
              visible={false}
            >
              <Component
                afterClose={[Function]}
                footerItems={
                  <React.Fragment>
                    <Unknown
                      dataTest="agree-btn"
                      loading={false}
                      onClick={[Function]}
                      type="button"
                      variant="primary"
                    >
                      Confirm
                    </Unknown>
                    <Unknown
                      dataTest="disagree-btn"
                      disabled={false}
                      onClick={[Function]}
                      type="button"
                      variant="danger"
                    >
                      Cancel
                    </Unknown>
                  </React.Fragment>
                }
                title="Confirm undefined uninstallation"
                visible={false}
              />
              <Component
                HeaderComponent={[Function]}
                afterClose={[Function]}
                visible={false}
              />
            </AppUninstallConfirmation>
            <AppInstallConfirmation
              appDetailData={Object {}}
              closeInstallConfirmationModal={[Function]}
              visible={false}
            >
              <Component
                footer={
                  <div
                    className="flex"
                  >
                    <Unknown
                      dataTest="agree-btn"
                      loading={false}
                      onClick={[Function]}
                      type="button"
                      variant="primary"
                    >
                      Confirm
                    </Unknown>
                    <Unknown
                      dataTest="disagree-btn"
                      disabled={false}
                      onClick={[Function]}
                      type="button"
                      variant="danger"
                    >
                      Cancel
                    </Unknown>
                  </div>
                }
                isCentered={true}
                onClose={[Function]}
                title="Confirm undefined installation"
                visible={false}
              >
                <Component
                  className=""
                  destroyOnClose={true}
                  footer={
                    <div
                      className="flex"
                    >
                      <Unknown
                        dataTest="agree-btn"
                        loading={false}
                        onClick={[Function]}
                        type="button"
                        variant="primary"
                      >
                        Confirm
                      </Unknown>
                      <Unknown
                        dataTest="disagree-btn"
                        disabled={false}
                        onClick={[Function]}
                        type="button"
                        variant="danger"
                      >
                        Cancel
                      </Unknown>
                    </div>
                  }
                  onClose={[Function]}
                  title="Confirm undefined installation"
                  visible={false}
                  wrapClassName=""
                >
                  <PortalWrapper
                    visible={false}
                  />
                </Component>
              </Component>
              <Component
                afterClose={[Function]}
                appDetailData={Object {}}
                onSuccessAlertButtonClick={[Function]}
                visible={false}
              >
                <Component
                  isCentered={true}
                  isPadding={false}
                  onClose={[Function]}
                  visible={false}
                >
                  <Component
                    className=""
                    destroyOnClose={true}
                    onClose={[Function]}
                    visible={false}
                    wrapClassName=""
                  >
                    <PortalWrapper
                      visible={false}
                    />
                  </Component>
                </Component>
              </Component>
              <Component
                afterClose={[Function]}
                appDetailData={Object {}}
                onSuccessAlertButtonClick={[Function]}
                visible={false}
              >
                <Component
                  isCentered={true}
                  isPadding={false}
                  onClose={[Function]}
                  visible={false}
                >
                  <Component
                    className=""
                    destroyOnClose={true}
                    onClose={[Function]}
                    visible={false}
                    wrapClassName=""
                  >
                    <PortalWrapper
                      visible={false}
                    />
                  </Component>
                </Component>
              </Component>
            </AppInstallConfirmation>
          </div>
        </Component>
      </AppDetail>
    </Router>
  </MemoryRouter>
</Provider>
`;

exports[`AppDetail should render loader when isLoadingAppDetail = true 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <MemoryRouter
    initialEntries={
      Array [
        Object {
          "key": "clientAppDetailRoute",
          "pathname": "/apps/:appid",
        },
      ]
    }
  >
    <Router
      history={
        Object {
          "action": "POP",
          "block": [Function],
          "canGo": [Function],
          "createHref": [Function],
          "entries": Array [
            Object {
              "hash": "",
              "key": "clientAppDetailRoute",
              "pathname": "/apps/:appid",
              "search": "",
            },
          ],
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "index": 0,
          "length": 1,
          "listen": [Function],
          "location": Object {
            "hash": "",
            "key": "clientAppDetailRoute",
            "pathname": "/apps/:appid",
            "search": "",
          },
          "push": [Function],
          "replace": [Function],
        }
      }
    >
      <AppDetail>
        <Component
          dataTest="client-app-detail-container"
        >
          <div
            className=""
            data-test="client-app-detail-container"
          >
            <Component
              dataTest="client-app-detail-loader"
            >
              <div
                className="loader-spinner body"
                data-test="client-app-detail-loader"
              >
                <div />
                <div />
                <div />
                <div />
              </div>
            </Component>
            <AppUninstallConfirmation
              appDetailData={Object {}}
              closeUninstallConfirmationModal={[Function]}
              visible={false}
            >
              <Component
                afterClose={[Function]}
                footerItems={
                  <React.Fragment>
                    <Unknown
                      dataTest="agree-btn"
                      loading={false}
                      onClick={[Function]}
                      type="button"
                      variant="primary"
                    >
                      Confirm
                    </Unknown>
                    <Unknown
                      dataTest="disagree-btn"
                      disabled={false}
                      onClick={[Function]}
                      type="button"
                      variant="danger"
                    >
                      Cancel
                    </Unknown>
                  </React.Fragment>
                }
                title="Confirm undefined uninstallation"
                visible={false}
              />
              <Component
                HeaderComponent={[Function]}
                afterClose={[Function]}
                visible={false}
              />
            </AppUninstallConfirmation>
            <AppInstallConfirmation
              appDetailData={Object {}}
              closeInstallConfirmationModal={[Function]}
              visible={false}
            >
              <Component
                footer={
                  <div
                    className="flex"
                  >
                    <Unknown
                      dataTest="agree-btn"
                      loading={false}
                      onClick={[Function]}
                      type="button"
                      variant="primary"
                    >
                      Confirm
                    </Unknown>
                    <Unknown
                      dataTest="disagree-btn"
                      disabled={false}
                      onClick={[Function]}
                      type="button"
                      variant="danger"
                    >
                      Cancel
                    </Unknown>
                  </div>
                }
                isCentered={true}
                onClose={[Function]}
                title="Confirm undefined installation"
                visible={false}
              >
                <Component
                  className=""
                  destroyOnClose={true}
                  footer={
                    <div
                      className="flex"
                    >
                      <Unknown
                        dataTest="agree-btn"
                        loading={false}
                        onClick={[Function]}
                        type="button"
                        variant="primary"
                      >
                        Confirm
                      </Unknown>
                      <Unknown
                        dataTest="disagree-btn"
                        disabled={false}
                        onClick={[Function]}
                        type="button"
                        variant="danger"
                      >
                        Cancel
                      </Unknown>
                    </div>
                  }
                  onClose={[Function]}
                  title="Confirm undefined installation"
                  visible={false}
                  wrapClassName=""
                >
                  <PortalWrapper
                    visible={false}
                  />
                </Component>
              </Component>
              <Component
                afterClose={[Function]}
                appDetailData={Object {}}
                onSuccessAlertButtonClick={[Function]}
                visible={false}
              >
                <Component
                  isCentered={true}
                  isPadding={false}
                  onClose={[Function]}
                  visible={false}
                >
                  <Component
                    className=""
                    destroyOnClose={true}
                    onClose={[Function]}
                    visible={false}
                    wrapClassName=""
                  >
                    <PortalWrapper
                      visible={false}
                    />
                  </Component>
                </Component>
              </Component>
              <Component
                afterClose={[Function]}
                appDetailData={Object {}}
                onSuccessAlertButtonClick={[Function]}
                visible={false}
              >
                <Component
                  isCentered={true}
                  isPadding={false}
                  onClose={[Function]}
                  visible={false}
                >
                  <Component
                    className=""
                    destroyOnClose={true}
                    onClose={[Function]}
                    visible={false}
                    wrapClassName=""
                  >
                    <PortalWrapper
                      visible={false}
                    />
                  </Component>
                </Component>
              </Component>
            </AppInstallConfirmation>
          </div>
        </Component>
      </AppDetail>
    </Router>
  </MemoryRouter>
</Provider>
`;
