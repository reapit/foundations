// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ClientAppDetail renderAppHeaderButtonGroup should match snapshot 1`] = `
<div>
  <div
    className="flex ml-auto"
  >
    <Component
      dataTest="detail-modal-uninstall-button"
      onClick={[MockFunction]}
      type="button"
      variant="primary"
    >
      Uninstall App
    </Component>
  </div>
</div>
`;

exports[`ClientAppDetail renderAppHeaderButtonGroup should match snapshot 2`] = `
<div>
  <div
    className="flex ml-auto"
  >
    <Component
      dataTest="detail-modal-uninstall-button"
      onClick={[MockFunction]}
      type="button"
      variant="primary"
    >
      Uninstall App
    </Component>
  </div>
</div>
`;

exports[`ClientAppDetail should match a snapshot 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <MemoryRouter
    initialEntries={
      Array [
        Object {
          "key": "clientAppDetailRoute",
          "pathname": "/client/apps/:appid",
        },
      ]
    }
  >
    <Router
      history={
        Object {
          "action": "POP",
          "block": [Function],
          "canGo": [Function],
          "createHref": [Function],
          "entries": Array [
            Object {
              "hash": "",
              "key": "clientAppDetailRoute",
              "pathname": "/client/apps/:appid",
              "search": "",
            },
          ],
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "index": 0,
          "length": 1,
          "listen": [Function],
          "location": Object {
            "hash": "",
            "key": "clientAppDetailRoute",
            "pathname": "/client/apps/:appid",
            "search": "",
          },
          "push": [Function],
          "replace": [Function],
        }
      }
    >
      <ClientAppDetail>
        <Component
          dataTest="client-app-detail-loader"
        >
          <div
            className="loader-spinner body"
            data-test="client-app-detail-loader"
          >
            <div />
            <div />
            <div />
            <div />
          </div>
        </Component>
      </ClientAppDetail>
    </Router>
  </MemoryRouter>
</Provider>
`;

exports[`ClientAppDetail should not render loader when client.appDetail.data is not empty object and isLoadingAppDetail = true 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <MemoryRouter
    initialEntries={
      Array [
        Object {
          "key": "clientAppDetailRoute",
          "pathname": "/client/apps/:appid",
        },
      ]
    }
  >
    <Router
      history={
        Object {
          "action": "POP",
          "block": [Function],
          "canGo": [Function],
          "createHref": [Function],
          "entries": Array [
            Object {
              "hash": "",
              "key": "clientAppDetailRoute",
              "pathname": "/client/apps/:appid",
              "search": "",
            },
          ],
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "index": 0,
          "length": 1,
          "listen": [Function],
          "location": Object {
            "hash": "",
            "key": "clientAppDetailRoute",
            "pathname": "/client/apps/:appid",
            "search": "",
          },
          "push": [Function],
          "replace": [Function],
        }
      }
    >
      <ClientAppDetail>
        <div
          data-test="client-app-detail-container"
        >
          <AppHeader
            appDetailData={
              Object {
                "key": "value",
              }
            }
            buttonGroup={
              <React.Fragment>
                
              </React.Fragment>
            }
          >
            <Component
              className="is-vcentered "
            >
              <div
                className="columns  is-vcentered "
              >
                <Component
                  className="is-4"
                >
                  <div
                    className="column  is-4"
                  >
                    <div>
                      <img
                        className="image"
                        src="https://bulma.io/images/placeholders/48x48.png"
                      />
                    </div>
                  </div>
                </Component>
                <Component
                  className="is-8"
                >
                  <div
                    className="column  is-8"
                  >
                    <Component>
                      <h3
                        className="title is-3  "
                        id=""
                      />
                    </Component>
                  </div>
                </Component>
              </div>
            </Component>
          </AppHeader>
          <AppContent
            appDetailData={
              Object {
                "key": "value",
              }
            }
            desktopIntegrationTypes={Array []}
          >
            <div>
              <div />
              <div>
                <Component>
                  <h5
                    className="title is-5  "
                    id=""
                  >
                    Description
                  </h5>
                </Component>
                <Component
                  html=""
                >
                  <Component
                    className="html-render"
                  >
                    <div
                      className="content html-render"
                    />
                  </Component>
                </Component>
              </div>
              <div>
                <Component>
                  <h5
                    className="title is-5  "
                    id=""
                  >
                    Permission Required
                  </h5>
                </Component>
                <ul />
              </div>
              <Component
                header="Developer"
              >
                <div
                  data-test=""
                >
                  <Component>
                    <h5
                      className="title is-5  "
                      id=""
                    >
                      Developer
                    </h5>
                  </Component>
                  TBC
                </div>
              </Component>
              <Component
                header="About Developer"
              >
                <div
                  data-test=""
                >
                  <Component>
                    <h5
                      className="title is-5  "
                      id=""
                    >
                      About Developer
                    </h5>
                  </Component>
                  <p>
                    Lorem ipsum, dolor sit amet consectetur adipisicing elit. Magnam aliquid culpa saepe asperiores debitis illo dolorum dolore incidunt officiis praesentium, nemo similique veritatis exercitationem perferendis non mollitia animi laboriosam perspiciatis.
                  </p>
                </div>
              </Component>
              <Component
                header="Contact Developer"
              >
                <div
                  data-test=""
                >
                  <Component>
                    <h5
                      className="title is-5  "
                      id=""
                    >
                      Contact Developer
                    </h5>
                  </Component>
                  <Component
                    type="button"
                    variant="primary"
                  >
                    <button
                      className="button  is-primary  "
                      data-test=""
                      disabled={false}
                      type="button"
                    >
                      NEED HELP?
                    </button>
                  </Component>
                </div>
              </Component>
            </div>
          </AppContent>
        </div>
      </ClientAppDetail>
    </Router>
  </MemoryRouter>
</Provider>
`;

exports[`ClientAppDetail should render loader when client.appDetail.data is an empty object 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <MemoryRouter
    initialEntries={
      Array [
        Object {
          "key": "clientAppDetailRoute",
          "pathname": "/client/apps/:appid",
        },
      ]
    }
  >
    <Router
      history={
        Object {
          "action": "POP",
          "block": [Function],
          "canGo": [Function],
          "createHref": [Function],
          "entries": Array [
            Object {
              "hash": "",
              "key": "clientAppDetailRoute",
              "pathname": "/client/apps/:appid",
              "search": "",
            },
          ],
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "index": 0,
          "length": 1,
          "listen": [Function],
          "location": Object {
            "hash": "",
            "key": "clientAppDetailRoute",
            "pathname": "/client/apps/:appid",
            "search": "",
          },
          "push": [Function],
          "replace": [Function],
        }
      }
    >
      <ClientAppDetail>
        <Component
          dataTest="client-app-detail-loader"
        >
          <div
            className="loader-spinner body"
            data-test="client-app-detail-loader"
          >
            <div />
            <div />
            <div />
            <div />
          </div>
        </Component>
      </ClientAppDetail>
    </Router>
  </MemoryRouter>
</Provider>
`;

exports[`ClientAppDetail should render loader when isLoadingAppDetail = true 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <MemoryRouter
    initialEntries={
      Array [
        Object {
          "key": "clientAppDetailRoute",
          "pathname": "/client/apps/:appid",
        },
      ]
    }
  >
    <Router
      history={
        Object {
          "action": "POP",
          "block": [Function],
          "canGo": [Function],
          "createHref": [Function],
          "entries": Array [
            Object {
              "hash": "",
              "key": "clientAppDetailRoute",
              "pathname": "/client/apps/:appid",
              "search": "",
            },
          ],
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "index": 0,
          "length": 1,
          "listen": [Function],
          "location": Object {
            "hash": "",
            "key": "clientAppDetailRoute",
            "pathname": "/client/apps/:appid",
            "search": "",
          },
          "push": [Function],
          "replace": [Function],
        }
      }
    >
      <ClientAppDetail>
        <Component
          dataTest="client-app-detail-loader"
        >
          <div
            className="loader-spinner body"
            data-test="client-app-detail-loader"
          >
            <div />
            <div />
            <div />
            <div />
          </div>
        </Component>
      </ClientAppDetail>
    </Router>
  </MemoryRouter>
</Provider>
`;
