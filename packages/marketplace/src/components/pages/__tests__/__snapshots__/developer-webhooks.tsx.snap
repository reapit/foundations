// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`DeveloperWebHooks should match a snapshot 1`] = `
<Component
  hasPadding={true}
>
  <Component
    flexColumn={true}
    hasBackground={true}
    hasPadding={true}
  >
    <Component>
      Manage Webhook Subscriptions
    </Component>
    <Component>
      <Component>
        Our webhooks system allows your application to directly subscribe to events happening in our customers data. Rather than needing to make API calls to poll for new information, a webhook subscription can be created to allow Reapit Foundations to send a HTTP request directly to your endpoints that you configure here.
      </Component>
      <Component>
        This system is designed to flexibly work with how your application is built and deployed. If you wish, you can set up a single endpoint to catch all topics for all customers. Alternatively, you may wish to set up a different webhook subscription per topic or per customer. For more information about Webhooks, please see our
         
        <a
          className={[Function]}
          href="/developer/api-docs/api/webhooks"
          rel="noopener noreferrer"
          target="_blank"
        >
          webhooks documentation
        </a>
      </Component>
      <Formik
        enableReinitialize={true}
        initialValues={
          Object {
            "applicationId": "",
          }
        }
        onSubmit={[Function]}
      >
        <Component />
      </Formik>
      <Component>
        <Component />
      </Component>
    </Component>
  </Component>
</Component>
`;

exports[`DeveloperWebHooks should match a snapshot 2`] = `
<Component
  hasPadding={true}
>
  <Component
    flexColumn={true}
    hasBackground={true}
    hasPadding={true}
  >
    <Component>
      Manage Webhook Subscriptions
    </Component>
    <Component>
      <Component>
        Our webhooks system allows your application to directly subscribe to events happening in our customers data. Rather than needing to make API calls to poll for new information, a webhook subscription can be created to allow Reapit Foundations to send a HTTP request directly to your endpoints that you configure here.
      </Component>
      <Component>
        This system is designed to flexibly work with how your application is built and deployed. If you wish, you can set up a single endpoint to catch all topics for all customers. Alternatively, you may wish to set up a different webhook subscription per topic or per customer. For more information about Webhooks, please see our
         
        <a
          className={[Function]}
          href="/developer/api-docs/api/webhooks"
          rel="noopener noreferrer"
          target="_blank"
        >
          webhooks documentation
        </a>
      </Component>
      <Formik
        enableReinitialize={true}
        initialValues={
          Object {
            "applicationId": "",
          }
        }
        onSubmit={[Function]}
      >
        <Component />
      </Formik>
      <Component>
        <Component />
      </Component>
      <Component
        columns={
          Array [
            Object {
              "Header": "URL",
              "accessor": "url",
            },
            Object {
              "Cell": [Function],
              "Header": "Topics",
              "accessor": "topics",
            },
            Object {
              "Cell": [Function],
              "Header": "Customer",
              "accessor": "customer",
            },
            Object {
              "Header": "Test Webhook",
              "accessor": "test",
            },
            Object {
              "Header": "Edit",
              "accessor": "edit",
            },
          ]
        }
        data={
          Array [
            Object {
              "customer": Array [
                "string",
              ],
              "edit": <Unknown
                dataTest="edit-btn"
                onClick={[Function]}
                type="button"
                variant="primary"
              >
                Edit
              </Unknown>,
              "test": <a
                onClick={[Function]}
              >
                Ping
              </a>,
              "topics": Array [],
              "url": "string",
            },
          ]
        }
        loading={false}
        scrollable={true}
      />
    </Component>
  </Component>
</Component>
`;
