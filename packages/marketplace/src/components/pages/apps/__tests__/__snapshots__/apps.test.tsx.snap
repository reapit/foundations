// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Client should match a snapshot when LOADING false 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <MemoryRouter
    initialEntries={
      Array [
        Object {
          "key": "clientRoute",
          "pathname": "/apps",
        },
      ]
    }
  >
    <Router
      history={
        Object {
          "action": "POP",
          "block": [Function],
          "canGo": [Function],
          "createHref": [Function],
          "entries": Array [
            Object {
              "hash": "",
              "key": "clientRoute",
              "pathname": "/apps",
              "search": "",
            },
          ],
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "index": 0,
          "length": 1,
          "listen": [Function],
          "location": Object {
            "hash": "",
            "key": "clientRoute",
            "pathname": "/apps",
            "search": "",
          },
          "push": [Function],
          "replace": [Function],
        }
      }
    >
      <Component>
        <ErrorBoundary>
          <Component
            hasBackground={false}
            hasMargin={false}
            hasPadding={false}
            isFlex={true}
            isFlexColumn={true}
          >
            <section
              className=""
              data-test=""
            >
              <Component
                isHeadingSection={true}
              >
                <h3
                  className=""
                  id=""
                >
                  Browse Apps
                </h3>
              </Component>
              <InfiniteScroll
                dataLength={0}
                hasMore={false}
                loader={<Unknown />}
                next={[Function]}
                scrollThreshold={0.5}
                scrollableTarget="app-root-container"
              >
                <div
                  className="infinite-scroll-component__outerdiv"
                  style={Object {}}
                >
                  <div
                    className="infinite-scroll-component "
                    style={
                      Object {
                        "WebkitOverflowScrolling": "touch",
                        "height": "auto",
                        "overflow": "auto",
                      }
                    }
                  >
                    <TransitionGroup
                      childFactory={[Function]}
                      component="div"
                    >
                      <div>
                        <Component
                          animated={true}
                          in={true}
                          infoType="CLIENT_APPS_EMPTY"
                          key=".0"
                          list={Array []}
                          loading={false}
                          onCardClick={[Function]}
                          onExited={[Function]}
                        >
                          <div
                            className="overflow-hidden mb-4"
                          >
                            <Component
                              variant="info"
                            >
                              <div
                                className="notification helper-wrap helper-info"
                              >
                                We are sorry, there are no apps listed compatible with your account
                              </div>
                            </Component>
                          </div>
                        </Component>
                      </div>
                    </TransitionGroup>
                  </div>
                </div>
              </InfiniteScroll>
              <div
                className="bb mb-4"
              />
              <ComingSoonApps
                setComingSoonAppSectionHeight={[Function]}
              >
                <div
                  id="coming-soon-section"
                >
                  <Component
                    isMultiLine={true}
                  >
                    <div
                      className=""
                      data-test=""
                    />
                  </Component>
                </div>
              </ComingSoonApps>
            </section>
          </Component>
        </ErrorBoundary>
      </Component>
    </Router>
  </MemoryRouter>
</Provider>
`;

exports[`Client should match a snapshot when LOADING false 2`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <MemoryRouter
    initialEntries={
      Array [
        Object {
          "key": "clientRoute",
          "pathname": "/apps",
        },
      ]
    }
  >
    <Router
      history={
        Object {
          "action": "POP",
          "block": [Function],
          "canGo": [Function],
          "createHref": [Function],
          "entries": Array [
            Object {
              "hash": "",
              "key": "clientRoute",
              "pathname": "/apps",
              "search": "",
            },
          ],
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "index": 0,
          "length": 1,
          "listen": [Function],
          "location": Object {
            "hash": "",
            "key": "clientRoute",
            "pathname": "/apps",
            "search": "",
          },
          "push": [Function],
          "replace": [Function],
        }
      }
    >
      <Component>
        <ErrorBoundary>
          <Component
            hasBackground={false}
            hasMargin={false}
            hasPadding={false}
            isFlex={true}
            isFlexColumn={true}
          >
            <section
              className=""
              data-test=""
            >
              <Component
                isHeadingSection={true}
              >
                <h3
                  className=""
                  id=""
                >
                  Browse Apps
                </h3>
              </Component>
              <InfiniteScroll
                dataLength={0}
                hasMore={false}
                loader={<Unknown />}
                next={[Function]}
                scrollThreshold={0.5}
                scrollableTarget="app-root-container"
              >
                <div
                  className="infinite-scroll-component__outerdiv"
                  style={Object {}}
                >
                  <div
                    className="infinite-scroll-component "
                    style={
                      Object {
                        "WebkitOverflowScrolling": "touch",
                        "height": "auto",
                        "overflow": "auto",
                      }
                    }
                  >
                    <TransitionGroup
                      childFactory={[Function]}
                      component="div"
                    >
                      <div>
                        <Component
                          animated={true}
                          in={true}
                          infoType="CLIENT_APPS_EMPTY"
                          key=".0"
                          list={Array []}
                          loading={true}
                          onCardClick={[Function]}
                          onExited={[Function]}
                        >
                          <div
                            className="overflow-hidden mb-4"
                          >
                            <Component
                              className=" undefined"
                              data-test="app-list-container"
                            >
                              <div
                                className=""
                                data-test=""
                              />
                            </Component>
                            <Component
                              body={true}
                            >
                              <div
                                className="loader-spinner body"
                                data-test=""
                              >
                                <div />
                                <div />
                                <div />
                                <div />
                              </div>
                            </Component>
                          </div>
                        </Component>
                      </div>
                    </TransitionGroup>
                  </div>
                </div>
              </InfiniteScroll>
              <div
                className="bb mb-4"
              />
              <ComingSoonApps
                setComingSoonAppSectionHeight={[Function]}
              >
                <div
                  id="coming-soon-section"
                >
                  <Component
                    isMultiLine={true}
                  >
                    <div
                      className=""
                      data-test=""
                    />
                  </Component>
                </div>
              </ComingSoonApps>
            </section>
          </Component>
        </ErrorBoundary>
      </Component>
    </Router>
  </MemoryRouter>
</Provider>
`;

exports[`Client should match a snapshot when featured apps is empty [] 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <MemoryRouter
    initialEntries={
      Array [
        Object {
          "key": "clientRoute",
          "pathname": "/apps",
        },
      ]
    }
  >
    <Router
      history={
        Object {
          "action": "POP",
          "block": [Function],
          "canGo": [Function],
          "createHref": [Function],
          "entries": Array [
            Object {
              "hash": "",
              "key": "clientRoute",
              "pathname": "/apps",
              "search": "",
            },
          ],
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "index": 0,
          "length": 1,
          "listen": [Function],
          "location": Object {
            "hash": "",
            "key": "clientRoute",
            "pathname": "/apps",
            "search": "",
          },
          "push": [Function],
          "replace": [Function],
        }
      }
    >
      <Component>
        <ErrorBoundary>
          <p>
            Something went wrong here, try refreshing your page.
          </p>
        </ErrorBoundary>
      </Component>
    </Router>
  </MemoryRouter>
</Provider>
`;

exports[`Client should match a snapshot when featured apps is null 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <MemoryRouter
    initialEntries={
      Array [
        Object {
          "key": "clientRoute",
          "pathname": "/apps",
        },
      ]
    }
  >
    <Router
      history={
        Object {
          "action": "POP",
          "block": [Function],
          "canGo": [Function],
          "createHref": [Function],
          "entries": Array [
            Object {
              "hash": "",
              "key": "clientRoute",
              "pathname": "/apps",
              "search": "",
            },
          ],
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "index": 0,
          "length": 1,
          "listen": [Function],
          "location": Object {
            "hash": "",
            "key": "clientRoute",
            "pathname": "/apps",
            "search": "",
          },
          "push": [Function],
          "replace": [Function],
        }
      }
    >
      <Component>
        <ErrorBoundary>
          <p>
            Something went wrong here, try refreshing your page.
          </p>
        </ErrorBoundary>
      </Component>
    </Router>
  </MemoryRouter>
</Provider>
`;
