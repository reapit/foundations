// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`AppSearchFilters should match a snapshot 1`] = `
{
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <mock-styled.div />
      <mock-styled.div
        classname="mock-css.
  flex-direction: column;
"
      >
        <mock-styled.p
          classname="mock-css.
  margin-top: 1.25rem;
  min-height: 1.5rem;
 mock-css.
  display: flex;

  , {
    display: none;
  }
 mock-css."
        >
          Browse By
        </mock-styled.p>
      </mock-styled.div>
      <mock-styled.div
        classname="mock-css.
  justify-content: space-between;
"
      >
        <mock-styled.p
          classname="mock-css.
  display: none;

  , {
    display: flex;
  }
 mock-css."
        >
          Browse By
        </mock-styled.p>
      </mock-styled.div>
      <mock-styled.div
        classname="mock-css.
  @keyframes fade-in {
    from {
      opacity: 0;
    }

    to {
      opacity: 1;
    }
  }
  animation-duration: 0.5s;
  animation-fill-mode: both;
  animation-delay: 0.1s;
  animation-name: fade-in;
 mock-css.
  width: 100%;
  border: 1px solid var(--color-grey-150);
  margin-bottom: 1.25rem;
  border-radius: 0.125rem;
"
      >
        <mock-styled.input
          checked="false"
          id="9"
          name="Tools"
          type="checkbox"
          value="9"
        />
        <mock-styled.label
          classname="mock-css."
          htmlfor="9"
        >
          Tools
        </mock-styled.label>
        <mock-styled.input
          checked="false"
          id="8"
          name="Social"
          type="checkbox"
          value="8"
        />
        <mock-styled.label
          classname="mock-css."
          htmlfor="8"
        >
          Social
        </mock-styled.label>
        <mock-styled.input
          checked="false"
          id="7"
          name="Marketing"
          type="checkbox"
          value="7"
        />
        <mock-styled.label
          classname="mock-css."
          htmlfor="7"
        >
          Marketing
        </mock-styled.label>
        <mock-styled.input
          checked="false"
          id="6"
          name="Communication"
          type="checkbox"
          value="6"
        />
        <mock-styled.label
          classname="mock-css."
          htmlfor="6"
        >
          Communication
        </mock-styled.label>
        <mock-styled.input
          checked="false"
          id="5"
          name="Media"
          type="checkbox"
          value="5"
        />
        <mock-styled.label
          classname="mock-css."
          htmlfor="5"
        >
          Media
        </mock-styled.label>
        <mock-styled.input
          checked="false"
          id="4"
          name="Events"
          type="checkbox"
          value="4"
        />
        <mock-styled.label
          classname="mock-css."
          htmlfor="4"
        >
          Events
        </mock-styled.label>
        <mock-styled.input
          checked="false"
          id="3"
          name="Finance"
          type="checkbox"
          value="3"
        />
        <mock-styled.label
          classname="mock-css."
          htmlfor="3"
        >
          Finance
        </mock-styled.label>
        <mock-styled.input
          checked="false"
          id="2"
          name="Productivity"
          type="checkbox"
          value="2"
        />
        <mock-styled.label
          classname="mock-css."
          htmlfor="2"
        >
          Productivity
        </mock-styled.label>
        <mock-styled.input
          checked="false"
          id="1"
          name="Other"
          type="checkbox"
          value="1"
        />
        <mock-styled.label
          classname="mock-css."
          htmlfor="1"
        >
          Other
        </mock-styled.label>
      </mock-styled.div>
      <mock-styled.div
        classname="mock-css.
  display: none;

  , {
    display: flex;
  }
"
      >
        <mock-styled.div
          classname="mock-css.
  align-items: center;
 mock-css.
  width: 100%;

  , {
    margin-bottom: 2.5rem;
    width: 50%;
  }

  , {
    width: 33.33%;
  }

  , {
    width: 25%;
  }
 mock-css.
  margin-right: 0.75rem;
"
        >
          <mock-styled.span
            classname="mock-css.
  border-radius: 0.125rem 0 0 0.125rem;
  padding: 0 0.5rem 0 1.25rem;
  height: 2.25rem;
  display: flex;
  justify-content: center;
  align-items: center;
  border: 1px solid var(--color-grey-150);
  border-right: none;

  &:has(+ input:focus) {
    border: 1px solid var(--intent-primary);
    border-right: none;
  }
"
            style="font-size: 1.25rem;"
          >
            <svg
              style="font-size: 1.25rem;"
            />
          </mock-styled.span>
          <mock-styled.input
            placeholder="Search by App or Developer"
            type="text"
          />
        </mock-styled.div>
      </mock-styled.div>
    </div>
  </body>,
  "container": <div>
    <mock-styled.div />
    <mock-styled.div
      classname="mock-css.
  flex-direction: column;
"
    >
      <mock-styled.p
        classname="mock-css.
  margin-top: 1.25rem;
  min-height: 1.5rem;
 mock-css.
  display: flex;

  , {
    display: none;
  }
 mock-css."
      >
        Browse By
      </mock-styled.p>
    </mock-styled.div>
    <mock-styled.div
      classname="mock-css.
  justify-content: space-between;
"
    >
      <mock-styled.p
        classname="mock-css.
  display: none;

  , {
    display: flex;
  }
 mock-css."
      >
        Browse By
      </mock-styled.p>
    </mock-styled.div>
    <mock-styled.div
      classname="mock-css.
  @keyframes fade-in {
    from {
      opacity: 0;
    }

    to {
      opacity: 1;
    }
  }
  animation-duration: 0.5s;
  animation-fill-mode: both;
  animation-delay: 0.1s;
  animation-name: fade-in;
 mock-css.
  width: 100%;
  border: 1px solid var(--color-grey-150);
  margin-bottom: 1.25rem;
  border-radius: 0.125rem;
"
    >
      <mock-styled.input
        checked="false"
        id="9"
        name="Tools"
        type="checkbox"
        value="9"
      />
      <mock-styled.label
        classname="mock-css."
        htmlfor="9"
      >
        Tools
      </mock-styled.label>
      <mock-styled.input
        checked="false"
        id="8"
        name="Social"
        type="checkbox"
        value="8"
      />
      <mock-styled.label
        classname="mock-css."
        htmlfor="8"
      >
        Social
      </mock-styled.label>
      <mock-styled.input
        checked="false"
        id="7"
        name="Marketing"
        type="checkbox"
        value="7"
      />
      <mock-styled.label
        classname="mock-css."
        htmlfor="7"
      >
        Marketing
      </mock-styled.label>
      <mock-styled.input
        checked="false"
        id="6"
        name="Communication"
        type="checkbox"
        value="6"
      />
      <mock-styled.label
        classname="mock-css."
        htmlfor="6"
      >
        Communication
      </mock-styled.label>
      <mock-styled.input
        checked="false"
        id="5"
        name="Media"
        type="checkbox"
        value="5"
      />
      <mock-styled.label
        classname="mock-css."
        htmlfor="5"
      >
        Media
      </mock-styled.label>
      <mock-styled.input
        checked="false"
        id="4"
        name="Events"
        type="checkbox"
        value="4"
      />
      <mock-styled.label
        classname="mock-css."
        htmlfor="4"
      >
        Events
      </mock-styled.label>
      <mock-styled.input
        checked="false"
        id="3"
        name="Finance"
        type="checkbox"
        value="3"
      />
      <mock-styled.label
        classname="mock-css."
        htmlfor="3"
      >
        Finance
      </mock-styled.label>
      <mock-styled.input
        checked="false"
        id="2"
        name="Productivity"
        type="checkbox"
        value="2"
      />
      <mock-styled.label
        classname="mock-css."
        htmlfor="2"
      >
        Productivity
      </mock-styled.label>
      <mock-styled.input
        checked="false"
        id="1"
        name="Other"
        type="checkbox"
        value="1"
      />
      <mock-styled.label
        classname="mock-css."
        htmlfor="1"
      >
        Other
      </mock-styled.label>
    </mock-styled.div>
    <mock-styled.div
      classname="mock-css.
  display: none;

  , {
    display: flex;
  }
"
    >
      <mock-styled.div
        classname="mock-css.
  align-items: center;
 mock-css.
  width: 100%;

  , {
    margin-bottom: 2.5rem;
    width: 50%;
  }

  , {
    width: 33.33%;
  }

  , {
    width: 25%;
  }
 mock-css.
  margin-right: 0.75rem;
"
      >
        <mock-styled.span
          classname="mock-css.
  border-radius: 0.125rem 0 0 0.125rem;
  padding: 0 0.5rem 0 1.25rem;
  height: 2.25rem;
  display: flex;
  justify-content: center;
  align-items: center;
  border: 1px solid var(--color-grey-150);
  border-right: none;

  &:has(+ input:focus) {
    border: 1px solid var(--intent-primary);
    border-right: none;
  }
"
          style="font-size: 1.25rem;"
        >
          <svg
            style="font-size: 1.25rem;"
          />
        </mock-styled.span>
        <mock-styled.input
          placeholder="Search by App or Developer"
          type="text"
        />
      </mock-styled.div>
    </mock-styled.div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`AppSearchFilters should match a snapshot where has search 1`] = `
{
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <mock-styled.div />
      <mock-styled.div
        classname="mock-css.
  flex-direction: column;
"
      >
        <mock-styled.div
          classname="mock-css."
        >
          <mock-styled.div
            classname="mock-css.
  align-items: center;
 mock-css.
  width: 100%;

  , {
    margin-bottom: 2.5rem;
    width: 50%;
  }

  , {
    width: 33.33%;
  }

  , {
    width: 25%;
  }
"
          >
            <mock-styled.span
              classname="mock-css.
  border-radius: 0.125rem 0 0 0.125rem;
  padding: 0 0.5rem 0 1.25rem;
  height: 2.25rem;
  display: flex;
  justify-content: center;
  align-items: center;
  border: 1px solid var(--color-grey-150);
  border-right: none;

  &:has(+ input:focus) {
    border: 1px solid var(--intent-primary);
    border-right: none;
  }
"
              style="font-size: 1.25rem;"
            >
              <svg
                style="font-size: 1.25rem;"
              />
            </mock-styled.span>
            <mock-styled.input
              placeholder="Search by App or Developer"
              type="text"
            />
          </mock-styled.div>
        </mock-styled.div>
      </mock-styled.div>
      <mock-styled.div
        classname="mock-css.
  justify-content: space-between;
"
      >
        <mock-styled.p
          classname="mock-css.
  display: none;

  , {
    display: flex;
  }
 mock-css."
        >
          Browse By
        </mock-styled.p>
      </mock-styled.div>
      <mock-styled.div
        classname="mock-css.
  @keyframes fade-in {
    from {
      opacity: 0;
    }

    to {
      opacity: 1;
    }
  }
  animation-duration: 0.5s;
  animation-fill-mode: both;
  animation-delay: 0.1s;
  animation-name: fade-in;
 mock-css.
  width: 100%;
  border: 1px solid var(--color-grey-150);
  margin-bottom: 1.25rem;
  border-radius: 0.125rem;
 mock-css.
  display: none;

  , {
    display: flex;
  }
"
      >
        <mock-styled.input
          checked="false"
          id="9"
          name="Tools"
          type="checkbox"
          value="9"
        />
        <mock-styled.label
          classname="mock-css."
          htmlfor="9"
        >
          Tools
        </mock-styled.label>
        <mock-styled.input
          checked="false"
          id="8"
          name="Social"
          type="checkbox"
          value="8"
        />
        <mock-styled.label
          classname="mock-css."
          htmlfor="8"
        >
          Social
        </mock-styled.label>
        <mock-styled.input
          checked="false"
          id="7"
          name="Marketing"
          type="checkbox"
          value="7"
        />
        <mock-styled.label
          classname="mock-css."
          htmlfor="7"
        >
          Marketing
        </mock-styled.label>
        <mock-styled.input
          checked="false"
          id="6"
          name="Communication"
          type="checkbox"
          value="6"
        />
        <mock-styled.label
          classname="mock-css."
          htmlfor="6"
        >
          Communication
        </mock-styled.label>
        <mock-styled.input
          checked="false"
          id="5"
          name="Media"
          type="checkbox"
          value="5"
        />
        <mock-styled.label
          classname="mock-css."
          htmlfor="5"
        >
          Media
        </mock-styled.label>
        <mock-styled.input
          checked="false"
          id="4"
          name="Events"
          type="checkbox"
          value="4"
        />
        <mock-styled.label
          classname="mock-css."
          htmlfor="4"
        >
          Events
        </mock-styled.label>
        <mock-styled.input
          checked="false"
          id="3"
          name="Finance"
          type="checkbox"
          value="3"
        />
        <mock-styled.label
          classname="mock-css."
          htmlfor="3"
        >
          Finance
        </mock-styled.label>
        <mock-styled.input
          checked="false"
          id="2"
          name="Productivity"
          type="checkbox"
          value="2"
        />
        <mock-styled.label
          classname="mock-css."
          htmlfor="2"
        >
          Productivity
        </mock-styled.label>
        <mock-styled.input
          checked="false"
          id="1"
          name="Other"
          type="checkbox"
          value="1"
        />
        <mock-styled.label
          classname="mock-css."
          htmlfor="1"
        >
          Other
        </mock-styled.label>
      </mock-styled.div>
      <mock-styled.div
        classname="mock-css.
  display: flex;

  , {
    display: none;
  }
 mock-css.
  margin-bottom: 0.75rem;
"
      >
        <mock-styled.div
          classname=""
        >
          <mock-styled.button
            classname="mock-css."
          >
            <mock-styled.div />
            Clear Search Filters
          </mock-styled.button>
        </mock-styled.div>
      </mock-styled.div>
      <mock-styled.div
        classname="mock-css.
  display: none;

  , {
    display: flex;
  }
"
      >
        <mock-styled.div
          classname="mock-css.
  align-items: center;
 mock-css.
  width: 100%;

  , {
    margin-bottom: 2.5rem;
    width: 50%;
  }

  , {
    width: 33.33%;
  }

  , {
    width: 25%;
  }
 mock-css.
  margin-right: 0.75rem;
"
        >
          <mock-styled.span
            classname="mock-css.
  border-radius: 0.125rem 0 0 0.125rem;
  padding: 0 0.5rem 0 1.25rem;
  height: 2.25rem;
  display: flex;
  justify-content: center;
  align-items: center;
  border: 1px solid var(--color-grey-150);
  border-right: none;

  &:has(+ input:focus) {
    border: 1px solid var(--intent-primary);
    border-right: none;
  }
"
            style="font-size: 1.25rem;"
          >
            <svg
              style="font-size: 1.25rem;"
            />
          </mock-styled.span>
          <mock-styled.input
            placeholder="Search by App or Developer"
            type="text"
          />
        </mock-styled.div>
        <mock-styled.button
          classname="mock-css."
        >
          <mock-styled.div />
          Clear Search Filters
        </mock-styled.button>
      </mock-styled.div>
    </div>
  </body>,
  "container": <div>
    <mock-styled.div />
    <mock-styled.div
      classname="mock-css.
  flex-direction: column;
"
    >
      <mock-styled.div
        classname="mock-css."
      >
        <mock-styled.div
          classname="mock-css.
  align-items: center;
 mock-css.
  width: 100%;

  , {
    margin-bottom: 2.5rem;
    width: 50%;
  }

  , {
    width: 33.33%;
  }

  , {
    width: 25%;
  }
"
        >
          <mock-styled.span
            classname="mock-css.
  border-radius: 0.125rem 0 0 0.125rem;
  padding: 0 0.5rem 0 1.25rem;
  height: 2.25rem;
  display: flex;
  justify-content: center;
  align-items: center;
  border: 1px solid var(--color-grey-150);
  border-right: none;

  &:has(+ input:focus) {
    border: 1px solid var(--intent-primary);
    border-right: none;
  }
"
            style="font-size: 1.25rem;"
          >
            <svg
              style="font-size: 1.25rem;"
            />
          </mock-styled.span>
          <mock-styled.input
            placeholder="Search by App or Developer"
            type="text"
          />
        </mock-styled.div>
      </mock-styled.div>
    </mock-styled.div>
    <mock-styled.div
      classname="mock-css.
  justify-content: space-between;
"
    >
      <mock-styled.p
        classname="mock-css.
  display: none;

  , {
    display: flex;
  }
 mock-css."
      >
        Browse By
      </mock-styled.p>
    </mock-styled.div>
    <mock-styled.div
      classname="mock-css.
  @keyframes fade-in {
    from {
      opacity: 0;
    }

    to {
      opacity: 1;
    }
  }
  animation-duration: 0.5s;
  animation-fill-mode: both;
  animation-delay: 0.1s;
  animation-name: fade-in;
 mock-css.
  width: 100%;
  border: 1px solid var(--color-grey-150);
  margin-bottom: 1.25rem;
  border-radius: 0.125rem;
 mock-css.
  display: none;

  , {
    display: flex;
  }
"
    >
      <mock-styled.input
        checked="false"
        id="9"
        name="Tools"
        type="checkbox"
        value="9"
      />
      <mock-styled.label
        classname="mock-css."
        htmlfor="9"
      >
        Tools
      </mock-styled.label>
      <mock-styled.input
        checked="false"
        id="8"
        name="Social"
        type="checkbox"
        value="8"
      />
      <mock-styled.label
        classname="mock-css."
        htmlfor="8"
      >
        Social
      </mock-styled.label>
      <mock-styled.input
        checked="false"
        id="7"
        name="Marketing"
        type="checkbox"
        value="7"
      />
      <mock-styled.label
        classname="mock-css."
        htmlfor="7"
      >
        Marketing
      </mock-styled.label>
      <mock-styled.input
        checked="false"
        id="6"
        name="Communication"
        type="checkbox"
        value="6"
      />
      <mock-styled.label
        classname="mock-css."
        htmlfor="6"
      >
        Communication
      </mock-styled.label>
      <mock-styled.input
        checked="false"
        id="5"
        name="Media"
        type="checkbox"
        value="5"
      />
      <mock-styled.label
        classname="mock-css."
        htmlfor="5"
      >
        Media
      </mock-styled.label>
      <mock-styled.input
        checked="false"
        id="4"
        name="Events"
        type="checkbox"
        value="4"
      />
      <mock-styled.label
        classname="mock-css."
        htmlfor="4"
      >
        Events
      </mock-styled.label>
      <mock-styled.input
        checked="false"
        id="3"
        name="Finance"
        type="checkbox"
        value="3"
      />
      <mock-styled.label
        classname="mock-css."
        htmlfor="3"
      >
        Finance
      </mock-styled.label>
      <mock-styled.input
        checked="false"
        id="2"
        name="Productivity"
        type="checkbox"
        value="2"
      />
      <mock-styled.label
        classname="mock-css."
        htmlfor="2"
      >
        Productivity
      </mock-styled.label>
      <mock-styled.input
        checked="false"
        id="1"
        name="Other"
        type="checkbox"
        value="1"
      />
      <mock-styled.label
        classname="mock-css."
        htmlfor="1"
      >
        Other
      </mock-styled.label>
    </mock-styled.div>
    <mock-styled.div
      classname="mock-css.
  display: flex;

  , {
    display: none;
  }
 mock-css.
  margin-bottom: 0.75rem;
"
    >
      <mock-styled.div
        classname=""
      >
        <mock-styled.button
          classname="mock-css."
        >
          <mock-styled.div />
          Clear Search Filters
        </mock-styled.button>
      </mock-styled.div>
    </mock-styled.div>
    <mock-styled.div
      classname="mock-css.
  display: none;

  , {
    display: flex;
  }
"
    >
      <mock-styled.div
        classname="mock-css.
  align-items: center;
 mock-css.
  width: 100%;

  , {
    margin-bottom: 2.5rem;
    width: 50%;
  }

  , {
    width: 33.33%;
  }

  , {
    width: 25%;
  }
 mock-css.
  margin-right: 0.75rem;
"
      >
        <mock-styled.span
          classname="mock-css.
  border-radius: 0.125rem 0 0 0.125rem;
  padding: 0 0.5rem 0 1.25rem;
  height: 2.25rem;
  display: flex;
  justify-content: center;
  align-items: center;
  border: 1px solid var(--color-grey-150);
  border-right: none;

  &:has(+ input:focus) {
    border: 1px solid var(--intent-primary);
    border-right: none;
  }
"
          style="font-size: 1.25rem;"
        >
          <svg
            style="font-size: 1.25rem;"
          />
        </mock-styled.span>
        <mock-styled.input
          placeholder="Search by App or Developer"
          type="text"
        />
      </mock-styled.div>
      <mock-styled.button
        classname="mock-css."
      >
        <mock-styled.div />
        Clear Search Filters
      </mock-styled.button>
    </mock-styled.div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;
