/* eslint-disable */
module.exports = {
name: "@yarnpkg/plugin-changed",
factory: function (require) {
var plugin;plugin=(()=>{"use strict";var e={368:(e,t,o)=>{o.r(t),o.d(t,{default:()=>h});var n=o(594),r=o(42),a=o(966);function s(e){const{project:t}=e,o=new Set;return function e({manifest:n}){for(const r of a.Manifest.hardDependencies)for(const a of n.getForScope(r).values()){const n=t.tryWorkspaceByDescriptor(a);n&&!o.has(n)&&(o.add(n),e(n))}}(e),[...o]}function i(e){const t=new Set;for(const o of e.project.workspaces){s(o).some(t=>a.structUtils.areLocatorsEqual(t.locator,e.locator))&&t.add(o)}return[...t]}var c=function(e,t,o,n){var r,a=arguments.length,s=a<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,o):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,o,n);else for(var i=e.length-1;i>=0;i--)(r=e[i])&&(s=(a<3?r(s):a>3?r(t,o,s):r(t,o))||s);return a>3&&s&&Object.defineProperty(t,o,s),s};class d extends n.BaseCommand{constructor(){super(...arguments),this.gitRange="",this.include=[],this.exclude=[]}async listWorkspaces(e){const{stdout:t}=await a.execUtils.execvp("git",["diff","--name-only",...this.gitRange?[this.gitRange]:[]],{cwd:e.cwd,strict:!0});return function(e,t){const o=new Set;for(const n of e.workspaces){if(t.some(e=>e.startsWith(n.relativeCwd))&&!o.has(n)){o.add(n);for(const e of i(n))o.add(e)}}return[...o]}(e,t.split(/\r?\n/)).filter(e=>{const t=a.structUtils.stringifyIdent(e.locator);if(t){if(this.include.length&&!this.include.includes(t))return!1;if(this.exclude.length&&this.exclude.includes(t))return!1}return!0})}}c([r.Command.String("--git-range")],d.prototype,"gitRange",void 0),c([r.Command.Array("--include")],d.prototype,"include",void 0),c([r.Command.Array("--exclude")],d.prototype,"exclude",void 0);var l=function(e,t,o,n){var r,a=arguments.length,s=a<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,o):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,o,n);else for(var i=e.length-1;i>=0;i--)(r=e[i])&&(s=(a<3?r(s):a>3?r(t,o,s):r(t,o))||s);return a>3&&s&&Object.defineProperty(t,o,s),s};class p extends d{constructor(){super(...arguments),this.json=!1}async execute(){const e=await a.Configuration.find(this.context.cwd,this.context.plugins),{project:t,workspace:o}=await a.Project.find(e,this.context.cwd);if(!o)throw new n.WorkspaceRequiredError(t.cwd,this.context.cwd);return(await a.StreamReport.start({configuration:e,json:this.json,stdout:this.context.stdout},async e=>{const o=await this.listWorkspaces(t);for(const t of o)e.reportInfo(null,t.relativeCwd),e.reportJson({name:t.manifest.name?a.structUtils.stringifyIdent(t.manifest.name):null,location:t.relativeCwd})})).exitCode()}}p.usage=r.Command.Usage({description:"List changed workspaces and their dependents",details:"\n      If the `--json` flag is set the output will follow a JSON-stream output also known as NDJSON (https://github.com/ndjson/ndjson-spec).\n    ",examples:[["Find changed files within a Git range","yarn changed list --git-range 93a9ed8..4ef2c61"],["Include or exclude workspaces","yarn changed list --include @foo/a --exclude @foo/b"]]}),l([r.Command.Boolean("--json")],p.prototype,"json",void 0),l([r.Command.Path("changed","list")],p.prototype,"execute",null);var u=function(e,t,o,n){var r,a=arguments.length,s=a<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,o):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,o,n);else for(var i=e.length-1;i>=0;i--)(r=e[i])&&(s=(a<3?r(s):a>3?r(t,o,s):r(t,o))||s);return a>3&&s&&Object.defineProperty(t,o,s),s};class f extends d{constructor(){super(...arguments),this.args=[],this.verbose=!1,this.parallel=!1,this.interlaced=!1}async execute(){const e=await a.Configuration.find(this.context.cwd,this.context.plugins),{project:t,workspace:o}=await a.Project.find(e,this.context.cwd);if(!o)throw new n.WorkspaceRequiredError(t.cwd,this.context.cwd);const r=await this.listWorkspaces(t);if(!r.length){return(await a.StreamReport.start({configuration:e,stdout:this.context.stdout},async e=>{e.reportInfo(null,"No workspaces changed")})).exitCode()}return this.cli.run(["workspaces","foreach",...r.reduce((e,t)=>[...e,"--include",a.structUtils.stringifyIdent(t.locator)],[]),...this.verbose?["--verbose"]:[],...this.parallel?["--parallel"]:[],...this.interlaced?["--interlaced"]:[],...this.jobs?["--jobs",""+this.jobs]:[],this.commandName,...this.args],{cwd:t.cwd})}}f.usage=r.Command.Usage({description:"Run a command on changed workspaces and their dependents",details:"\n      This command will run a given sub-command on changed workspaces and workspaces depends on them.\n\n      Check the documentation for `yarn workspace foreach` for more details.\n    ",examples:[["Run build scripts on changed workspaces","yarn changed foreach run build"],["Find changed files within a Git range","yarn changed foreach --git-range 93a9ed8..4ef2c61 run build"]]}),u([r.Command.String()],f.prototype,"commandName",void 0),u([r.Command.Proxy()],f.prototype,"args",void 0),u([r.Command.Boolean("-v,--verbose")],f.prototype,"verbose",void 0),u([r.Command.Boolean("-p,--parallel")],f.prototype,"parallel",void 0),u([r.Command.Boolean("-i,--interlaced")],f.prototype,"interlaced",void 0),u([r.Command.String("-j,--jobs")],f.prototype,"jobs",void 0),u([r.Command.Path("changed","foreach")],f.prototype,"execute",null);const h={commands:[p,f]}},594:e=>{e.exports=require("@yarnpkg/cli")},966:e=>{e.exports=require("@yarnpkg/core")},42:e=>{e.exports=require("clipanion")}},t={};function o(n){if(t[n])return t[n].exports;var r=t[n]={exports:{}};return e[n](r,r.exports,o),r.exports}return o.d=(e,t)=>{for(var n in t)o.o(t,n)&&!o.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},o.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),o.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o(368)})();
return plugin;
}
};